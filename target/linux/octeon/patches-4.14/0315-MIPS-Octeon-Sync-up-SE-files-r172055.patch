From 61204a2d2556b21c745820eafcdf0d79d7af531b Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Wed, 12 Jun 2019 20:52:05 +0200
Subject: [PATCH 315/345] MIPS: Octeon: Sync-up SE files (-r172055)

Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
---
 .../cavium-octeon/executive/cvmx-helper-bgx.c |   16 +-
 .../executive/cvmx-helper-board.c             |   59 +-
 .../cavium-octeon/executive/cvmx-helper-cfg.c |   35 +
 arch/mips/cavium-octeon/executive/cvmx-pcie.c | 1517 +++++++++++------
 arch/mips/cavium-octeon/executive/cvmx-twsi.c |  207 ++-
 arch/mips/include/asm/octeon/cvmx-ciu-defs.h  |   56 +-
 arch/mips/include/asm/octeon/cvmx-dpi-defs.h  |   16 +-
 arch/mips/include/asm/octeon/cvmx-dtx-defs.h  |  120 +-
 arch/mips/include/asm/octeon/cvmx-fpa-defs.h  |   40 +-
 arch/mips/include/asm/octeon/cvmx-gpio-defs.h |   16 +-
 .../include/asm/octeon/cvmx-helper-board.h    |   19 +-
 .../mips/include/asm/octeon/cvmx-helper-cfg.h |   23 +
 arch/mips/include/asm/octeon/cvmx-l2c-defs.h  |   56 +-
 arch/mips/include/asm/octeon/cvmx-lmcx-defs.h |   48 +-
 arch/mips/include/asm/octeon/cvmx-mio-defs.h  |   48 +-
 arch/mips/include/asm/octeon/cvmx-osm-defs.h  |   56 +-
 .../include/asm/octeon/cvmx-pcieepx-defs.h    |  872 +++++-----
 .../include/asm/octeon/cvmx-pciercx-defs.h    |  592 +++----
 arch/mips/include/asm/octeon/cvmx-pemx-defs.h |   72 +-
 arch/mips/include/asm/octeon/cvmx-pexp-defs.h |  472 ++---
 arch/mips/include/asm/octeon/cvmx-pow.h       |  333 +++-
 arch/mips/include/asm/octeon/cvmx-sli-defs.h  |  530 +++---
 arch/mips/include/asm/octeon/cvmx-smix-defs.h |   40 +-
 arch/mips/include/asm/octeon/cvmx-sso-defs.h  |    8 +-
 .../mips/include/asm/octeon/cvmx-uctlx-defs.h |    8 +-
 25 files changed, 3085 insertions(+), 2174 deletions(-)

diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c b/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c
index 709eb0592ec1..d81c70711014 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-bgx.c
@@ -3663,24 +3663,21 @@ typedef struct {
 int cvmx_dump_bgx_config_node(unsigned node, unsigned bgx)
 {
 	lmac_config_t lmac[4];
-	cvmx_bgxx_cmr_global_config_t global_config;
 	cvmx_bgxx_cmr_rx_ovr_bp_t cmr_rx_ovr_bp;
 	unsigned ind, N;
 	uint8_t mask_aneg_ovrd, mask_aneg, lmac_type, lmac_gmii;
 	uint8_t lmac_sgmii, lmac_rgmii, lmac_xaui, lmac_rxaui, lmac_10g_r, lmac_40g_r;
 	int ipd_port, qlm, gbaud_mhz;
+	int xiface = cvmx_helper_node_interface_to_xiface(node, bgx);
 
 	lmac_sgmii = lmac_rgmii = lmac_xaui = lmac_rxaui = lmac_10g_r  = lmac_40g_r = 0;
 	mask_aneg_ovrd = mask_aneg = 0;
 
-	global_config.u64 = cvmx_read_csr_node(node,
-		CVMX_BGXX_CMR_GLOBAL_CONFIG(bgx));
-
 	cvmx_dprintf("\n/*===== BGX CONFIG Parameters			BGX%d =====*/\n", bgx);
 	/* just report configured RX/Tx LMACS - don't check return */
 	cvmx_helper_bgx_number_rx_tx_lmacs(node, bgx, &N);
 
-	qlm = bgx<2 ? (global_config.s.pmux_sds_sel==1 ? bgx+2 : bgx) : bgx+2;
+	qlm = cvmx_qlm_lmac(xiface, N - 1);
 	cvmx_dprintf("NODE%d: BGX%d/lmac[0..%d] connected to QLM%d\n",
 		node, bgx, N - 1, qlm);
 
@@ -4067,25 +4064,22 @@ typedef struct {
 int cvmx_dump_bgx_status_node(unsigned node, unsigned bgx)
 {
 	lmac_status_t lmac[4];
-	cvmx_bgxx_cmr_global_config_t global_config;
 	unsigned ind, N;
 	uint8_t lmac_type;
 	uint8_t lmac_sgmii, lmac_rgmii, lmac_xaui, lmac_rxaui, lmac_10g_r, lmac_40g_r;
 	int ipd_port, qlm;
+	int xiface = cvmx_helper_node_interface_to_xiface(node, bgx);
 
 	lmac_sgmii = lmac_rgmii = lmac_xaui = lmac_rxaui = lmac_10g_r  = lmac_40g_r = 0;
 
-	global_config.u64 = cvmx_read_csr_node(node,
-		CVMX_BGXX_CMR_GLOBAL_CONFIG(bgx));
-
 	cvmx_dprintf("\n/*===== BGX Status report			BGX%d =====*/\n", bgx);
 
 	/* just report configured RX/Tx LMACS - don't check return */
 	cvmx_helper_bgx_number_rx_tx_lmacs(node, bgx, &N);
 
-	qlm = bgx<2 ? (global_config.s.pmux_sds_sel==1 ? bgx+2 : bgx) : bgx+2;
+	qlm = cvmx_qlm_lmac(xiface, N - 1);
 	cvmx_dprintf("NODE%d: BGX%d/lmac[0..%d] connected to QLM%d\n",
-		node, bgx, N - 1,qlm);
+		node, bgx, N - 1, qlm);
 
 	for (ind = 0; ind < N; ind++) {
 		lmac[ind].cmr_config.u64 = cvmx_read_csr_node(node,
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-board.c b/arch/mips/cavium-octeon/executive/cvmx-helper-board.c
index 25c558524682..7d09d1800587 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-board.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-board.c
@@ -794,6 +794,47 @@ int cvmx_sfp_vsc7224_mod_abs_changed(struct cvmx_fdt_sfp_info *sfp, int val,
 
 	return err;
 }
+
+/**
+ * Function called whenever mod_abs/mod_prs has changed for Avago AVSP5410
+ *
+ * @param	sfp	pointer to SFP data structure
+ * @param	val	1 if absent, 0 if present, otherwise not set
+ * @param	data	user-defined data
+ *
+ * @return	0 for success, -1 on error
+	 */
+int cvmx_sfp_avsp5410_mod_abs_changed(struct cvmx_fdt_sfp_info *sfp, int val,
+				     void *data)
+{
+	int err;
+	struct cvmx_sfp_mod_info *mod_info;
+	const int dbg = device_tree_dbg;
+
+	if (dbg)
+		cvmx_dprintf("%s(%s, %d, %p): Module %s\n", __func__,
+			     sfp->name, val, data, val ? "absent" : "present");
+	if (val)
+		return 0;
+
+	/* We're here if we detect that the module is now present */
+	err = cvmx_sfp_read_i2c_eeprom(sfp);
+	if (err) {
+		cvmx_dprintf("%s: Error reading the SFP module eeprom for %s\n",
+			     __func__, sfp->name);
+		return err;
+	}
+	mod_info = &sfp->sfp_info;
+
+	if (!mod_info->valid || !sfp->valid) {
+		if (dbg)
+			cvmx_dprintf("%s: Module data is invalid\n", __func__);
+			return -1;
+		}
+
+	return err;
+}
+
 #define CS4224_PP_LINE_SDS_COMMON_STX0_TX_OUTPUT_CTRLA	0x108F
 #define CS4224_PP_LINE_SDS_COMMON_STX0_TX_OUTPUT_CTRLB	0x1090
 #define CS4224_PP_LINE_SDS_DSP_MSEQ_SPARE22_LSB		0x12AC
@@ -1067,6 +1108,7 @@ static int cvmx_is_cortina(const struct cvmx_phy_info *phy_info)
 int cvmx_helper_phy_register_mod_abs_changed(int xiface, int index)
 {
 	struct cvmx_vsc7224_chan *vsc7224_chan;
+	struct cvmx_avsp5410 *avsp5410;
 	struct cvmx_phy_info *phy_info;
 	struct cvmx_fdt_sfp_info *sfp_info;
 	int cortina_type;
@@ -1094,6 +1136,18 @@ int cvmx_helper_phy_register_mod_abs_changed(int xiface, int index)
 		return 0;
 	}
 
+	/* See if the Avago AVSP5410 phy has been used */
+	avsp5410 = cvmx_helper_cfg_get_avsp5410_info(xiface, index);
+	if (avsp5410) {
+		if (device_tree_dbg)
+			cvmx_dprintf("%s: Registering AVSP5410 handler\n",
+				     __func__);
+		cvmx_sfp_register_mod_abs_changed(sfp_info,
+						  &cvmx_sfp_avsp5410_mod_abs_changed,
+						  NULL);
+		return 0;
+	}
+
 	/* Check which phy is used, i.e. Inphi CS4343 */
 	phy_info = cvmx_helper_get_port_phy_info(xiface, index);
 	if (!phy_info) {
@@ -1163,6 +1217,10 @@ int __cvmx_helper_78xx_parse_phy(struct cvmx_phy_info *phy_info, int ipd_port)
 			cvmx_dprintf("Error: could not parse Microsemi VSC7224 in DT\n");
 			return -1;
 		}
+		if (__cvmx_fdt_parse_avsp5410(fdt_addr)) {
+			cvmx_dprintf("Error: could not parse Avago AVSP5410 in DT\n");
+			return -1;
+		}
 		if (octeon_has_feature(OCTEON_FEATURE_BGX_XCV) &&
 		    __cvmx_helper_parse_bgx_rgmii_dt(fdt_addr)) {
 			cvmx_printf("Error: could not parse BGX XCV device tree\n");
@@ -1733,7 +1791,6 @@ int __cvmx_helper_parse_bgx_dt(void *fdt_addr)
 					     fdt_phy_node);
 			cvmx_helper_set_port_phy_present(xiface, port_index,
 							 false);
-
 		}
 		gpio_leds = __cvmx_helper_parse_gpio_leds(fdt_addr,
 							  fdt_port_node, false);
diff --git a/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c b/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c
index 6f48fb3063d3..f551ae9701f4 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-cfg.c
@@ -1010,6 +1010,8 @@ int __cvmx_helper_init_port_valid(void)
 		rc = __cvmx_helper_parse_bgx_dt(fdt_addr);
 		if (!rc)
 			rc = __cvmx_fdt_parse_vsc7224(fdt_addr);
+		if (!rc)
+			rc = __cvmx_fdt_parse_avsp5410(fdt_addr);
 		if (!rc && octeon_has_feature(OCTEON_FEATURE_BGX_XCV))
 			rc = __cvmx_helper_parse_bgx_rgmii_dt(fdt_addr);
 
@@ -1672,6 +1674,39 @@ void cvmx_helper_cfg_set_vsc7224_chan_info(int xiface, int index,
 							vsc7224_chan_info;
 }
 
+/**
+ * Get data structure defining the Avago AVSP5410 phy info
+ * or NULL if not present
+ *
+ * @param xiface	node and interface
+ * @param index		port index
+ *
+ * @return pointer to avsp5410 data structure or NULL if not present
+ */
+struct cvmx_avsp5410 *cvmx_helper_cfg_get_avsp5410_info(int xiface, int index)
+{
+	struct cvmx_xiface xi = cvmx_helper_xiface_to_node_interface(xiface);
+	if (!port_cfg_data_initialized)
+		cvmx_init_port_cfg();
+	return cvmx_cfg_port[xi.node][xi.interface][index].avsp5410;
+}
+
+/**
+ * Sets the Avago AVSP5410 phy info data structure
+ *
+ * @param	xiface	node and interface
+ * @param	index	port index
+ * @param[in]	avsp5410_info	Avago AVSP5410 data structure
+ */
+void cvmx_helper_cfg_set_avsp5410_info(int xiface, int index,
+				struct cvmx_avsp5410 *avsp5410_info)
+{
+	struct cvmx_xiface xi = cvmx_helper_xiface_to_node_interface(xiface);
+	if (!port_cfg_data_initialized)
+		cvmx_init_port_cfg();
+	cvmx_cfg_port[xi.node][xi.interface][index].avsp5410 = avsp5410_info;
+}
+
 /**
  * Gets the SFP data associated with a port
  *
diff --git a/arch/mips/cavium-octeon/executive/cvmx-pcie.c b/arch/mips/cavium-octeon/executive/cvmx-pcie.c
index 7f8c4854dc07..d108fb5c8d77 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-pcie.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-pcie.c
@@ -1,5 +1,5 @@
 /***********************license start***************
- * Copyright (c) 2003-2015  Cavium, Inc. <support@cavium.com>.  All rights
+ * Copyright (c) 2003-2018  Cavium, Inc. <support@cavium.com>.  All rights
  * reserved.
  *
  *
@@ -42,7 +42,7 @@
  *
  * Interface to PCIe as a host(RC) or target(EP)
  *
- * <hr>$Revision: 170015 $<hr>
+ * <hr>$Revision: 172055 $<hr>
  */
 #ifdef CVMX_BUILD_FOR_LINUX_KERNEL
 #include <asm/octeon/cvmx.h>
@@ -117,10 +117,18 @@
 #define CVMX_PCIE_CFGX_READ(p,addr)	cvmx_pcie_cfgx_read_node(node,p,addr)
 #define CVMX_PCIE_CFGX_WRITE(p,addr,val)	cvmx_pcie_cfgx_write_node(node,p,addr,val)
 
-bool pcie_link_initialized[CVMX_MAX_NODES][CVMX_PCIE_MAX_PORTS];
+/* #define DEBUG_PCIE */
+
+/* Number of LTSSM transitions to record, must be a power of 2 */
+#define LTSSM_HISTORY_SIZE 64
+#define MAX_RETRIES 2
 
+bool pcie_link_initialized[CVMX_MAX_NODES][CVMX_PCIE_MAX_PORTS];
 int cvmx_primary_pcie_bus_number = 1;
 
+static uint32_t __cvmx_pcie_config_read32(int node, int pcie_port, int bus, int dev,
+	 int func, int reg, int lst);
+
 /**
  * Return the Core virtual base address for PCIe IO access. IOs are
  * read/written as an offset from this address.
@@ -247,7 +255,7 @@ static int __cvmx_pcie_get_qlm(int node, int pcie_port)
 			else
 				return -1; /* PEM2 is disabled */
 		default:
-			cvmx_dprintf("Invalid %d PCIe port\n", pcie_port);
+			cvmx_printf("Invalid %d PCIe port\n", pcie_port);
 			return -2;
 		}
 	} else if (OCTEON_IS_MODEL(OCTEON_CN78XX)) {
@@ -294,7 +302,7 @@ static int __cvmx_pcie_get_qlm(int node, int pcie_port)
 				}
 			}
 		default:
-			cvmx_dprintf("Invalid %d PCIe port\n", pcie_port);
+			cvmx_printf("Invalid %d PCIe port\n", pcie_port);
 			return -1;
 		}
 	} else if (OCTEON_IS_MODEL(OCTEON_CN70XX)) {
@@ -659,13 +667,6 @@ static void __cvmx_pcie_rc_initialize_config_space(int node, int pcie_port)
 		cfg092.s.l6dtp = 7;
 		cfg092.s.l6utp = 7;
 		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG092(pcie_port), cfg092.u32);
-		if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_0)) {
-			cvmx_pciercx_cfg548_t cfg548;
-			/* Disable phase 2 and phase 3 equalization */
-			cfg548.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG548(pcie_port));
-			cfg548.s.ep2p3d = 1;
-			CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG548(pcie_port), cfg548.u32);
-		}
 	}
 }
 
@@ -742,11 +743,6 @@ static int __cvmx_pcie_rc_initialize_link_gen1(int pcie_port)
 		cvmx_wait(10000);
 		pciercx_cfg032.u32 = cvmx_pcie_cfgx_read(pcie_port,
 							 CVMX_PCIERCX_CFG032(pcie_port));
-		/* Errata (PEM-31375) PEM RSL accesses to PCLK registers can
-		   timeout during speed change. Check for a temporary hardware
-		   timeout, and retry if one happens */
-		if (pciercx_cfg032.u32 == 0xffffffff)
-			continue;
 	} while ((pciercx_cfg032.s.dlla == 0) || (pciercx_cfg032.s.lt == 1));
 
 	/* Clear all pending errors */
@@ -1308,6 +1304,140 @@ static void __cvmx_pcie_gser_phy_config(int node, int pcie_port, int qlm)
 	}
 }
 
+/* Get the PCIe LTSSM state for the given port
+ *
+ * @param node      Node to query
+ * @param pcie_port PEM to query
+ *
+ * @return LTSSM state
+ */
+static int __cvmx_pcie_rc_get_ltssm_state(int node, int pcie_port)
+{
+	uint64_t debug;
+
+	if (OCTEON_IS_MODEL(OCTEON_CN73XX) && (pcie_port == 0)) {
+
+		CVMX_WRITE_CSR(CVMX_DTX_SPEM_SELX(0), 0);
+		CVMX_READ_CSR(CVMX_DTX_SPEM_SELX(0));
+		CVMX_WRITE_CSR(CVMX_DTX_SPEM_ENAX(0), 0xfffffffffull);
+		CVMX_READ_CSR(CVMX_DTX_SPEM_ENAX(0));
+
+		/* Read the value */
+		debug = CVMX_READ_CSR(CVMX_DTX_SPEM_DATX(0));
+
+		/* Disable the PEM from driving OCLA signals */
+		CVMX_WRITE_CSR(CVMX_DTX_SPEM_ENAX(0), 0);
+		CVMX_READ_CSR(CVMX_DTX_SPEM_ENAX(0));
+	} else {
+		/* LTSSM state is in debug select 0 */
+		CVMX_WRITE_CSR(CVMX_DTX_PEMX_SELX(0, pcie_port), 0);
+		CVMX_READ_CSR(CVMX_DTX_PEMX_SELX(0, pcie_port));
+		CVMX_WRITE_CSR(CVMX_DTX_PEMX_ENAX(0, pcie_port), 0xfffffffffull);
+		CVMX_READ_CSR(CVMX_DTX_PEMX_ENAX(0, pcie_port));
+
+		/* Read the value */
+		debug = CVMX_READ_CSR(CVMX_DTX_PEMX_DATX(0, pcie_port));
+
+
+		/* Disable the PEM from driving OCLA signals */
+		CVMX_WRITE_CSR( CVMX_DTX_PEMX_ENAX(0, pcie_port), 0);
+		CVMX_READ_CSR(CVMX_DTX_PEMX_ENAX(0, pcie_port));
+	}
+
+	/* DBGSEL = 0x0, bits[8:3] */
+	return cvmx_bit_extract(debug, 3, 6);
+}
+
+/**
+ * Get the PCIe LTSSM state for the given port
+ *
+ * @param node      Node to query
+ * @param pcie_port PEM to query
+ *
+ * @return LTSSM state
+ */
+static const char *cvmx_pcie_get_ltssm_string(int ltssm)
+{
+	switch (ltssm) {
+		case 0x00: return "DETECT_QUIET";
+		case 0x01: return "DETECT_ACT";
+		case 0x02: return "POLL_ACTIVE";
+		case 0x03: return "POLL_COMPLIANCE";
+		case 0x04: return "POLL_CONFIG";
+		case 0x05: return "PRE_DETECT_QUIET";
+		case 0x06: return "DETECT_WAIT";
+		case 0x07: return "CFG_LINKWD_START";
+		case 0x08: return "CFG_LINKWD_ACEPT";
+		case 0x09: return "CFG_LANENUM_WAIT";
+		case 0x0A: return "CFG_LANENUM_ACEPT";
+		case 0x0B: return "CFG_COMPLETE";
+		case 0x0C: return "CFG_IDLE";
+		case 0x0D: return "RCVRY_LOCK";
+		case 0x0E: return "RCVRY_SPEED";
+		case 0x0F: return "RCVRY_RCVRCFG";
+		case 0x10: return "RCVRY_IDLE";
+		case 0x11: return "L0";
+		case 0x12: return "L0S";
+		case 0x13: return "L123_SEND_EIDLE";
+		case 0x14: return "L1_IDLE";
+		case 0x15: return "L2_IDLE";
+		case 0x16: return "L2_WAKE";
+		case 0x17: return "DISABLED_ENTRY";
+		case 0x18: return "DISABLED_IDLE";
+		case 0x19: return "DISABLED";
+		case 0x1A: return "LPBK_ENTRY";
+		case 0x1B: return "LPBK_ACTIVE";
+		case 0x1C: return "LPBK_EXIT";
+		case 0x1D: return "LPBK_EXIT_TIMEOUT";
+		case 0x1E: return "HOT_RESET_ENTRY";
+		case 0x1F: return "HOT_RESET";
+		case 0x20: return "RCVRY_EQ0";
+		case 0x21: return "RCVRY_EQ1";
+		case 0x22: return "RCVRY_EQ2";
+		case 0x23: return "RCVRY_EQ3";
+		default:   return "Unknown";
+	}
+}
+
+/**
+ * During PCIe link initialization we need to make config request to the attached
+ * device to verify its speed and width. These config access happen very early
+ * after the device is taken out of reset, so may fail for some amount of time.
+ * This function automatically retries these config accesses. The normal builtin
+ * hardware retry isn't enough for this very early access.
+ *
+ * @param node      Note to read from
+ * @param pcie_port PCIe port to read from
+ * @param bus       PCIe bus number
+ * @param dev       PCIe device
+ * @param func      PCIe function on the device
+ * @param reg       Register to read
+ *
+ * @return Config register value, or all ones on failure
+ */
+static uint32_t cvmx_pcie_config_read32_retry(int node, int pcie_port, int bus, int dev, int func, int reg)
+{
+	/* Read the PCI config register until we get a valid value. Some cards
+	   require time after link up to return data. Wait at most 3 seconds */
+	uint64_t timeout = 300;
+	uint32_t val;
+
+	do {
+		/* Read PCI capability pointer */
+		val = __cvmx_pcie_config_read32(node, pcie_port, bus, dev, func, reg, 0);
+
+		/* Check the read succeeded */
+		if (val != 0xffffffff)
+			return val;
+		/* Failed, wait a little and try again */
+		cvmx_wait_usec(10000);
+	} while (--timeout);
+
+	cvmx_dprintf("N%d.PCIe%d: Config read failed, can't communicate with device\n", node, pcie_port);
+
+	return -1;
+}
+
 /**
  * @INTERNAL
  * Initialize a host mode PCIe gen 2 link. This function takes a PCIe
@@ -1322,12 +1452,9 @@ static void __cvmx_pcie_gser_phy_config(int node, int pcie_port, int qlm)
 static int __cvmx_pcie_rc_initialize_link_gen2(int node, int pcie_port)
 {
 	uint64_t start_cycle;
-	int try_gen3;
 
 	cvmx_pemx_ctl_status_t pem_ctl_status;
 	cvmx_pciercx_cfg032_t pciercx_cfg032;
-	cvmx_pciercx_cfg031_t pciercx_cfg031;
-	cvmx_pciercx_cfg040_t pciercx_cfg040;
 	cvmx_pciercx_cfg448_t pciercx_cfg448;
 
 	if (OCTEON_IS_OCTEON3()) {
@@ -1339,23 +1466,6 @@ static int __cvmx_pcie_rc_initialize_link_gen2(int node, int pcie_port)
 		}
 	}
 
-	/* Remember if the link should be Gen3. This is needed for the CN78XX
-	   pass 1.x workaround below */
-	pciercx_cfg031.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
-						 CVMX_PCIERCX_CFG031(pcie_port));
-	try_gen3 = (pciercx_cfg031.s.mls == 3);
-
-	/* Errata (GSER-21178) PCIe gen3 doesn't work */
-	if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_0) && try_gen3) {
-		/* Force Gen1 for initial link bringup. We'll fix it later */
-		pciercx_cfg031.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG031(pcie_port));
-		pciercx_cfg031.s.mls = 1;
-		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG031(pcie_port), pciercx_cfg031.u32);
-		pciercx_cfg040.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG040(pcie_port));
-		pciercx_cfg040.s.tls = 1;
-		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG040(pcie_port), pciercx_cfg040.u32);
-	}
-
 	/* Bring up the link */
 	pem_ctl_status.u64 = CVMX_READ_CSR(CVMX_PEMX_CTL_STATUS(pcie_port));
 	pem_ctl_status.s.lnk_enb = 1;
@@ -1372,82 +1482,6 @@ static int __cvmx_pcie_rc_initialize_link_gen2(int node, int pcie_port)
 							 CVMX_PCIERCX_CFG032(pcie_port));
 	} while ((pciercx_cfg032.s.dlla == 0) || (pciercx_cfg032.s.lt == 1));
 
-	/* Errata (GSER-21178) PCIe gen3 doesn't work, continued */
-	if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_0) && try_gen3) {
-		cvmx_pciercx_cfg031_t cfg031;
-		cvmx_pciercx_cfg040_t cfg040;
-		cvmx_pciercx_cfg515_t cfg515;
-		cvmx_pemx_cfg_t pem_cfg;
-		int low_qlm, high_qlm;
-		int qlm, lane;
-
-		/* Enable gen3 speed selection */
-		cfg031.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG031(pcie_port));
-		cfg031.s.mls = 3;
-		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG031(pcie_port), cfg031.u32);
-		cfg040.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG040(pcie_port));
-		cfg040.s.tls = 3;
-		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG040(pcie_port), cfg040.u32);
-		/* Force a demand speed change */
-		cfg515.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG515(pcie_port));
-		cfg515.s.dsc = 1;
-		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG515(pcie_port), cfg515.u32);
-		cvmx_wait_usec(500);
-
-		/* Wait up to 10ms for the link speed change to complete */
-		start_cycle = cvmx_get_cycle();
-		do {
-			if (cvmx_get_cycle() - start_cycle > cvmx_clock_get_rate(CVMX_CLOCK_CORE))
-				return -1;
-			cvmx_wait(10000);
-			pciercx_cfg032.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
-							 CVMX_PCIERCX_CFG032(pcie_port));
-		} while (pciercx_cfg032.s.ls != 3);
-
-		pem_cfg.u64 = CVMX_READ_CSR(CVMX_PEMX_CFG(pcie_port));
-		low_qlm = pcie_port;
-		high_qlm = (pem_cfg.cn78xx.lanes8) ? low_qlm+1 : low_qlm;
-
-		/* Toggle cfg_rx_dll_locken_ovvrd_en and rx_resetn_ovrrd_en across
-		   all QM lanes in use */
-		for (qlm = low_qlm; qlm <= high_qlm; qlm++) {
-			for (lane = 0; lane < 4; lane++) {
-				cvmx_gserx_lanex_rx_misc_ovrrd_t misc_ovrrd;
-				cvmx_gserx_lanex_pwr_ctrl_t pwr_ctrl;
-
-				misc_ovrrd.u64 = CVMX_READ_CSR(CVMX_GSERX_LANEX_RX_MISC_OVRRD(lane, qlm));
-				misc_ovrrd.s.cfg_rx_dll_locken_ovrrd_en = 1;
-				CVMX_WRITE_CSR(CVMX_GSERX_LANEX_RX_MISC_OVRRD(lane, qlm), misc_ovrrd.u64);
-				pwr_ctrl.u64 = CVMX_READ_CSR(CVMX_GSERX_LANEX_PWR_CTRL(lane, qlm));
-				pwr_ctrl.s.rx_resetn_ovrrd_en = 1;
-				CVMX_WRITE_CSR(CVMX_GSERX_LANEX_PWR_CTRL(lane, qlm), pwr_ctrl.u64);
-			}
-		}
-		for (qlm = low_qlm; qlm <= high_qlm; qlm++) {
-			for (lane = 0; lane < 4; lane++) {
-				cvmx_gserx_lanex_rx_misc_ovrrd_t misc_ovrrd;
-				cvmx_gserx_lanex_pwr_ctrl_t pwr_ctrl;
-
-				misc_ovrrd.u64 = CVMX_READ_CSR(CVMX_GSERX_LANEX_RX_MISC_OVRRD(lane, qlm));
-				misc_ovrrd.s.cfg_rx_dll_locken_ovrrd_en = 0;
-				CVMX_WRITE_CSR(CVMX_GSERX_LANEX_RX_MISC_OVRRD(lane, qlm), misc_ovrrd.u64);
-				pwr_ctrl.u64 = CVMX_READ_CSR(CVMX_GSERX_LANEX_PWR_CTRL(lane, qlm));
-				pwr_ctrl.s.rx_resetn_ovrrd_en = 0;
-				CVMX_WRITE_CSR(CVMX_GSERX_LANEX_PWR_CTRL(lane, qlm), pwr_ctrl.u64);
-			}
-		}
-
-		/* Wait for the link to come up (hopefully Gen3) and link
-		   training to be complete */
-		start_cycle = cvmx_clock_get_count(CVMX_CLOCK_CORE);
-		do {
-			if (cvmx_clock_get_count(CVMX_CLOCK_CORE) - start_cycle > cvmx_clock_get_rate(CVMX_CLOCK_CORE))
-				return -1;
-			cvmx_wait_usec(1000);
-			pciercx_cfg032.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG032(pcie_port));
-		} while ((pciercx_cfg032.s.dlla == 0) || (pciercx_cfg032.s.lt == 1));
-	}
-
 	/* Update the Replay Time Limit.  Empirically, some PCIe devices take a
 	 * little longer to respond than expected under load. As a workaround
 	 * for this we configure the Replay Time Limit to the value expected
@@ -1476,69 +1510,40 @@ static int __cvmx_pcie_rc_initialize_link_gen2(int node, int pcie_port)
 	return 0;
 }
 
-/**
- * Initialize a PCIe gen 2 port for use in host(RC) mode. It doesn't enumerate
- * the bus.
- *
- * @param pcie_port PCIe port to initialize
- *
- * @return Zero on success
- */
-static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
+static int __cvmx_pcie_check_pcie_port(int node, int pcie_port, enum cvmx_qlm_mode mode)
 {
-	int i;
-	cvmx_ciu_soft_prst_t ciu_soft_prst;
-	cvmx_mio_rst_ctlx_t mio_rst_ctl;
-	cvmx_pemx_bar_ctl_t pemx_bar_ctl;
-	cvmx_pemx_ctl_status_t pemx_ctl_status;
-	cvmx_pemx_bist_status_t pemx_bist_status;
-	cvmx_pemx_bist_status2_t pemx_bist_status2;
-	cvmx_pciercx_cfg032_t pciercx_cfg032;
-	cvmx_pciercx_cfg515_t pciercx_cfg515;
-	cvmx_sli_ctl_portx_t sli_ctl_portx;
-	cvmx_sli_mem_access_ctl_t sli_mem_access_ctl;
-	cvmx_sli_mem_access_subidx_t mem_access_subid;
-	cvmx_pemx_bar1_indexx_t bar1_index;
-	uint64_t ciu_soft_prst_reg, ciu_soft_prst_reg_alt, rst_ctl_reg;
-	int ep_mode;
-	int qlm;
-	int node = (pcie_port >> 4) & 0x3;
-	int connected_pcie_reset = -1;
-	int requires_pem_reset = 0;
-	enum cvmx_qlm_mode mode = CVMX_QLM_MODE_DISABLED;
-#ifndef CVMX_BUILD_FOR_LINUX_KERNEL
-	static void *fdt_addr = 0;
-#endif
-	pcie_port &= 0x3;
-	qlm = __cvmx_pcie_get_qlm(node, pcie_port);
-#ifdef CVMX_BUILD_FOR_LINUX_KERNEL
-	/* Configure PCIe based on device tree. */
-	if ((qlm < 0) &&
-	    (OCTEON_IS_OCTEON3()) &&
-	    (!OCTEON_IS_MODEL(OCTEON_CN70XX))) {
-		cvmx_gserx_cfg_t gserx_cfg;
-
-		gserx_cfg.u64 = cvmx_read_csr_node(node, CVMX_GSERX_CFG(qlm));
-		if (!gserx_cfg.s.pcie) {
-			gserx_cfg.s.pcie = 1;
-			cvmx_write_csr_node(node, CVMX_GSERX_CFG(qlm),
-					    gserx_cfg.u64);
-			gserx_cfg.u64 = cvmx_read_csr_node(node,
-							   CVMX_GSERX_CFG(qlm));
-			if (gserx_cfg.s.pcie) {
-				/* Endpoint was hotplugged, try again */
-				qlm = __cvmx_pcie_get_qlm(node, pcie_port);
-				if (qlm < 0)
-					return -1;
-			}
-		}
+	if (mode == CVMX_QLM_MODE_SRIO_1X4 ||
+	    mode == CVMX_QLM_MODE_SRIO_2X2 ||
+	    mode == CVMX_QLM_MODE_SRIO_4X1) {
+		cvmx_printf("%d:PCIe: Port %d is SRIO, skipping.\n", node, pcie_port);
+		return -1;
+	} else if (mode == CVMX_QLM_MODE_SGMII) {
+		cvmx_printf("%d:PCIe: Port %d is SGMII, skipping.\n", node, pcie_port);
+		return -1;
+	} else if (mode == CVMX_QLM_MODE_XAUI ||
+		   mode == CVMX_QLM_MODE_RXAUI) {
+		cvmx_printf("%d:PCIe: Port %d is XAUI, skipping.\n", node, pcie_port);
+		return -1;
+	} else if (mode == CVMX_QLM_MODE_ILK) {
+		cvmx_printf("%d:PCIe: Port %d is ILK, skipping.\n", node, pcie_port);
+		return -1;
+	} else if (mode != CVMX_QLM_MODE_PCIE &&
+		   mode != CVMX_QLM_MODE_PCIE_1X8 &&
+		   mode != CVMX_QLM_MODE_PCIE_1X2 &&
+		   mode != CVMX_QLM_MODE_PCIE_2X1 &&
+		   mode != CVMX_QLM_MODE_PCIE_1X1) {
+		cvmx_printf("%d:PCIe: Port %d is unknown, skipping.\n", node, pcie_port);
+		return -1;
 	}
-#endif
+	return 0;
+}
 
-	if (pcie_port >= CVMX_PCIE_PORTS) {
-		//cvmx_dprintf("Invalid PCIe%d port\n", pcie_port);
+static int __cvmx_pcie_check_qlm_mode(int node, int pcie_port, int qlm)
+{
+	enum cvmx_qlm_mode mode = CVMX_QLM_MODE_DISABLED;
+
+	if (qlm < 0)
 		return -1;
-	}
 
 	/* Make sure this interface is PCIe */
 	if (OCTEON_IS_MODEL(OCTEON_CN70XX)) {
@@ -1547,7 +1552,6 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 				    pcie_port);
 			return -1;
 		}
-		mode = cvmx_qlm_get_mode(qlm);
 	} else if (octeon_has_feature(OCTEON_FEATURE_PCIE)) {
 		/* Requires reading the MIO_QLMX_CFG register to figure
 		   out the port type. */
@@ -1570,263 +1574,237 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 		else if (OCTEON_IS_MODEL(OCTEON_CNF71XX))
 			qlm = 1;
 
-		if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-			mode = cvmx_qlm_get_mode_cn78xx(node, qlm);
-		else
-			mode = cvmx_qlm_get_mode(qlm);
-		if (mode == CVMX_QLM_MODE_SRIO_1X4 ||
-		    mode == CVMX_QLM_MODE_SRIO_2X2 ||
-		    mode == CVMX_QLM_MODE_SRIO_4X1) {
-			cvmx_printf("%d:PCIe: Port %d is SRIO, skipping.\n",
-				    node, pcie_port);
-			return -1;
-		} else if (mode == CVMX_QLM_MODE_SGMII) {
-			cvmx_printf("%d:PCIe: Port %d is SGMII, skipping.\n",
-				    node, pcie_port);
-			return -1;
-		} else if (mode == CVMX_QLM_MODE_XAUI ||
-			   mode == CVMX_QLM_MODE_RXAUI) {
-			cvmx_printf("%d:PCIe: Port %d is XAUI, skipping.\n",
-				    node, pcie_port);
-			return -1;
-		} else if (mode == CVMX_QLM_MODE_ILK) {
-			cvmx_printf("%d:PCIe: Port %d is ILK, skipping.\n",
-				    node, pcie_port);
-			return -1;
-		} else if (mode != CVMX_QLM_MODE_PCIE &&
-			   mode != CVMX_QLM_MODE_PCIE_1X8 &&
-			   mode != CVMX_QLM_MODE_PCIE_1X2 &&
-			   mode != CVMX_QLM_MODE_PCIE_2X1 &&
-			   mode != CVMX_QLM_MODE_PCIE_1X1) {
-			cvmx_printf("%d:PCIe: Port %d is unknown, skipping.\n",
-				    node, pcie_port);
-			return -1;
-		}
-	}
-#if 0
-	/* This code is so that the PCIe analyzer is able to see 63XX traffic */
-	cvmx_dprintf("PCIE : init for pcie analyzer.\n");
-	cvmx_helper_qlm_jtag_init();
-	cvmx_helper_qlm_jtag_shift_zeros(pcie_port, 85);
-	cvmx_helper_qlm_jtag_shift(pcie_port, 1, 1);
-	cvmx_helper_qlm_jtag_shift_zeros(pcie_port, 300 - 86);
-	cvmx_helper_qlm_jtag_shift_zeros(pcie_port, 85);
-	cvmx_helper_qlm_jtag_shift(pcie_port, 1, 1);
-	cvmx_helper_qlm_jtag_shift_zeros(pcie_port, 300 - 86);
-	cvmx_helper_qlm_jtag_shift_zeros(pcie_port, 85);
-	cvmx_helper_qlm_jtag_shift(pcie_port, 1, 1);
-	cvmx_helper_qlm_jtag_shift_zeros(pcie_port, 300 - 86);
-	cvmx_helper_qlm_jtag_shift_zeros(pcie_port, 85);
-	cvmx_helper_qlm_jtag_shift(pcie_port, 1, 1);
-	cvmx_helper_qlm_jtag_shift_zeros(pcie_port, 300 - 86);
-	cvmx_helper_qlm_jtag_update(pcie_port);
-#endif
+		mode = cvmx_qlm_get_mode(qlm);
 
-	/* Make sure we aren't trying to setup a target mode interface in host
-	 * mode
-	 */
-	if (OCTEON_IS_OCTEON3()) {
-		ciu_soft_prst_reg = CVMX_RST_SOFT_PRSTX(pcie_port);
-		ciu_soft_prst_reg_alt = CVMX_RST_SOFT_PRSTX(pcie_port ^ 1);
-		rst_ctl_reg = CVMX_RST_CTLX(pcie_port);
-		if (!OCTEON_IS_MODEL(OCTEON_CN70XX))
-			requires_pem_reset = 1;
-	} else {
-		ciu_soft_prst_reg = (pcie_port) ?
-				 CVMX_CIU_SOFT_PRST1 : CVMX_CIU_SOFT_PRST;
-		ciu_soft_prst_reg_alt = (pcie_port ^ 1) ?
-				 CVMX_CIU_SOFT_PRST1 : CVMX_CIU_SOFT_PRST;
-		rst_ctl_reg = CVMX_MIO_RST_CTLX(pcie_port);
+		__cvmx_pcie_check_pcie_port(node, pcie_port, mode);
 	}
+	return 0;
+}
 
-	mio_rst_ctl.u64 = CVMX_READ_CSR(rst_ctl_reg);
-	ep_mode = ((OCTEON_IS_MODEL(OCTEON_CN61XX) ||
-		    OCTEON_IS_MODEL(OCTEON_CNF71XX))
-		? (mio_rst_ctl.s.prtmode != 1) : (!mio_rst_ctl.s.host_mode));
+static void __cvmx_pcie_sli_config(int node, int pcie_port)
+{
+	cvmx_pemx_bar_ctl_t pemx_bar_ctl;
+	cvmx_pemx_ctl_status_t pemx_ctl_status;
+	cvmx_sli_ctl_portx_t sli_ctl_portx;
+	cvmx_sli_mem_access_ctl_t sli_mem_access_ctl;
+	cvmx_sli_mem_access_subidx_t mem_access_subid;
+	cvmx_pemx_bar1_indexx_t bar1_index;
+	int i;
 
-	if (OCTEON_IS_MODEL(OCTEON_CN70XX) && pcie_port) {
-		cvmx_pemx_cfg_t pemx_cfg;
-		pemx_cfg.u64 = cvmx_read_csr(CVMX_PEMX_CFG(0));
-		if ((pemx_cfg.s.md & 3) == 2) {
-			cvmx_printf("PCIe: Port %d in 1x4 mode.\n", pcie_port);
-			return -1;
-		}
-	}
+	/* Store merge control (SLI_MEM_ACCESS_CTL[TIMER,MAX_WORD]) */
+	sli_mem_access_ctl.u64 = CVMX_READ_CSR(CVMX_PEXP_SLI_MEM_ACCESS_CTL);
+	sli_mem_access_ctl.s.max_word = 0;	/* Allow 16 words to combine */
+	sli_mem_access_ctl.s.timer = 127;	/* Wait up to 127 cycles for more data */
+	CVMX_WRITE_CSR(CVMX_PEXP_SLI_MEM_ACCESS_CTL, sli_mem_access_ctl.u64);
 
-	if (OCTEON_IS_MODEL(OCTEON_CN78XX)) {
-		CVMX_WRITE_CSR(CVMX_DTX_PEMX_SELX(0, pcie_port), 0x17);
-		CVMX_WRITE_CSR(CVMX_DTX_PEMX_SELX(1, pcie_port), 0);
-	}
+	/* Setup Mem access SubDIDs */
+	mem_access_subid.u64 = 0;
+	mem_access_subid.s.port = pcie_port;	/* Port the request is sent to. */
+	mem_access_subid.s.nmerge = 0;	/* Allow merging as it works on CN6XXX. */
+	mem_access_subid.s.esr = _CVMX_PCIE_ES;	/* Endian-swap for Reads. */
+	mem_access_subid.s.esw = _CVMX_PCIE_ES;	/* Endian-swap for Writes. */
+	mem_access_subid.s.wtype = 0;	/* "No snoop" and "Relaxed ordering" are not set */
+	mem_access_subid.s.rtype = 0;	/* "No snoop" and "Relaxed ordering" are not set */
+	/* PCIe Adddress Bits <63:34>. */
+	if (OCTEON_IS_MODEL(OCTEON_CN68XX))
+		mem_access_subid.cn68xx.ba = 0;
+	else
+		mem_access_subid.cn63xx.ba = 0;
 
-	if (ep_mode) {
-		cvmx_printf("%d:PCIe: Port %d in endpoint mode.\n", node, pcie_port);
-		return -1;
+	/* Setup mem access 12-15 for port 0, 16-19 for port 1, supplying 36
+	 * bits of address space
+	 */
+	for (i = 12 + pcie_port * 4; i < 16 + pcie_port * 4; i++) {
+		CVMX_WRITE_CSR(CVMX_PEXP_SLI_MEM_ACCESS_SUBIDX(i),
+			       mem_access_subid.u64);
+		/* Set each SUBID to extend the addressable range */
+		__cvmx_increment_ba(&mem_access_subid);
 	}
 
-#if 0
-	/* Enable this code to force PCIe link for x1 lane card. */
-	__cvmx_qlm_pcie_cfg_rxd_set_tweak(qlm, 0);
-#endif
-
-#if 0
-	/* Enable this code to force PCIe link for x2 lane card. */
-	__cvmx_qlm_pcie_cfg_rxd_set_tweak(qlm, 0);
-	__cvmx_qlm_pcie_cfg_rxd_set_tweak(qlm, 1);
-#endif
-
-#if 0
-	/* Enable this code to force PCIe link for x4 lane card. */
-	__cvmx_qlm_pcie_cfg_rxd_set_tweak(qlm, -1);
-#endif
-
-	/* CN63XX Pass 1.0 errata G-14395 requires the QLM De-emphasis be
-	 * programmed
-	 */
-	if (OCTEON_IS_MODEL(OCTEON_CN63XX_PASS1_0)) {
-		if (pcie_port) {
-			cvmx_ciu_qlm1_t ciu_qlm;
-			ciu_qlm.u64 = cvmx_read_csr(CVMX_CIU_QLM1);
-			ciu_qlm.s.txbypass = 1;
-			ciu_qlm.s.txdeemph = 5;
-			ciu_qlm.s.txmargin = 0x17;
-			cvmx_write_csr(CVMX_CIU_QLM1, ciu_qlm.u64);
-		} else {
-			cvmx_ciu_qlm0_t ciu_qlm;
-			ciu_qlm.u64 = cvmx_read_csr(CVMX_CIU_QLM0);
-			ciu_qlm.s.txbypass = 1;
-			ciu_qlm.s.txdeemph = 5;
-			ciu_qlm.s.txmargin = 0x17;
-			cvmx_write_csr(CVMX_CIU_QLM0, ciu_qlm.u64);
+	if (OCTEON_IS_MODEL(OCTEON_CN63XX) ||
+	    OCTEON_IS_MODEL(OCTEON_CN66XX) ||
+	    OCTEON_IS_MODEL(OCTEON_CN68XX) ||
+	    (OCTEON_IS_OCTEON3() && !OCTEON_IS_MODEL(OCTEON_CN70XX))) {
+		/* Disable the peer to peer forwarding register. This must be
+		 * setup by the OS after it enumerates the bus and assigns
+		 * addresses to the PCIe busses
+		 */
+		for (i = 0; i < 4; i++) {
+			CVMX_WRITE_CSR(CVMX_PEMX_P2P_BARX_START(i, pcie_port), -1);
+			CVMX_WRITE_CSR(CVMX_PEMX_P2P_BARX_END(i, pcie_port), -1);
 		}
 	}
 
-	/* On some boards, notably the SFF6100 board, the PCIe reset lines
-	 * are miswired in PCIe 2x1 mode.  In 2x1 mode, the PRST line of
-	 * QLM0 should go to PCIe PEM 0 and the PRST line of QLM1 should
-	 * go to PEM 1.
-	 *
-	 * On the SFF board, the PRST line of QLM1 is wired to both PEM0 and
-	 * PEM1.
+	/* Set Octeon's BAR0 to decode 0-16KB. It overlaps with Bar2 */
+	CVMX_WRITE_CSR(CVMX_PEMX_P2N_BAR0_START(pcie_port), 0);
+
+	/* Set Octeon's BAR2 to decode 0-2^41. Bar0 and Bar1 take precedence
+	 * where they overlap. It also overlaps with the device addresses, so
+	 * make sure the peer to peer forwarding is set right
 	 */
-#ifndef CVMX_BUILD_FOR_LINUX_KERNEL
-	/* Note that fdr_addr is 'static' */
-	if (fdt_addr == 0 && mode == CVMX_QLM_MODE_PCIE_2X1)
-		fdt_addr = __cvmx_phys_addr_to_ptr(cvmx_sysinfo_get()->fdt_addr,
-						   OCTEON_FDT_MAX_SIZE);
-	if (fdt_addr && mode == CVMX_QLM_MODE_PCIE_2X1) {
-		int offset;
-
-		offset = fdt_path_offset(fdt_addr, "/soc");
-		if (offset >= 0) {
-			connected_pcie_reset =
-				cvmx_fdt_get_int(fdt_addr, offset,
-						 "cavium,connected-pcie-reset-2x1",
-						 -1);
-		}
-	}
-#else
-	if (mode == CVMX_QLM_MODE_PCIE_2X1) {
-		struct device_node *node = of_find_node_by_path("/soc@0");
-		if (node) {
-			if (of_property_read_u32(node,
-						 "cavium,connected-pcie-reset-2x1",
-						 &connected_pcie_reset) != 0)
-				connected_pcie_reset = -1;
-		}
-	}
-#endif
-	/* On SFF6100 board, if QLM1 is configured as 2X1 DLM mode,
-	   the board has mis-wired PCIe reset line, initialize PCIe1
-	   followed by PCIe0. */
-	switch (connected_pcie_reset) {
-	case 0:
-	case 1:
-		if ((pcie_port != connected_pcie_reset) &&
-		    (mode == CVMX_QLM_MODE_PCIE_2X1)) {
-			ciu_soft_prst.u64 = CVMX_READ_CSR(ciu_soft_prst_reg);
-			if (ciu_soft_prst.s.soft_prst == 0) {
-				/* Reset the port */
-				ciu_soft_prst.s.soft_prst = 1;
-				CVMX_WRITE_CSR(ciu_soft_prst_reg,
-					       ciu_soft_prst.u64);
-				CVMX_WRITE_CSR(ciu_soft_prst_reg_alt,
-					       ciu_soft_prst.u64);
-				/* Wait until pcie resets the ports. */
-				cvmx_wait_usec(2000);
+	CVMX_WRITE_CSR(CVMX_PEMX_P2N_BAR2_START(pcie_port), 0);
 
-			}
-		}
-		ciu_soft_prst.u64 = CVMX_READ_CSR(ciu_soft_prst_reg);
-		ciu_soft_prst.s.soft_prst = 0;
-		CVMX_WRITE_CSR(ciu_soft_prst_reg, ciu_soft_prst.u64);
-		ciu_soft_prst.u64 = CVMX_READ_CSR(ciu_soft_prst_reg_alt);
-		ciu_soft_prst.s.soft_prst = 0;
-		CVMX_WRITE_CSR(ciu_soft_prst_reg_alt, ciu_soft_prst.u64);
-		break;
-	case -1:
-	default:
-		/* Bring the PCIe out of reset */
-		ciu_soft_prst.u64 = CVMX_READ_CSR(ciu_soft_prst_reg);
-		/* After a chip reset the PCIe will also be in reset. If it
-		 * isn't, most likely someone is trying to init it again
-		 * without a proper PCIe reset.
-		 */
-		if (ciu_soft_prst.s.soft_prst == 0) {
-			/* Disable the MAC controller before resetting */
-			if (requires_pem_reset) {
-				__cvmx_pcie_config_pemon(node, pcie_port, 0);
-			}
+	/* Setup BAR2 attributes */
+	/* Relaxed Ordering (NPEI_CTL_PORTn[PTLP_RO,CTLP_RO, WAIT_COM]) */
+	/* \AD PTLP_RO,CTLP_RO should normally be set (except for debug). */
+	/* \AD WAIT_COM=0 will likely work for all applications. */
+	/* Load completion relaxed ordering (NPEI_CTL_PORTn[WAITL_COM]) */
+	pemx_bar_ctl.u64 = CVMX_READ_CSR(CVMX_PEMX_BAR_CTL(pcie_port));
+	pemx_bar_ctl.s.bar1_siz = 3;	/* 256MB BAR1 */
+	pemx_bar_ctl.s.bar2_enb = 1;
+	pemx_bar_ctl.s.bar2_esx = _CVMX_PCIE_ES;
+	pemx_bar_ctl.s.bar2_cax = 0;
+	CVMX_WRITE_CSR(CVMX_PEMX_BAR_CTL(pcie_port), pemx_bar_ctl.u64);
+	sli_ctl_portx.u64 = CVMX_READ_CSR(CVMX_PEXP_SLI_CTL_PORTX(pcie_port));
+	sli_ctl_portx.s.ptlp_ro = 1;
+	sli_ctl_portx.s.ctlp_ro = 1;
+	sli_ctl_portx.s.wait_com = 0;
+	sli_ctl_portx.s.waitl_com = 0;
+	CVMX_WRITE_CSR(CVMX_PEXP_SLI_CTL_PORTX(pcie_port), sli_ctl_portx.u64);
 
-			/* Reset the port */
-			ciu_soft_prst.s.soft_prst = 1;
-			CVMX_WRITE_CSR(ciu_soft_prst_reg, ciu_soft_prst.u64);
+	/* BAR1 follows BAR2 */
+	CVMX_WRITE_CSR(CVMX_PEMX_P2N_BAR1_START(pcie_port),
+		       CVMX_PCIE_BAR1_RC_BASE);
 
-			/* Read to make sure write happens */
-			ciu_soft_prst.u64 = CVMX_READ_CSR(ciu_soft_prst_reg);
+	bar1_index.u64 = 0;
+	bar1_index.s.addr_idx = (CVMX_PCIE_BAR1_PHYS_BASE >> 22);
+	bar1_index.s.ca = 1;	/* Not Cached */
+	bar1_index.s.end_swp = _CVMX_PCIE_ES;	/* Endian Swap mode */
+	bar1_index.s.addr_v = 1;	/* Valid entry */
 
-			/* Keep PERST asserted for 2 ms */
-			cvmx_wait_usec(2000);
+	for (i = 0; i < 16; i++) {
+		CVMX_WRITE_CSR(CVMX_PEMX_BAR1_INDEXX(i, pcie_port),
+			       bar1_index.u64);
+		/* 256MB / 16 >> 22 == 4 */
+		bar1_index.s.addr_idx += (((1ull << 28) / 16ull) >> 22);
+	}
 
-			if (requires_pem_reset) {
-				/* Reset GSER_PHY to put in a clean state */
-				__cvmx_pcie_gser_phy_config(node, pcie_port, qlm);
-				requires_pem_reset = 2;
+	/* Wait for 200ms */
+	pemx_ctl_status.u64 = CVMX_READ_CSR(CVMX_PEMX_CTL_STATUS(pcie_port));
+	pemx_ctl_status.cn63xx.cfg_rtry = cfg_retries();
+	CVMX_WRITE_CSR(CVMX_PEMX_CTL_STATUS(pcie_port), pemx_ctl_status.u64);
 
-				/* Enable MAC controller before taking pcie out of reset */
-				__cvmx_pcie_config_pemon(node, pcie_port, 1);
-			}
+	/* Here is the second part of the config retry changes. Wait for 700ms
+	   after setting up the link before continuing. PCIe says the devices
+	   may need up to 900ms to come up. 700ms plus 200ms from above gives 
+	   us a total of 900ms */
+	cvmx_wait_usec(700000);
+}
+
+/**
+ * Initialize a PCIe gen 2 port for use in host(RC) mode. It doesn't enumerate
+ * the bus.
+ *
+ * @param pcie_port PCIe port to initialize
+ *
+ * @return Zero on success
+ */
+static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
+{
+	cvmx_ciu_soft_prst_t ciu_soft_prst;
+	cvmx_mio_rst_ctlx_t mio_rst_ctl;
+	cvmx_pemx_bist_status_t pemx_bist_status;
+	cvmx_pemx_bist_status2_t pemx_bist_status2;
+	cvmx_pciercx_cfg032_t pciercx_cfg032;
+	cvmx_pciercx_cfg515_t pciercx_cfg515;
+	uint64_t ciu_soft_prst_reg, rst_ctl_reg;
+	int ep_mode;
+	int qlm = 0;
+	int node = (pcie_port >> 4) & 0x3;
+
+	pcie_port &= 0x3;
+
+	if (pcie_port >= CVMX_PCIE_PORTS) {
+		//cvmx_dprintf("Invalid PCIe%d port\n", pcie_port);
+		return -1;
+	}
+
+	if (__cvmx_pcie_check_qlm_mode(node, pcie_port, qlm))
+		return -1;
+
+	/* Make sure we aren't trying to setup a target mode interface in host
+	 * mode
+	 */
+	if (OCTEON_IS_OCTEON3()) {
+		ciu_soft_prst_reg = CVMX_RST_SOFT_PRSTX(pcie_port);
+		rst_ctl_reg = CVMX_RST_CTLX(pcie_port);
+	} else {
+		ciu_soft_prst_reg = (pcie_port) ?
+			CVMX_CIU_SOFT_PRST1 : CVMX_CIU_SOFT_PRST;
+		rst_ctl_reg = CVMX_MIO_RST_CTLX(pcie_port);
+	}
+	mio_rst_ctl.u64 = CVMX_READ_CSR(rst_ctl_reg);
+
+	ep_mode = ((OCTEON_IS_MODEL(OCTEON_CN61XX) ||
+		    OCTEON_IS_MODEL(OCTEON_CNF71XX))
+		? (mio_rst_ctl.s.prtmode != 1) : (!mio_rst_ctl.s.host_mode));
+
+	if (OCTEON_IS_MODEL(OCTEON_CN70XX) && pcie_port) {
+		cvmx_pemx_cfg_t pemx_cfg;
+		pemx_cfg.u64 = cvmx_read_csr(CVMX_PEMX_CFG(0));
+		if ((pemx_cfg.s.md & 3) == 2) {
+			cvmx_printf("PCIe: Port %d in 1x4 mode.\n", pcie_port);
+			return -1;
 		}
+	}
 
-		/* Deassert PERST */
-		ciu_soft_prst.u64 = CVMX_READ_CSR(ciu_soft_prst_reg);
-		ciu_soft_prst.s.soft_prst = 0;
+	if (ep_mode) {
+		cvmx_printf("%d:PCIe: Port %d in endpoint mode.\n", node, pcie_port);
+		return -1;
+	}
+
+	/* CN63XX Pass 1.0 errata G-14395 requires the QLM De-emphasis be
+	 * programmed
+	 */
+	if (OCTEON_IS_MODEL(OCTEON_CN63XX_PASS1_0)) {
+		if (pcie_port) {
+			cvmx_ciu_qlm1_t ciu_qlm;
+			ciu_qlm.u64 = cvmx_read_csr(CVMX_CIU_QLM1);
+			ciu_qlm.s.txbypass = 1;
+			ciu_qlm.s.txdeemph = 5;
+			ciu_qlm.s.txmargin = 0x17;
+			cvmx_write_csr(CVMX_CIU_QLM1, ciu_qlm.u64);
+		} else {
+			cvmx_ciu_qlm0_t ciu_qlm;
+			ciu_qlm.u64 = cvmx_read_csr(CVMX_CIU_QLM0);
+			ciu_qlm.s.txbypass = 1;
+			ciu_qlm.s.txdeemph = 5;
+			ciu_qlm.s.txmargin = 0x17;
+			cvmx_write_csr(CVMX_CIU_QLM0, ciu_qlm.u64);
+		}
+	}
+
+	/* Bring the PCIe out of reset */
+	ciu_soft_prst.u64 = CVMX_READ_CSR(ciu_soft_prst_reg);
+	/* After a chip reset the PCIe will also be in reset. If it
+	 * isn't, most likely someone is trying to init it again
+	 * without a proper PCIe reset.
+	 */
+	if (ciu_soft_prst.s.soft_prst == 0) {
+		/* Reset the port */
+		ciu_soft_prst.s.soft_prst = 1;
 		CVMX_WRITE_CSR(ciu_soft_prst_reg, ciu_soft_prst.u64);
+
+		/* Read to make sure write happens */
 		ciu_soft_prst.u64 = CVMX_READ_CSR(ciu_soft_prst_reg);
 
-		/* Check if PLLs are locked after GSER_PHY reset. */
-		if (requires_pem_reset == 2) {
-			cvmx_pemx_cfg_t pemx_cfg;
-			pemx_cfg.u64 = cvmx_read_csr(CVMX_PEMX_CFG(pcie_port));
-			if (CVMX_WAIT_FOR_FIELD64(CVMX_GSERX_QLM_STAT(qlm),
-				   cvmx_gserx_qlm_stat_t, rst_rdy, ==, 1, 10000)) {
-				cvmx_warn("QLM%d: Timeout waiting for GSERX_QLM_STAT[rst_rdy]\n", qlm);
-				return -1;
-			}
-			if (pemx_cfg.cn78xx.lanes8
-			    && (CVMX_WAIT_FOR_FIELD64(CVMX_GSERX_QLM_STAT(qlm + 1),
-				cvmx_gserx_qlm_stat_t, rst_rdy, ==, 1, 10000))) {
-				cvmx_warn("QLM%d: Timeout waiting for GSERX_QLM_STAT[rst_rdy]\n", qlm+1);
-				return -1;
-			}
-		}
+		/* Keep PERST asserted for 2 ms */
+		cvmx_wait_usec(2000);
 	}
 
+	/* Deassert PERST */
+	ciu_soft_prst.u64 = CVMX_READ_CSR(ciu_soft_prst_reg);
+	ciu_soft_prst.s.soft_prst = 0;
+	CVMX_WRITE_CSR(ciu_soft_prst_reg, ciu_soft_prst.u64);
+	ciu_soft_prst.u64 = CVMX_READ_CSR(ciu_soft_prst_reg);
+
 	/* Wait 1ms for PCIe reset to complete */
 	cvmx_wait_usec(1000);
 
 	/* Set MPLL multiplier as per Errata 20669. */
 	if (OCTEON_IS_MODEL(OCTEON_CN70XX)) {
 		int qlm = __cvmx_pcie_get_qlm(0, pcie_port);
+		enum cvmx_qlm_mode mode;
 		int old_mult;
 		uint64_t meas_refclock = cvmx_qlm_measure_clock(qlm);
 		if (meas_refclock > 99000000 && meas_refclock < 101000000)
@@ -1836,10 +1814,11 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 		else if (meas_refclock > 156000000 && meas_refclock < 156500000)
 			old_mult = 45;
 		else {
-			cvmx_dprintf("%s: Invalid reference clock for qlm %d\n",
+			cvmx_printf("%s: Invalid reference clock for qlm %d\n",
 				     __func__, qlm);
 			return -1;
 		}
+		mode = cvmx_qlm_get_mode(qlm);
 		__cvmx_qlm_set_mult(qlm, 2500, old_mult);
 		/* Adjust mplls for both dlms when configured as pcie 1x4 */
 		if ((mode == CVMX_QLM_MODE_PCIE) && (pcie_port == 0))
@@ -1849,7 +1828,8 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 	/* Check and make sure PCIe came out of reset. If it doesn't the board
 	   probably hasn't wired the clocks up and the interface should be
 	   skipped */
-	if (CVMX_WAIT_FOR_FIELD64_NODE(node, rst_ctl_reg, cvmx_mio_rst_ctlx_t,
+	if (CVMX_WAIT_FOR_FIELD64_NODE(node, rst_ctl_reg,
+				  cvmx_mio_rst_ctlx_t,
 				  rst_done, ==, 1, 10000)) {
 		cvmx_printf("%d:PCIe: Port %d stuck in reset, skipping.\n",
 			    node, pcie_port);
@@ -1861,11 +1841,8 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 	if (pemx_bist_status.u64)
 		cvmx_printf("%d:PCIe: BIST FAILED for port %d (0x%016llx)\n",
 			    node, pcie_port, CAST64(pemx_bist_status.u64));
-	/* BIST_STATUS2 is not present on some of Octeon3 models. */
-	if (OCTEON_IS_OCTEON3() && !OCTEON_IS_MODEL(OCTEON_CN70XX))
-		pemx_bist_status2.u64 = 0;
-	else
-		pemx_bist_status2.u64 = CVMX_READ_CSR(CVMX_PEMX_BIST_STATUS2(pcie_port));
+	pemx_bist_status2.u64 = CVMX_READ_CSR(CVMX_PEMX_BIST_STATUS2(pcie_port));
+
 	/* Errata PCIE-14766 may cause the lower 6 bits to be randomly set on CN63XXp1 */
 	if (OCTEON_IS_MODEL(OCTEON_CN63XX_PASS1_X))
 		pemx_bist_status2.u64 &= ~0x3full;
@@ -1888,165 +1865,605 @@ static int __cvmx_pcie_rc_initialize_gen2(int pcie_port)
 		/* Some gen1 devices don't handle the gen 2 training correctly.
 		 * Disable gen2 and try again with only gen1
 		 */
-		if (OCTEON_IS_OCTEON3() && !OCTEON_IS_MODEL(OCTEON_CN70XX)) {
-			cvmx_printf("%d:PCIe: Link timeout on port %d, probably the slot is empty\n",
-				    node, pcie_port);
-			return -1;
-		} else {
-			cvmx_pciercx_cfg031_t pciercx_cfg031;
-			pciercx_cfg031.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+		cvmx_pciercx_cfg031_t pciercx_cfg031;
+		pciercx_cfg031.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
 							 CVMX_PCIERCX_CFG031(pcie_port));
-			pciercx_cfg031.s.mls = 1;
-			CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG031(pcie_port),
-				     		pciercx_cfg031.u32);
-			if (__cvmx_pcie_rc_initialize_link_gen2(node, pcie_port)) {
-				cvmx_printf("PCIe: Link timeout on port %d, probably the slot is empty\n",
-					    pcie_port);
-				return -1;
-			}
+		pciercx_cfg031.s.mls = 1;
+		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG031(pcie_port),
+				     pciercx_cfg031.u32);
+		if (__cvmx_pcie_rc_initialize_link_gen2(node, pcie_port)) {
+			cvmx_printf("PCIe: Link timeout on port %d, probably the slot is empty\n",
+				     pcie_port);
+			return -1;
 		}
 	}
 
-	if (OCTEON_IS_MODEL(OCTEON_CN78XX)
-	    || OCTEON_IS_MODEL(OCTEON_CN73XX)
-	    || OCTEON_IS_MODEL(OCTEON_CNF75XX)) {
-		cvmx_pciercx_cfg038_t pciercx_cfg038;
-		cvmx_pciercx_cfg548_t cfg548;
+	__cvmx_pcie_sli_config(node, pcie_port);
+
+	/* Display the link status */
+	pciercx_cfg032.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+						 CVMX_PCIERCX_CFG032(pcie_port));
+	cvmx_printf("PCIe: Port %d link active, %d lanes, speed gen%d \n",
+		    pcie_port, pciercx_cfg032.s.nlw, pciercx_cfg032.s.ls);
 
+	pcie_link_initialized[node][pcie_port] = true;
+	return 0;
+}
+
+/**
+ * @INTERNAL
+ * Initialize a host mode PCIe gen 2 link. This function takes a PCIe
+ * port from reset to a link up state. Software can then begin
+ * configuring the rest of the link.
+ *
+ * @param node	    node
+ * @param pcie_port PCIe port to initialize
+ *
+ * @return Zero on success
+ */
+static int __cvmx_pcie_rc_initialize_link_gen2_v3(int node, int pcie_port)
+{
+	uint8_t ltssm_history[LTSSM_HISTORY_SIZE];
+	int ltssm_history_loc;
+	cvmx_pemx_ctl_status_t pem_ctl_status;
+	cvmx_pciercx_cfg006_t pciercx_cfg006;
+	cvmx_pciercx_cfg031_t pciercx_cfg031;
+	cvmx_pciercx_cfg032_t pciercx_cfg032;
+	cvmx_pciercx_cfg068_t pciercx_cfg068;
+	cvmx_pciercx_cfg448_t pciercx_cfg448;
+	cvmx_pciercx_cfg515_t pciercx_cfg515;
+	int max_gen, max_width;
+	uint64_t clock_rate, hold_time;
+	uint64_t bounce_allow_time;
+	uint64_t timeout, good_time, current_time;
+	int neg_gen, neg_width, bus, dev_gen, dev_width;
+	unsigned int cap, cap_next;
+	int ltssm_state, desired_gen;
+	int desired_width;
+	int i, need_speed_change, need_lane_change;
+	int do_retry_speed = 0;
+	int link_up = 0, is_loop_done = 0;
+
+	if (CVMX_WAIT_FOR_FIELD64_NODE(node, CVMX_PEMX_ON(pcie_port),
+				       cvmx_pemx_on_t, pemoor, ==, 1, 100000)) {
+		cvmx_printf("N%d:PCIe: Port %d PEM not on, skipping\n", node, pcie_port);
+		return -1;
+	}
+
+	/* Record starting LTSSM state for debug */
+	memset(ltssm_history, -1, sizeof(ltssm_history));
+	ltssm_history[0] = __cvmx_pcie_rc_get_ltssm_state(node, pcie_port);
+	ltssm_history_loc = 0;
+
+	pciercx_cfg031.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+						 CVMX_PCIERCX_CFG031(pcie_port));
+	/* Max speed of PEM from config (1-3) */
+	max_gen = pciercx_cfg031.s.mls;
+	/* Max lane width of PEM (1-3) */
+	max_width = pciercx_cfg031.s.mlw;
+#ifdef DEBUG_PCIE
+	cvmx_printf("N%d.PCIe%d: Link supports up to %d lanes, speed gen%d\n",
+		     node, pcie_port, max_width, max_gen);
+#endif
+
+	/* Bring up the link */
+#ifdef DEBUG_PCIE
+	cvmx_printf("N%d.PCIe%d: Enabling the link\n", node, pcie_port);
+#endif
+	pem_ctl_status.u64 = CVMX_READ_CSR(CVMX_PEMX_CTL_STATUS(pcie_port));
+	pem_ctl_status.s.lnk_enb = 1;
+	CVMX_WRITE_CSR(CVMX_PEMX_CTL_STATUS(pcie_port), pem_ctl_status.u64);
+
+	/* Configure SLI after enabling PCIe link. Is required for reading
+ 	   PCIe card capabilities. */
+	__cvmx_pcie_sli_config(node, pcie_port);
+
+	/* After the link is enabled  no prints until link up or error, Otherwise
+	   will miss link state captures  */
+
+retry_speed:
+	/* Clear RC Correctable Error Status Register */
+	CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG068(pcie_port), -1);
+
+	/* Wait for the link to come up and link training to be complete */
+#ifdef DEBUG_PCIE
+	cvmx_printf("N%d.PCIe%d: Waiting for link\n", node, pcie_port);
+#endif
+
+	/* Number of ticks in 1 sec */
+	clock_rate = cvmx_clock_get_rate(CVMX_CLOCK_CORE);
+	/* number of ticks in 200 mS */
+	hold_time = clock_rate / 5;
+	/* Number of ticks for 10 ms */
+	bounce_allow_time = clock_rate / 100;
+	/*  Number of ticks for 2 second */
+	timeout = cvmx_get_cycle() + clock_rate * 2;
+
+	/* Records when the link first went good */
+	good_time = 0;
+
+	do {
 		pciercx_cfg032.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
-					CVMX_PCIERCX_CFG032(pcie_port));
-		/* Errata PEM-28816: Link retrain initiated at GEN1 can cause PCIE
-		   link to hang. For Gen1 links we must disable equalization */
-		if (pciercx_cfg032.s.ls == 1) {
-#if 0
-			cvmx_dprintf("%d:%d:PCIe: Disabling equalization for GEN1 Link\n",
-					node, pcie_port);
+							 CVMX_PCIERCX_CFG032(pcie_port));
+		/* Errata PEM-31375 PEM RSL access to PCLK registers can
+  		   timeout during speed change. Check for temporary hardware
+  		   timeout, and rety if happens */
+		if (pciercx_cfg032.u32 == 0xffffffff)
+			continue;
+
+		/* Record LTSSM state for debug */
+		ltssm_state = __cvmx_pcie_rc_get_ltssm_state(node, pcie_port);
+
+		if (ltssm_history[ltssm_history_loc] != ltssm_state) {
+			ltssm_history_loc = (ltssm_history_loc + 1) & (LTSSM_HISTORY_SIZE - 1);
+			ltssm_history[ltssm_history_loc] = ltssm_state;
+		}
+
+		/* Check if the link is up */
+		current_time = cvmx_get_cycle ();
+		link_up = (pciercx_cfg032.s.dlla && !pciercx_cfg032.s.lt);
+
+		if (link_up) {
+			/* Is this the first link up? */
+			if (!good_time) {
+				/* Mark the time when the link transitioned to good */
+				good_time = current_time;
+			} else {
+				/* Check for a link error */
+				pciercx_cfg068.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+								CVMX_PCIERCX_CFG068(pcie_port));
+				if (pciercx_cfg068.s.res) {
+					/* Ignore errors before we've been stable for bounce_allow_time */
+					if (good_time + bounce_allow_time <= current_time) {
+#ifdef DEBUG_PCIE
+						cvmx_printf("N%d.PCIe%d: Link errors after link up\n", node, pcie_port);
+#endif
+						return 1; /* Link error, signal a retry */
+					} else {
+						/* Clear RC Correctable Error Status Register */
+						CVMX_PCIE_CFGX_WRITE(pcie_port,
+								CVMX_PCIERCX_CFG068(pcie_port), -1);
+#ifdef DEBUG_PCIE
+						cvmx_printf("N%d.PCIe%d: Ignored error during settling time\n",
+							     node, pcie_port);
+#endif
+					}
+				}
+			}
+		} else if (good_time) {
+			if (good_time + bounce_allow_time <= current_time) {
+				/* We allow bounces for bounce_allow_time after the link is good.
+				   Once this time passes any bounce requires a retry */
+#ifdef DEBUG_PCIE
+				cvmx_printf("N%d.PCIe%d: Link bounce detected\n", node, pcie_port);
+#endif
+				return 1; /* Link bounce, signal a retry */
+			} else {
+#ifdef DEBUG_PCIE
+				cvmx_printf("N%d.PCIe%d: Ignored bounce during settling time\n", node, pcie_port);
 #endif
-			cfg548.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
-					CVMX_PCIERCX_CFG548(pcie_port));
-			cfg548.s.ed = 1;
-			CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG548(pcie_port),
-					cfg548.u32);
+			}
 		}
 
-		/* Errata PCIE-29440: Atomic operations to work properly */
-		pciercx_cfg038.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
-					CVMX_PCIERCX_CFG038(pcie_port));
-		pciercx_cfg038.s.atom_op_eb = 0;
-		pciercx_cfg038.s.atom_op = 1;
-		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG038(pcie_port),
-					pciercx_cfg038.u32);
+		/* Determine if we've hit the timeout */
+		is_loop_done = (current_time >= timeout);
+		/* Determine if we've had a good link for the required hold time */
+		is_loop_done |= link_up && (good_time + hold_time <= current_time);
+	} while (!is_loop_done);
 
-		/* Errata PCIE-29566 PEM Link Hangs after going into L1 */
-		cfg548.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG548(pcie_port));
-		cfg548.s.grizdnc = 0;
-		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG548(pcie_port), cfg548.u32);
+
+	/* Trace the LTSSM state */
+#ifdef DEBUG_PCIE
+	cvmx_printf("N%d.PCIe%d: LTSSM History\n", node, pcie_port);
+#endif
+	for (i = 0; i < LTSSM_HISTORY_SIZE; i++) {
+		ltssm_history_loc = (ltssm_history_loc + 1) & (LTSSM_HISTORY_SIZE - 1);
+#ifdef DEBUG_PCIE
+		if (ltssm_history[ltssm_history_loc] != 0xff)
+			cvmx_printf("N%d.PCIe%d: %s\n", node, pcie_port,
+				     cvmx_pcie_get_ltssm_string(ltssm_history[ltssm_history_loc]));
+#endif
 	}
 
-	/* Store merge control (SLI_MEM_ACCESS_CTL[TIMER,MAX_WORD]) */
-	sli_mem_access_ctl.u64 = CVMX_READ_CSR(CVMX_PEXP_SLI_MEM_ACCESS_CTL);
-	sli_mem_access_ctl.s.max_word = 0;	/* Allow 16 words to combine */
-	sli_mem_access_ctl.s.timer = 127;	/* Wait up to 127 cycles for more data */
-	CVMX_WRITE_CSR(CVMX_PEXP_SLI_MEM_ACCESS_CTL, sli_mem_access_ctl.u64);
+	if (!link_up) {
+		ltssm_state = __cvmx_pcie_rc_get_ltssm_state(node, pcie_port);
+#ifdef DEBUG_PCIE
+		cvmx_printf ("N%d.PCIe%d: Link down, Data link layer %s(DLLA=%d), Link training %s(LT=%d), LTSSM %s\n",
+				node, pcie_port,
+				pciercx_cfg032.s.dlla ? "active" : "down", pciercx_cfg032.s.dlla,
+				pciercx_cfg032.s.lt ? "active" : "complete", pciercx_cfg032.s.lt,
+				cvmx_pcie_get_ltssm_string(ltssm_state));
+#endif
+		return 1; /* Link down, signal a retry */
+	}
 
-	/* Setup Mem access SubDIDs */
-	mem_access_subid.u64 = 0;
-	mem_access_subid.s.port = pcie_port;	/* Port the request is sent to. */
-	mem_access_subid.s.nmerge = 0;	/* Allow merging as it works on CN6XXX. */
-	mem_access_subid.s.esr = _CVMX_PCIE_ES;	/* Endian-swap for Reads. */
-	mem_access_subid.s.esw = _CVMX_PCIE_ES;	/* Endian-swap for Writes. */
-	mem_access_subid.s.wtype = 0;	/* "No snoop" and "Relaxed ordering" are not set */
-	mem_access_subid.s.rtype = 0;	/* "No snoop" and "Relaxed ordering" are not set */
-	/* PCIe Adddress Bits <63:34>. */
-	if (OCTEON_IS_MODEL(OCTEON_CN68XX))
-		mem_access_subid.cn68xx.ba = 0;
-	else
-		mem_access_subid.cn63xx.ba = 0;
+	/* Report the negotiated link speed and width */
+	neg_gen = pciercx_cfg032.s.ls; /* Current speed of PEM (1-3) */
+	neg_width = pciercx_cfg032.s.nlw; /* Current lane width of PEM (1-8) */
+#ifdef DEBUG_PCIE
+	cvmx_printf("N%d.PCIe%d: Link negotiated %d lanes, speed gen%d\n",
+		     node, pcie_port, neg_width, neg_gen);
+#endif
+	/* Determine PCIe bus number the directly attached device uses */
+	pciercx_cfg006.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG006(pcie_port));
+	bus = pciercx_cfg006.s.sbnum;
+
+	/* The SLI has to be initialized so we can read the downstream devices     */
+	dev_gen = 1; /* Device max speed (1-3) */
+	dev_width = 1; /* Device max lane width (1-16) */
+#ifdef DEBUG_PCIE
+	cvmx_printf("N%d.PCIe%d: Reading Bus %d device max speed and width\n",
+		    node, pcie_port, bus);
+#endif
 
-	/* Setup mem access 12-15 for port 0, 16-19 for port 1, supplying 36
-	 * bits of address space
+	/* Read PCI capability pointer at offset 0x34 of target */
+	cap = cvmx_pcie_config_read32_retry(node, pcie_port, bus, 0, 0, 0x34);
+
+	/* Check if we were able to read capabilities pointer */
+	if (cap == 0xffffffff)
+		return 1; /* Signal retry needed */
+
+	/* Read device max speed and width */
+	cap_next = cap & 0xff;
+	while (cap_next) {
+		cap = cvmx_pcie_config_read32_retry(node, pcie_port, bus, 0, 0, cap_next);
+		if (cap == 0xffffffff)
+			return 1; /* Signal retry needed */
+
+		/* Is this a PCIe capability (0x10)? */
+		if ((cap & 0xff) == 0x10) {
+#ifdef DEBUG_PCIE
+			cvmx_printf("N%d.PCIe%d: Found PCIe capability at offset 0x%x\n",
+				     node, pcie_port, cap_next);
+#endif
+			/* Offset 0xc contains the max link info */
+			cap = cvmx_pcie_config_read32_retry(node, pcie_port, bus, 0, 0, cap_next + 0xc);
+			if (cap == 0xffffffff)
+				return 1; /* Signal retry needed */
+			dev_gen = cap & 0xf; /* Max speed of PEM from config (1-3) */
+			dev_width = (cap >> 4) & 0x3f; /* Max lane width of PEM (1-16) */
+#ifdef DEBUG_PCIE
+			cvmx_printf("N%d.PCIe%d: Device supports %d lanes, speed gen%d\n",
+				     node, pcie_port, dev_width, dev_gen);
+#endif
+			break;
+		}
+		/* Move to next capability */
+		cap_next = (cap >> 8) & 0xff;
+	}
+
+	/* Desired link speed and width is either limited by the device or our PEM
+	   configuration. Choose the most restrictive limit */
+	desired_gen = (dev_gen < max_gen) ? dev_gen : max_gen;
+	desired_width = (dev_width < max_width) ? dev_width : max_width;
+
+	/* We need a change if we don't match the desired speed or width. Note that
+	   we allow better than expected in case the device lied about its
+	   capabilities */
+	need_speed_change = (neg_gen < desired_gen);
+	need_lane_change = (neg_width < desired_width);
+
+	if (need_lane_change) {
+		/* We didn't get the maximum number of lanes */
+#ifdef DEBUG_PCIE
+		cvmx_printf("N%d.PCIe%d: Link width (%d) less that supported (%d)\n",
+			     node, pcie_port, neg_width, desired_width);
+#endif
+		return 2; /* Link wrong width, signal a retry */
+	} else if (need_speed_change) {
+		if (do_retry_speed) {
+#ifdef DEBUG_PCIE
+			cvmx_printf("N%d.PCIe%d: Link speed (gen%d) less that supported (gen%d)\n",
+				     node, pcie_port, neg_gen, desired_gen);
+#endif
+			return 1; /* Link at width, but speed low. Request a retry */
+		} else {
+			/* We didn't get the maximum speed. Request a speed change */
+#ifdef DEBUG_PCIE
+			cvmx_printf("N%d.PCIe%d: Link speed (gen%d) less that supported (gen%d), requesting a speed change\n",
+				     node, pcie_port, neg_gen, desired_gen);
+#endif
+			pciercx_cfg515.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG515(pcie_port));
+			pciercx_cfg515.s.dsc = 1;
+			CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG515(pcie_port), pciercx_cfg515.u32);
+			cvmx_wait_usec(100000);
+			do_retry_speed = true;
+			goto retry_speed;
+		}
+	} else {
+#ifdef DEBUG_PCIE
+		cvmx_printf("N%d.PCIe%d: Link at best speed and width\n", node, pcie_port);
+#endif
+		/* For gen3 links check if we are getting errors over the link */
+		if (neg_gen == 3) {
+			/* Read RC Correctable Error Status Register */
+			pciercx_cfg068.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG068(pcie_port));
+			if (pciercx_cfg068.s.res) {
+#ifdef DEBUG_PCIE
+				cvmx_printf("N%d.PCIe%d: Link reporting error status\n", node, pcie_port);
+#endif
+				return 1; /* Getting receiver errors, request a retry */
+			}
+		}
+		return 0; /* Link at correct speed and width */
+	}
+
+	/* Update the Replay Time Limit.  Empirically, some PCIe devices take a
+	 * little longer to respond than expected under load. As a workaround
+	 * for this we configure the Replay Time Limit to the value expected
+	 * for a 512 byte MPS instead of our actual 256 byte MPS. The numbers
+	 * below are directly from the PCIe spec table 3-4
 	 */
-	for (i = 12 + pcie_port * 4; i < 16 + pcie_port * 4; i++) {
-		CVMX_WRITE_CSR(CVMX_PEXP_SLI_MEM_ACCESS_SUBIDX(i),
-			       mem_access_subid.u64);
-		/* Set each SUBID to extend the addressable range */
-		__cvmx_increment_ba(&mem_access_subid);
+	pciercx_cfg448.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+						 CVMX_PCIERCX_CFG448(pcie_port));
+	switch (pciercx_cfg032.s.nlw) {
+	case 1:		/* 1 lane */
+		pciercx_cfg448.s.rtl = 1677;
+		break;
+	case 2:		/* 2 lanes */
+		pciercx_cfg448.s.rtl = 867;
+		break;
+	case 4:		/* 4 lanes */
+		pciercx_cfg448.s.rtl = 462;
+		break;
+	case 8:		/* 8 lanes */
+		pciercx_cfg448.s.rtl = 258;
+		break;
 	}
+	CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG448(pcie_port),
+			     pciercx_cfg448.u32);
 
-	if (OCTEON_IS_MODEL(OCTEON_CN63XX) ||
-	    OCTEON_IS_MODEL(OCTEON_CN66XX) ||
-	    OCTEON_IS_MODEL(OCTEON_CN68XX) ||
-	    (OCTEON_IS_OCTEON3() && !OCTEON_IS_MODEL(OCTEON_CN70XX))) {
-		/* Disable the peer to peer forwarding register. This must be
-		 * setup by the OS after it enumerates the bus and assigns
-		 * addresses to the PCIe busses
-		 */
-		for (i = 0; i < 4; i++) {
-			CVMX_WRITE_CSR(CVMX_PEMX_P2P_BARX_START(i, pcie_port), -1);
-			CVMX_WRITE_CSR(CVMX_PEMX_P2P_BARX_END(i, pcie_port), -1);
+	return 0;
+}
+
+static int __cvmx_pcie_rc_initialize_gen2_v3(int pcie_port)
+{
+	cvmx_rst_ctlx_t rst_ctl;
+	cvmx_rst_soft_prstx_t rst_soft_prst;
+	cvmx_pciercx_cfg031_t pciercx_cfg031;
+	cvmx_pciercx_cfg032_t pciercx_cfg032;
+	cvmx_pciercx_cfg038_t pciercx_cfg038;
+	cvmx_pciercx_cfg040_t pciercx_cfg040;
+	cvmx_pciercx_cfg515_t pciercx_cfg515;
+	cvmx_pciercx_cfg548_t pciercx_cfg548;
+	cvmx_pemx_bist_status_t pemx_bist_status;
+	uint64_t rst_soft_prst_reg;
+	int qlm;
+	int node = (pcie_port >> 4) & 0x3;
+	bool requires_pem_reset = 0;
+	enum cvmx_qlm_mode mode = CVMX_QLM_MODE_DISABLED;
+	int retry_count = 0;
+	int result = 0;
+
+	pcie_port &= 0x3;
+
+	/* Assume link down until proven up */
+	pcie_link_initialized[node][pcie_port] = false;
+
+	/* Attempt link initialization up to 3 times */
+	while (retry_count <= MAX_RETRIES) {
+
+#ifdef DEBUG_PCIE
+		if (retry_count)
+			cvmx_printf("N%d:PCIE%d: Starting link retry %d\n", node, pcie_port, retry_count);
+#endif
+		if (pcie_port >= CVMX_PCIE_PORTS) {
+#ifdef DEBUG_PCIE
+                	cvmx_printf("Invalid PCIe%d port\n", pcie_port);
+#endif
+			return -1;
 		}
-	}
 
-	/* Set Octeon's BAR0 to decode 0-16KB. It overlaps with Bar2 */
-	CVMX_WRITE_CSR(CVMX_PEMX_P2N_BAR0_START(pcie_port), 0);
+		qlm = __cvmx_pcie_get_qlm(node, pcie_port);
 
-	/* Set Octeon's BAR2 to decode 0-2^41. Bar0 and Bar1 take precedence
-	 * where they overlap. It also overlaps with the device addresses, so
-	 * make sure the peer to peer forwarding is set right
-	 */
-	CVMX_WRITE_CSR(CVMX_PEMX_P2N_BAR2_START(pcie_port), 0);
+		if (qlm < 0)
+			return -1;
 
-	/* Setup BAR2 attributes */
-	/* Relaxed Ordering (NPEI_CTL_PORTn[PTLP_RO,CTLP_RO, WAIT_COM]) */
-	/* \AD PTLP_RO,CTLP_RO should normally be set (except for debug). */
-	/* \AD WAIT_COM=0 will likely work for all applications. */
-	/* Load completion relaxed ordering (NPEI_CTL_PORTn[WAITL_COM]) */
-	pemx_bar_ctl.u64 = CVMX_READ_CSR(CVMX_PEMX_BAR_CTL(pcie_port));
-	pemx_bar_ctl.s.bar1_siz = 3;	/* 256MB BAR1 */
-	pemx_bar_ctl.s.bar2_enb = 1;
-	pemx_bar_ctl.s.bar2_esx = _CVMX_PCIE_ES;
-	pemx_bar_ctl.s.bar2_cax = 0;
-	CVMX_WRITE_CSR(CVMX_PEMX_BAR_CTL(pcie_port), pemx_bar_ctl.u64);
-	sli_ctl_portx.u64 = CVMX_READ_CSR(CVMX_PEXP_SLI_CTL_PORTX(pcie_port));
-	sli_ctl_portx.s.ptlp_ro = 1;
-	sli_ctl_portx.s.ctlp_ro = 1;
-	sli_ctl_portx.s.wait_com = 0;
-	sli_ctl_portx.s.waitl_com = 0;
-	CVMX_WRITE_CSR(CVMX_PEXP_SLI_CTL_PORTX(pcie_port), sli_ctl_portx.u64);
+		mode = cvmx_qlm_get_mode(qlm);
+		if (__cvmx_pcie_check_pcie_port(node, pcie_port, mode))
+			return -1;
 
-	/* BAR1 follows BAR2 */
-	CVMX_WRITE_CSR(CVMX_PEMX_P2N_BAR1_START(pcie_port),
-		       CVMX_PCIE_BAR1_RC_BASE);
+		rst_soft_prst_reg = CVMX_RST_SOFT_PRSTX(pcie_port);
+		rst_ctl.u64 = CVMX_READ_CSR(CVMX_RST_CTLX(pcie_port));
 
-	bar1_index.u64 = 0;
-	bar1_index.s.addr_idx = (CVMX_PCIE_BAR1_PHYS_BASE >> 22);
-	bar1_index.s.ca = 1;	/* Not Cached */
-	bar1_index.s.end_swp = _CVMX_PCIE_ES;	/* Endian Swap mode */
-	bar1_index.s.addr_v = 1;	/* Valid entry */
+		if (OCTEON_IS_MODEL(OCTEON_CN78XX)) {
+			CVMX_WRITE_CSR(CVMX_DTX_PEMX_SELX(0, pcie_port), 0x17);
+			CVMX_WRITE_CSR(CVMX_DTX_PEMX_SELX(1, pcie_port), 0);
+		}
 
-	for (i = 0; i < 16; i++) {
-		CVMX_WRITE_CSR(CVMX_PEMX_BAR1_INDEXX(i, pcie_port),
-			       bar1_index.u64);
-		/* 256MB / 16 >> 22 == 4 */
-		bar1_index.s.addr_idx += (((1ull << 28) / 16ull) >> 22);
-	}
+		if (!rst_ctl.s.host_mode) {
+			cvmx_printf("N%d:PCIE: Port %d in endpoint mode.\n", node, pcie_port);
+			return -1;
+		}
 
-	/* Wait for 200ms */
-	pemx_ctl_status.u64 = CVMX_READ_CSR(CVMX_PEMX_CTL_STATUS(pcie_port));
-	pemx_ctl_status.cn63xx.cfg_rtry = cfg_retries();
-	CVMX_WRITE_CSR(CVMX_PEMX_CTL_STATUS(pcie_port), pemx_ctl_status.u64);
+		/* Bring the PCIe out of reset */
+		rst_soft_prst.u64 = CVMX_READ_CSR(rst_soft_prst_reg);
+		/* After a chip reset the PCIe will also be in reset. If it
+	 	* isn't, most likely someone is trying to init it again
+	 	* without a proper PCIe reset.
+	 	*/
+		if (rst_soft_prst.s.soft_prst == 0) {
+			/* Disable the MAC controller before resetting */
+			__cvmx_pcie_config_pemon(node, pcie_port, 0);
 
-	/* Here is the second part of the config retry changes. Wait for 700ms
-	   after setting up the link before continuing. PCIe says the devices
-	   may need up to 900ms to come up. 700ms plus 200ms from above gives 
-	   us a total of 900ms */
-	cvmx_wait_usec(700000);
+			/* Reset the port */
+			rst_soft_prst.s.soft_prst = 1;
+			CVMX_WRITE_CSR(rst_soft_prst_reg, rst_soft_prst.u64);
+
+			/* Read to make sure write happens */
+			rst_soft_prst.u64 = CVMX_READ_CSR(rst_soft_prst_reg);
+
+			/* Keep PERST asserted for 2 ms */
+			cvmx_wait_usec(2000);
+
+			/* Reset GSER_PHY to put in a clean state */
+			__cvmx_pcie_gser_phy_config(node, pcie_port, qlm);
+			requires_pem_reset = 1;
+
+			/* Enable MAC controller before taking pcie out of reset */
+			__cvmx_pcie_config_pemon(node, pcie_port, 1);
+		}
+
+		/* Deassert PERST */
+		rst_soft_prst.u64 = CVMX_READ_CSR(rst_soft_prst_reg);
+		rst_soft_prst.s.soft_prst = 0;
+		CVMX_WRITE_CSR(rst_soft_prst_reg, rst_soft_prst.u64);
+		rst_soft_prst.u64 = CVMX_READ_CSR(rst_soft_prst_reg);
+
+		/* Check if PLLs are locked after GSER_PHY reset. */
+		if (requires_pem_reset) {
+			cvmx_pemx_cfg_t pemx_cfg;
+			pemx_cfg.u64 = cvmx_read_csr(CVMX_PEMX_CFG(pcie_port));
+			if (CVMX_WAIT_FOR_FIELD64(CVMX_GSERX_QLM_STAT(qlm),
+					cvmx_gserx_qlm_stat_t, rst_rdy, ==, 1, 10000)) {
+				cvmx_warn("QLM%d: Timeout waiting for GSERX_QLM_STAT[rst_rdy]\n", qlm);
+				return -1;
+			}
+			if (pemx_cfg.cn78xx.lanes8
+		    		&& (CVMX_WAIT_FOR_FIELD64(CVMX_GSERX_QLM_STAT(qlm + 1),
+					      cvmx_gserx_qlm_stat_t, rst_rdy, ==, 1, 10000))) {
+				cvmx_warn("QLM%d: Timeout waiting for GSERX_QLM_STAT[rst_rdy]\n", qlm+1);
+				return -1;
+			}
+		}
+
+		/* Wait 1ms for PCIe reset to complete */
+		cvmx_wait_usec(1000);
+
+		/* Check and make sure PCIe came out of reset. If it doesn't the board
+		   probably hasn't wired the clocks up and the interface should be
+		   skipped */
+		if (CVMX_WAIT_FOR_FIELD64_NODE(node, CVMX_RST_CTLX(pcie_port),
+				  cvmx_rst_ctlx_t,
+				  rst_done, ==, 1, 10000)) {
+			cvmx_printf("N%d:PCIE: Port %d stuck in reset, skipping.\n",
+				     node, pcie_port);
+			return -1;
+		}
+
+		/* Check BIST status */
+		pemx_bist_status.u64 = CVMX_READ_CSR(CVMX_PEMX_BIST_STATUS(pcie_port));
+		if (pemx_bist_status.u64)
+			cvmx_printf("N%d:PCIE: BIST FAILED for port %d (0x%016llx)\n",
+				     node, pcie_port, CAST64(pemx_bist_status.u64));
+
+		/* Initialize the config space CSRs */
+#ifdef DEBUG_PCIE
+		cvmx_printf("N%d:PCIE%d Initialize Config Space\n", node, pcie_port);
+#endif
+		__cvmx_pcie_rc_initialize_config_space(node, pcie_port);
+
+		/* Enable gen2 speed selection */
+		pciercx_cfg515.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+						 CVMX_PCIERCX_CFG515(pcie_port));
+		pciercx_cfg515.s.dsc = 1;
+		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG515(pcie_port),
+			     	pciercx_cfg515.u32);
+
+		/* Do the link retries on the PCIe interface */
+		if (retry_count == MAX_RETRIES) {
+			/* This has to be done AFTER the QLM/PHY interface initialized */
+			pciercx_cfg031.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+								 CVMX_PCIERCX_CFG031(pcie_port));
+			/* Drop speed to gen2 if link bouncing
+			   Result = -1  PEM in reset
+			   Result = 0:  link speed and width ok no retry needed
+			   Result = 1:  link errors or speed change needed
+			   Result = 2:  lane width error
+			*/
+			if ((pciercx_cfg031.s.mls == 3) && (result != 2)) {
+#ifdef DEBUG_PCIE
+				cvmx_printf("N%d:PCIE%d: Dropping speed to gen2\n",
+					     node, pcie_port);
+#endif
+				pciercx_cfg031.s.mls = 2;
+				CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG031(pcie_port),
+						     pciercx_cfg031.u32);
+
+				/* Set the target link speed */
+				pciercx_cfg040.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+								 CVMX_PCIERCX_CFG040(pcie_port));
+				pciercx_cfg040.s.tls = 2;
+				CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG040(pcie_port),
+						     pciercx_cfg040.u32);
+			}
+
+		}
+
+		/* Bring the link up */
+		result = __cvmx_pcie_rc_initialize_link_gen2_v3(node, pcie_port);
+		if (result == 0) {
+#ifdef DEBUG_PCIE
+			cvmx_printf("N%d:PCIE%d: Link does not need a retry\n",
+				    node, pcie_port);
+#endif
+			break;
+		} else if (result > 0) {
+			if (retry_count >= MAX_RETRIES) {
+				int link_up;
+#ifdef DEBUG_PCIE
+				cvmx_printf("N%d:PCIE%d: Link requested a retry, but hit the max retries\n",
+					     node, pcie_port);
+#endif
+				/* If the link is down, report failure */
+				pciercx_cfg032.u32 = CVMX_PCIE_CFGX_READ(pcie_port, CVMX_PCIERCX_CFG032(pcie_port));
+				link_up = (pciercx_cfg032.s.dlla && !pciercx_cfg032.s.lt);
+				if (!link_up)
+					result = -1;
+			}
+#ifdef DEBUG_PCIE
+			else
+				cvmx_printf("N%d.PCIE%d: Link requested a retry\n", node, pcie_port);
+#endif
+		}
+		if (result < 0) {
+			int ltssm_state = __cvmx_pcie_rc_get_ltssm_state(node, pcie_port);
+			cvmx_printf("N%d:PCIE%d: Link timeout, probably the slot is empty (LTSSM %s)\n",
+				      node, pcie_port, cvmx_pcie_get_ltssm_string(ltssm_state));
+			return -1;
+		}
+		retry_count++;
+	}
+
+	pciercx_cfg032.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+						 CVMX_PCIERCX_CFG032(pcie_port));
+	/* Errata PEM-28816: Link retrain initiated at GEN1 can cause PCIE
+	   link to hang. For Gen1 links we must disable equalization */
+	if (pciercx_cfg032.s.ls == 1) {
+#ifdef DEBUG_PCIE
+			cvmx_printf("N%d:PCIE%d: Disabling equalization for GEN1 Link\n",
+				     node, pcie_port);
+#endif
+		pciercx_cfg548.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+						 CVMX_PCIERCX_CFG548(pcie_port));
+		pciercx_cfg548.s.ed = 1;
+		CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG548(pcie_port),
+				     pciercx_cfg548.u32);
+	}
+
+	/* Errata PCIE-29440: Atomic operations to work properly */
+	pciercx_cfg038.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+						 CVMX_PCIERCX_CFG038(pcie_port));
+	pciercx_cfg038.s.atom_op_eb = 0;
+	pciercx_cfg038.s.atom_op = 1;
+	CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG038(pcie_port),
+			     pciercx_cfg038.u32);
+
+	/* Errata PCIE-29566 PEM Link Hangs after going into L1 */
+	pciercx_cfg548.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
+					 CVMX_PCIERCX_CFG548(pcie_port));
+	pciercx_cfg548.s.grizdnc = 0;
+	CVMX_PCIE_CFGX_WRITE(pcie_port, CVMX_PCIERCX_CFG548(pcie_port),
+			     pciercx_cfg548.u32);
+
+	if (result < 0)
+		return result;
 
 	/* Display the link status */
 	pciercx_cfg032.u32 = CVMX_PCIE_CFGX_READ(pcie_port,
 						 CVMX_PCIERCX_CFG032(pcie_port));
-	cvmx_printf("PCIe: Port %d link active, %d lanes, speed gen%d \n",
-		    pcie_port, pciercx_cfg032.s.nlw, pciercx_cfg032.s.ls);
+	cvmx_printf("N%d:PCIe: Port %d link active, %d lanes, speed gen%d \n",
+		    node, pcie_port, pciercx_cfg032.s.nlw, pciercx_cfg032.s.ls);
 
 	pcie_link_initialized[node][pcie_port] = true;
 	return 0;
@@ -2064,8 +2481,10 @@ int cvmx_pcie_rc_initialize(int pcie_port)
 	int result;
 	if (octeon_has_feature(OCTEON_FEATURE_NPEI))
 		result = __cvmx_pcie_rc_initialize_gen1(pcie_port);
-	else
+	else if (OCTEON_IS_OCTEON2() || OCTEON_IS_MODEL(OCTEON_CN70XX))
 		result = __cvmx_pcie_rc_initialize_gen2(pcie_port);
+	else
+		result = __cvmx_pcie_rc_initialize_gen2_v3(pcie_port);
 
 #if !defined(CVMX_BUILD_FOR_LINUX_KERNEL) || defined(CONFIG_CAVIUM_DECODE_RSL)
 	if (result == 0)
@@ -2212,6 +2631,23 @@ uint16_t cvmx_pcie_config_read16(int pcie_port, int bus, int dev,
 		return 0xffff;
 }
 
+static uint32_t __cvmx_pcie_config_read32(int node, int pcie_port, int bus,
+	 int dev, int func, int reg, int lst)
+{
+	uint64_t address;
+	address = __cvmx_pcie_build_config_addr(node, pcie_port, bus, dev,
+							 func, reg);
+	if (lst) {
+		if (address && pcie_link_initialized[node][pcie_port])
+			return cvmx_le32_to_cpu(cvmx_read64_uint32(address));
+		else
+			return 0xffffffff;
+	} else if (address)
+			return cvmx_le32_to_cpu(cvmx_read64_uint32(address));
+	else
+		return 0xffffffff;
+}
+
 /**
  * Read 32bits from a Device's config space
  *
@@ -2226,15 +2662,10 @@ uint16_t cvmx_pcie_config_read16(int pcie_port, int bus, int dev,
 uint32_t cvmx_pcie_config_read32(int pcie_port, int bus, int dev,
 				 int fn, int reg)
 {
-	uint64_t address;
 	int node = (pcie_port >> 4) & 0x3;
 	pcie_port &= 0x3;
-	address = __cvmx_pcie_build_config_addr(node, pcie_port, bus, dev,
-							 fn, reg);
-	if (address && pcie_link_initialized[node][pcie_port])
-		return cvmx_le32_to_cpu(cvmx_read64_uint32(address));
-	else
-		return 0xffffffff;
+	return __cvmx_pcie_config_read32(node, pcie_port, bus, dev, fn, reg,
+					 pcie_link_initialized[node][pcie_port]);
 }
 
 /**
diff --git a/arch/mips/cavium-octeon/executive/cvmx-twsi.c b/arch/mips/cavium-octeon/executive/cvmx-twsi.c
index cfbc568c23f9..3d3bb0295ec9 100644
--- a/arch/mips/cavium-octeon/executive/cvmx-twsi.c
+++ b/arch/mips/cavium-octeon/executive/cvmx-twsi.c
@@ -42,7 +42,7 @@
  *
  * Interface to the TWSI / I2C bus
  *
- * <hr>$Revision: 130009 $<hr>
+ * <hr>$Revision: 171527 $<hr>
  *
  */
 #ifdef CVMX_BUILD_FOR_LINUX_KERNEL
@@ -69,6 +69,10 @@
 #define cvmx_csr_db_decode(...)
 #endif /*PRINT_TWSI_CONFIG */
 
+static int cvmx_twsix_unblock(int twsi_id);
+static int cvmx_twsix_reset(int twsi_id);
+static int cvmx_twsix_stop(int twsi_id);
+
 #if 0
 static int node_bus_to_i2c_bus(int node, int bus)
 {
@@ -113,55 +117,6 @@ struct i2c_adapter *__cvmx_twsix_get_adapter(int twsi_id)
 EXPORT_SYMBOL(__cvmx_twsix_get_adapter);
 #endif
 
-#ifndef CVMX_BUILD_FOR_LINUX_KERNEL
-/**
- * Unblock the I2C bus.  This should be done during initialization and if the
- * I2C bus gets stuck due to a device resetting unexpectedly.
- */
-int cvmx_twsix_unblock(int twsi_id)
-{
-	cvmx_mio_tws_sw_twsi_t sw_twsi;
-	cvmx_mio_tws_int_t tws_int;
-	uint64_t old_sw_twsi;
-	int i;
-	int twsi_bus = __i2c_twsi_bus(twsi_id);
-
-	/* Put the bus in low-level mode */
-	old_sw_twsi = cvmx_read_csr_node(i2c_bus_to_node(twsi_id), 
-					 CVMX_MIO_TWSX_SW_TWSI(twsi_bus));
-	sw_twsi.u64 = 0;
-	sw_twsi.s.v = 1;
-	sw_twsi.s.op = 6;
-	sw_twsi.s.eop_ia = TWSI_CTL;
-	sw_twsi.s.d = 0x40;	/* ENAB !CE !AAK */
-	cvmx_write_csr_node(i2c_bus_to_node(twsi_id), 
-			    CVMX_MIO_TWSX_SW_TWSI(twsi_bus), sw_twsi.u64);
-	cvmx_wait_usec(10);
-	tws_int.u64 = cvmx_read_csr_node(i2c_bus_to_node(twsi_id), 
-					 CVMX_MIO_TWSX_INT(twsi_bus));
-	cvmx_wait_usec(10);
-	tws_int.s.scl_ovr = 0;
-	cvmx_write_csr_node(i2c_bus_to_node(twsi_id), 
-			    CVMX_MIO_TWSX_INT(twsi_bus), tws_int.u64);
-	cvmx_wait_usec(10);
-	for (i = 0; i < 9; i++) {
-		tws_int.s.scl_ovr = 1;
-		cvmx_write_csr_node(i2c_bus_to_node(twsi_id), 
-				    CVMX_MIO_TWSX_INT(twsi_bus), tws_int.u64);
-		cvmx_wait_usec(10);
-		tws_int.s.scl_ovr = 0;
-		cvmx_write_csr_node(i2c_bus_to_node(twsi_id), 
-				    CVMX_MIO_TWSX_INT(twsi_bus), tws_int.u64);
-		cvmx_wait_usec(10);
-	}
-	/* Restore back to high level mode */
-	cvmx_write_csr_node(i2c_bus_to_node(twsi_id), 
-			    CVMX_MIO_TWSX_SW_TWSI(twsi_bus), old_sw_twsi);
-	cvmx_wait_usec(10);
-	return 0;
-}
-#endif
-
 /**
  * Do a twsi read from a 7 bit device address using an (optional) internal address.
  * Up to 8 bytes can be read at a time.
@@ -794,37 +749,49 @@ static int cvmx_twsix_wait(int twsi_id)
 
 static int cvmx_twsix_start(int twsi_id)
 {
-	int ret_val;
-	uint8_t tmp;
-
-	cvmx_twsix_write_llc_reg(twsi_id, SW_TWSI_EOP_TWSI_CTL,
-				 TWSI_CTL_ENAB | TWSI_CTL_STA);
+	uint8_t stat;
+	static int8_t reset_method = 0;
 
-	ret_val = cvmx_twsix_wait(twsi_id);
-	if (ret_val) {
-		tmp = cvmx_twsix_read_llc_reg(twsi_id, SW_TWSI_EOP_TWSI_STAT);
-		if (tmp == STAT_IDLE) {
-			/*
-			 * Controller refused to send start flag May
-			 * be a client is holding SDA low - let's try
-			 * to free it.
-			 */
-			cvmx_twsix_unblock(twsi_id);
-			cvmx_twsix_write_llc_reg(twsi_id, SW_TWSI_EOP_TWSI_CTL,
-						 TWSI_CTL_ENAB | TWSI_CTL_STA);
+	do {
+		cvmx_twsix_write_llc_reg(twsi_id, SW_TWSI_EOP_TWSI_CTL,
+				 	TWSI_CTL_ENAB | TWSI_CTL_STA);
+
+		cvmx_twsix_wait(twsi_id);
+
+		stat = cvmx_twsix_read_llc_reg(twsi_id, SW_TWSI_EOP_TWSI_STAT);
+
+		switch (stat) {
+			case STAT_START:
+			case STAT_RSTART:
+				reset_method = 0;
+				return 0;
+
+			default:
+				cvmx_twsix_stop(twsi_id);		
+
+				switch (reset_method++ %4) {
+					case 0:
+						break;
+					case 1:
+						/*
+						 * Controller refused to send start flag May
+						 * be a client is holding SDA low - let's try
+						 * to free it.
+						 */
+						cvmx_twsix_unblock(twsi_id);
+						break;
+					case 2:
+						cvmx_twsix_reset(twsi_id);
+						break;
+					default:
+						reset_method = 0;
+						return -1;
+				}
 
-			ret_val = cvmx_twsix_wait(twsi_id);
+				break;
 		}
-		if (ret_val)
-			return ret_val;
-	}
 
-	tmp = cvmx_twsix_read_llc_reg(twsi_id, SW_TWSI_EOP_TWSI_STAT);
-	if ((tmp != STAT_START) && (tmp != STAT_RSTART)) {
-		twsi_printf("%s %d: bad status (0x%x)\n", __func__, __LINE__,
-			    tmp);
-		return -1;
-	}
+	} while (true);
 
 	return 0;
 }
@@ -954,6 +921,92 @@ static int cvmx_twsix_read_seg(int twsi_id, uint8_t dev_addr, uint8_t *buf,
 	return 0;
 }
 
+/**
+ * Unblock the I2C bus.  This should be done during initialization and if the
+ * I2C bus gets stuck due to a device resetting unexpectedly.
+ */
+int cvmx_twsix_unblock(int twsi_id)
+{
+	cvmx_mio_tws_sw_twsi_t sw_twsi;
+	cvmx_mio_tws_int_t tws_int;
+	uint64_t old_sw_twsi;
+	int i;
+	int twsi_bus = __i2c_twsi_bus(twsi_id);
+
+	/* Put the bus in low-level mode */
+	old_sw_twsi = cvmx_read_csr_node(i2c_bus_to_node(twsi_id), 
+					 CVMX_MIO_TWSX_SW_TWSI(twsi_bus));
+	sw_twsi.u64 = 0;
+	sw_twsi.s.v = 1;
+	sw_twsi.s.op = 6;
+	sw_twsi.s.eop_ia = TWSI_CTL;
+	sw_twsi.s.d = 0x40;	/* ENAB !CE !AAK */
+	cvmx_write_csr_node(i2c_bus_to_node(twsi_id), 
+			    CVMX_MIO_TWSX_SW_TWSI(twsi_bus), sw_twsi.u64);
+	cvmx_wait_usec(10);
+	tws_int.u64 = cvmx_read_csr_node(i2c_bus_to_node(twsi_id), 
+					 CVMX_MIO_TWSX_INT(twsi_bus));
+	cvmx_wait_usec(10);
+	tws_int.s.scl_ovr = 0;
+	cvmx_write_csr_node(i2c_bus_to_node(twsi_id), 
+			    CVMX_MIO_TWSX_INT(twsi_bus), tws_int.u64);
+	cvmx_wait_usec(10);
+	for (i = 0; i < 9; i++) {
+		tws_int.s.scl_ovr = 1;
+		cvmx_write_csr_node(i2c_bus_to_node(twsi_id), 
+				    CVMX_MIO_TWSX_INT(twsi_bus), tws_int.u64);
+		cvmx_wait_usec(10);
+		tws_int.s.scl_ovr = 0;
+		cvmx_write_csr_node(i2c_bus_to_node(twsi_id), 
+				    CVMX_MIO_TWSX_INT(twsi_bus), tws_int.u64);
+		cvmx_wait_usec(10);
+	}
+	/* Restore back to high level mode */
+	cvmx_write_csr_node(i2c_bus_to_node(twsi_id), 
+			    CVMX_MIO_TWSX_SW_TWSI(twsi_bus), old_sw_twsi);
+	cvmx_wait_usec(10);
+	return 0;
+}
+
+/**
+ * Reset the I2C bus.  This should be done during initialization and if the
+ * I2C bus gets stuck due to a device resetting unexpectedly.
+ */
+int cvmx_twsix_reset(int twsi_id)
+{
+	cvmx_mio_tws_sw_twsi_t sw_twsi;
+	cvmx_mio_twsx_sw_twsi_t tmp;
+	int i;
+	uint8_t status = 0;
+	int twsi_bus = __i2c_twsi_bus(twsi_id);
+
+	sw_twsi.u64 = 0;
+	sw_twsi.s.v = 1;
+	sw_twsi.s.r = 0;
+	sw_twsi.s.op = 6;
+	sw_twsi.s.eop_ia = TWSI_RST;
+
+	cvmx_write_csr_node(i2c_bus_to_node(twsi_id), 
+			    CVMX_MIO_TWSX_SW_TWSI(twsi_bus), sw_twsi.u64);
+
+	do {
+		tmp.u64 = cvmx_read_csr_node(i2c_bus_to_node(twsi_id), 
+					     CVMX_MIO_TWSX_SW_TWSI(twsi_bus));
+	} while (tmp.s.v != 0);
+
+	cvmx_wait_io(315);
+
+	for (i = 10; i && status != STAT_IDLE; i--) {
+		status = cvmx_twsix_read_llc_reg(twsi_id, SW_TWSI_EOP_TWSI_STAT);
+		cvmx_wait_usec(1);
+	}
+
+	if (status != STAT_IDLE)
+		return 1;
+
+	return 0;
+}
+
 static int cvmx_twsix_stop(int twsi_id)
 {
 	uint8_t tmp;
diff --git a/arch/mips/include/asm/octeon/cvmx-ciu-defs.h b/arch/mips/include/asm/octeon/cvmx-ciu-defs.h
index 862a634bceaa..e1c5816740df 100644
--- a/arch/mips/include/asm/octeon/cvmx-ciu-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-ciu-defs.h
@@ -217,10 +217,10 @@ static inline uint64_t CVMX_CIU_DINT_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x0001070000000720ull);
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x0001010000000180ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x0001010000000180ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x0001010000000180ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001010000000180ull);
@@ -249,10 +249,10 @@ static inline uint64_t CVMX_CIU_DINT_FUNC(void)
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001070000000720ull);
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001010000000180ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001010000000180ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001010000000180ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001010000000180ull);
@@ -449,10 +449,10 @@ static inline uint64_t CVMX_CIU_FUSE_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x0001070000000728ull);
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00010100000001A0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00010100000001A0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00010100000001A0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00010100000001A0ull);
@@ -481,10 +481,10 @@ static inline uint64_t CVMX_CIU_FUSE_FUNC(void)
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001070000000728ull);
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00010100000001A0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00010100000001A0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00010100000001A0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00010100000001A0ull);
@@ -986,10 +986,10 @@ static inline uint64_t CVMX_CIU_PP_DBG_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x0001070000000708ull);
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x0001010000000120ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x0001010000000120ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x0001010000000120ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001010000000120ull);
@@ -1018,10 +1018,10 @@ static inline uint64_t CVMX_CIU_PP_DBG_FUNC(void)
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001070000000708ull);
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001010000000120ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001010000000120ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001010000000120ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001010000000120ull);
@@ -1067,10 +1067,10 @@ static inline uint64_t CVMX_CIU_PP_POKEX(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001070000000580ull) + ((offset) & 0) * 8;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 47))
 					return CVMX_ADD_IO_SEG(0x0001010000030000ull) + ((offset) & 63) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 47))
 					return CVMX_ADD_IO_SEG(0x0001010000030000ull) + ((offset) & 63) * 8;
 
@@ -1112,10 +1112,10 @@ static inline uint64_t CVMX_CIU_PP_POKEX(unsigned long offset)
 		case OCTEON_CN30XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001070000000580ull) + (offset) * 8;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001010000030000ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001010000030000ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001010000030000ull) + (offset) * 8;
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1147,10 +1147,10 @@ static inline uint64_t CVMX_CIU_PP_RST_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x0001070000000700ull);
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x0001010000000100ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x0001010000000100ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x0001010000000100ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001010000000100ull);
@@ -1179,10 +1179,10 @@ static inline uint64_t CVMX_CIU_PP_RST_FUNC(void)
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001070000000700ull);
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001010000000100ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001010000000100ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001010000000100ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001010000000100ull);
@@ -1197,10 +1197,10 @@ static inline uint64_t CVMX_CIU_PP_RST_PENDING_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x0001010000000110ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x0001010000000110ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x0001010000000110ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001010000000110ull);
 			break;
@@ -1218,10 +1218,10 @@ static inline uint64_t CVMX_CIU_PP_RST_PENDING_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001010000000110ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001010000000110ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001010000000110ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001010000000110ull);
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -1559,10 +1559,10 @@ static inline uint64_t CVMX_CIU_WDOGX(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001070000000500ull) + ((offset) & 0) * 8;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 47))
 					return CVMX_ADD_IO_SEG(0x0001010000020000ull) + ((offset) & 63) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 47))
 					return CVMX_ADD_IO_SEG(0x0001010000020000ull) + ((offset) & 63) * 8;
 
@@ -1604,10 +1604,10 @@ static inline uint64_t CVMX_CIU_WDOGX(unsigned long offset)
 		case OCTEON_CN30XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001070000000500ull) + (offset) * 8;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001010000020000ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001010000020000ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001010000020000ull) + (offset) * 8;
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
diff --git a/arch/mips/include/asm/octeon/cvmx-dpi-defs.h b/arch/mips/include/asm/octeon/cvmx-dpi-defs.h
index 94d0764c937a..57ecfae38571 100644
--- a/arch/mips/include/asm/octeon/cvmx-dpi-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-dpi-defs.h
@@ -297,10 +297,10 @@ static inline uint64_t CVMX_DPI_DMA_PPX_CNT(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001DF0000000C00ull) + ((offset) & 15) * 8;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 47))
 					return CVMX_ADD_IO_SEG(0x0001DF0000000C00ull) + ((offset) & 63) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 47))
 					return CVMX_ADD_IO_SEG(0x0001DF0000000C00ull) + ((offset) & 63) * 8;
 
@@ -323,10 +323,10 @@ static inline uint64_t CVMX_DPI_DMA_PPX_CNT(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001DF0000000C00ull) + (offset) * 8;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001DF0000000C00ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001DF0000000C00ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001DF0000000C00ull) + (offset) * 8;
 
 	}
 	return CVMX_ADD_IO_SEG(0x0001DF0000000C00ull) + (offset) * 8;
@@ -564,10 +564,10 @@ static inline uint64_t CVMX_DPI_SLI_PRTX_ERR(unsigned long offset)
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001DF0000000920ull) + ((offset) & 3) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001DF0000000920ull) + ((offset) & 3) * 8;
 			if ((offset <= 3))
@@ -607,10 +607,10 @@ static inline uint64_t CVMX_DPI_SLI_PRTX_ERR(unsigned long offset)
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001DF0000000920ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001DF0000000920ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001DF0000000920ull) + (offset) * 8;
 			return CVMX_ADD_IO_SEG(0x0001DF0000000920ull) + (offset) * 8;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN61XX & OCTEON_FAMILY_MASK:
diff --git a/arch/mips/include/asm/octeon/cvmx-dtx-defs.h b/arch/mips/include/asm/octeon/cvmx-dtx-defs.h
index 2c040adb1d96..63882bf60ed3 100644
--- a/arch/mips/include/asm/octeon/cvmx-dtx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-dtx-defs.h
@@ -921,10 +921,10 @@ static inline uint64_t CVMX_DTX_FPA_BCST_RSP_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011800FE940080ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011800FE940080ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011800FE940080ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FE940080ull);
 			break;
@@ -942,10 +942,10 @@ static inline uint64_t CVMX_DTX_FPA_BCST_RSP_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FE940080ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FE940080ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FE940080ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FE940080ull);
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -961,10 +961,10 @@ static inline uint64_t CVMX_DTX_FPA_CTL_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011800FE940060ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011800FE940060ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011800FE940060ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FE940060ull);
 			break;
@@ -982,10 +982,10 @@ static inline uint64_t CVMX_DTX_FPA_CTL_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FE940060ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FE940060ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FE940060ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FE940060ull);
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -1000,10 +1000,10 @@ static inline uint64_t CVMX_DTX_FPA_DATX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE940040ull) + ((offset) & 1) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE940040ull) + ((offset) & 1) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1024,10 +1024,10 @@ static inline uint64_t CVMX_DTX_FPA_DATX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FE940040ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FE940040ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FE940040ull) + (offset) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FE940040ull) + (offset) * 8;
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -1042,10 +1042,10 @@ static inline uint64_t CVMX_DTX_FPA_ENAX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE940020ull) + ((offset) & 1) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE940020ull) + ((offset) & 1) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1066,10 +1066,10 @@ static inline uint64_t CVMX_DTX_FPA_ENAX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FE940020ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FE940020ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FE940020ull) + (offset) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FE940020ull) + (offset) * 8;
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -1084,10 +1084,10 @@ static inline uint64_t CVMX_DTX_FPA_SELX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE940000ull) + ((offset) & 1) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE940000ull) + ((offset) & 1) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1108,10 +1108,10 @@ static inline uint64_t CVMX_DTX_FPA_SELX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FE940000ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FE940000ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FE940000ull) + (offset) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FE940000ull) + (offset) * 8;
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -2570,10 +2570,10 @@ static inline uint64_t CVMX_DTX_OSM_BCST_RSP_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011800FE6E0080ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011800FE6E0080ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011800FE6E0080ull);
 
 			break;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2589,10 +2589,10 @@ static inline uint64_t CVMX_DTX_OSM_BCST_RSP_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FE6E0080ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FE6E0080ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FE6E0080ull);
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEEE0080ull);
@@ -2606,10 +2606,10 @@ static inline uint64_t CVMX_DTX_OSM_CTL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011800FE6E0060ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011800FE6E0060ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011800FE6E0060ull);
 
 			break;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2625,10 +2625,10 @@ static inline uint64_t CVMX_DTX_OSM_CTL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FE6E0060ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FE6E0060ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FE6E0060ull);
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEEE0060ull);
@@ -2641,10 +2641,10 @@ static inline uint64_t CVMX_DTX_OSM_DATX(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE6E0040ull) + ((offset) & 1) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE6E0040ull) + ((offset) & 1) * 8;
 
@@ -2662,10 +2662,10 @@ static inline uint64_t CVMX_DTX_OSM_DATX(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FE6E0040ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FE6E0040ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FE6E0040ull) + (offset) * 8;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEEE0040ull) + (offset) * 8;
@@ -2678,10 +2678,10 @@ static inline uint64_t CVMX_DTX_OSM_ENAX(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE6E0020ull) + ((offset) & 1) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE6E0020ull) + ((offset) & 1) * 8;
 
@@ -2699,10 +2699,10 @@ static inline uint64_t CVMX_DTX_OSM_ENAX(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FE6E0020ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FE6E0020ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FE6E0020ull) + (offset) * 8;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEEE0020ull) + (offset) * 8;
@@ -2715,10 +2715,10 @@ static inline uint64_t CVMX_DTX_OSM_SELX(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE6E0000ull) + ((offset) & 1) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FE6E0000ull) + ((offset) & 1) * 8;
 
@@ -2736,10 +2736,10 @@ static inline uint64_t CVMX_DTX_OSM_SELX(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FE6E0000ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FE6E0000ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FE6E0000ull) + (offset) * 8;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEEE0000ull) + (offset) * 8;
@@ -3131,10 +3131,10 @@ static inline uint64_t CVMX_DTX_PKO_BCST_RSP_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011800FEAA0080ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011800FEAA0080ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011800FEAA0080ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEAA0080ull);
 			break;
@@ -3152,10 +3152,10 @@ static inline uint64_t CVMX_DTX_PKO_BCST_RSP_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FEAA0080ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FEAA0080ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FEAA0080ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEAA0080ull);
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -3171,10 +3171,10 @@ static inline uint64_t CVMX_DTX_PKO_CTL_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011800FEAA0060ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011800FEAA0060ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011800FEAA0060ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEAA0060ull);
 			break;
@@ -3192,10 +3192,10 @@ static inline uint64_t CVMX_DTX_PKO_CTL_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FEAA0060ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FEAA0060ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FEAA0060ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEAA0060ull);
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -3210,10 +3210,10 @@ static inline uint64_t CVMX_DTX_PKO_DATX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FEAA0040ull) + ((offset) & 1) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FEAA0040ull) + ((offset) & 1) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3234,10 +3234,10 @@ static inline uint64_t CVMX_DTX_PKO_DATX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FEAA0040ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FEAA0040ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FEAA0040ull) + (offset) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEAA0040ull) + (offset) * 8;
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -3252,10 +3252,10 @@ static inline uint64_t CVMX_DTX_PKO_ENAX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FEAA0020ull) + ((offset) & 1) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FEAA0020ull) + ((offset) & 1) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3276,10 +3276,10 @@ static inline uint64_t CVMX_DTX_PKO_ENAX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FEAA0020ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FEAA0020ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FEAA0020ull) + (offset) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEAA0020ull) + (offset) * 8;
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -3294,10 +3294,10 @@ static inline uint64_t CVMX_DTX_PKO_SELX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FEAA0000ull) + ((offset) & 1) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011800FEAA0000ull) + ((offset) & 1) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3318,10 +3318,10 @@ static inline uint64_t CVMX_DTX_PKO_SELX(unsigned long offset)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800FEAA0000ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800FEAA0000ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800FEAA0000ull) + (offset) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800FEAA0000ull) + (offset) * 8;
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
diff --git a/arch/mips/include/asm/octeon/cvmx-fpa-defs.h b/arch/mips/include/asm/octeon/cvmx-fpa-defs.h
index 61ff53742ff2..a35e4eedc274 100644
--- a/arch/mips/include/asm/octeon/cvmx-fpa-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-fpa-defs.h
@@ -66,10 +66,10 @@ static inline uint64_t CVMX_FPA_ADDR_RANGE_ERROR_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x0001280000000458ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x0001280000000458ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x0001280000000458ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001280000000458ull);
 			break;
@@ -90,10 +90,10 @@ static inline uint64_t CVMX_FPA_ADDR_RANGE_ERROR_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x0001180028000458ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001280000000458ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001280000000458ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001280000000458ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001280000000458ull);
 	}
@@ -247,10 +247,10 @@ static inline uint64_t CVMX_FPA_BIST_STATUS_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011800280000E8ull);
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00012800000000E8ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00012800000000E8ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00012800000000E8ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00012800000000E8ull);
@@ -279,10 +279,10 @@ static inline uint64_t CVMX_FPA_BIST_STATUS_FUNC(void)
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800280000E8ull);
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00012800000000E8ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00012800000000E8ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00012800000000E8ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00012800000000E8ull);
@@ -497,10 +497,10 @@ static inline uint64_t CVMX_FPA_POOLX_END_ADDR(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001280010600000ull) + ((offset) & 31) * 8;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x0001280010600000ull) + ((offset) & 63) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x0001280010600000ull) + ((offset) & 63) * 8;
 
@@ -524,10 +524,10 @@ static inline uint64_t CVMX_FPA_POOLX_END_ADDR(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001280010600000ull) + (offset) * 8;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001280010600000ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001280010600000ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001280010600000ull) + (offset) * 8;
 
 	}
 	return CVMX_ADD_IO_SEG(0x0001280010600000ull) + (offset) * 8;
@@ -638,10 +638,10 @@ static inline uint64_t CVMX_FPA_POOLX_START_ADDR(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001280010500000ull) + ((offset) & 31) * 8;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x0001280010500000ull) + ((offset) & 63) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x0001280010500000ull) + ((offset) & 63) * 8;
 
@@ -665,10 +665,10 @@ static inline uint64_t CVMX_FPA_POOLX_START_ADDR(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001280010500000ull) + (offset) * 8;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001280010500000ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001280010500000ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001280010500000ull) + (offset) * 8;
 
 	}
 	return CVMX_ADD_IO_SEG(0x0001280010500000ull) + (offset) * 8;
@@ -696,10 +696,10 @@ static inline uint64_t CVMX_FPA_POOLX_THRESHOLD(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001280010400000ull) + ((offset) & 31) * 8;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x0001280010400000ull) + ((offset) & 63) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x0001280010400000ull) + ((offset) & 63) * 8;
 
@@ -724,10 +724,10 @@ static inline uint64_t CVMX_FPA_POOLX_THRESHOLD(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001280010400000ull) + (offset) * 8;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001280010400000ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001280010400000ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001280010400000ull) + (offset) * 8;
 
 	}
 	return CVMX_ADD_IO_SEG(0x0001280010400000ull) + (offset) * 8;
diff --git a/arch/mips/include/asm/octeon/cvmx-gpio-defs.h b/arch/mips/include/asm/octeon/cvmx-gpio-defs.h
index 66046a86f3b1..d49acb4140b0 100644
--- a/arch/mips/include/asm/octeon/cvmx-gpio-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-gpio-defs.h
@@ -73,10 +73,10 @@ static inline uint64_t CVMX_GPIO_BIT_CFGX(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001070000000800ull) + ((offset) & 15) * 8;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 19))
 					return CVMX_ADD_IO_SEG(0x0001070000000900ull) + ((offset) & 31) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 19))
 					return CVMX_ADD_IO_SEG(0x0001070000000900ull) + ((offset) & 31) * 8;
 
@@ -109,10 +109,10 @@ static inline uint64_t CVMX_GPIO_BIT_CFGX(unsigned long offset)
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001070000000800ull) + (offset) * 8;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001070000000900ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001070000000900ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001070000000900ull) + (offset) * 8;
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -350,10 +350,10 @@ static inline uint64_t CVMX_GPIO_USBH_CTL_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00010700000008A0ull);
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x0001070000000898ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x0001070000000898ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x0001070000000898ull);
 
 			break;
 	}
@@ -368,10 +368,10 @@ static inline uint64_t CVMX_GPIO_USBH_CTL_FUNC(void)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00010700000008A0ull);
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001070000000898ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001070000000898ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001070000000898ull);
 
 	}
 	return CVMX_ADD_IO_SEG(0x0001070000000898ull);
diff --git a/arch/mips/include/asm/octeon/cvmx-helper-board.h b/arch/mips/include/asm/octeon/cvmx-helper-board.h
index 5452a0e821e4..4d7172434285 100644
--- a/arch/mips/include/asm/octeon/cvmx-helper-board.h
+++ b/arch/mips/include/asm/octeon/cvmx-helper-board.h
@@ -43,7 +43,7 @@
  * Helper functions to abstract board specific data about
  * network ports from the rest of the cvmx-helper files.
  *
- * <hr>$Revision: 154327 $<hr>
+ * <hr>$Revision: 171527 $<hr>
  */
 #ifndef __CVMX_HELPER_BOARD_H__
 #define __CVMX_HELPER_BOARD_H__
@@ -199,6 +199,23 @@ struct cvmx_vsc7224 {
 	int	of_offset;	/** Offset in device tree */
 };
 
+/** Data structure for Avago AVSP5410 gearbox phy */
+struct cvmx_avsp5410 {
+	const char *name;			/** Name */
+	/** I2C bus device is connected to */
+	struct cvmx_fdt_i2c_bus_info	*i2c_bus;
+	/** Address of AVSP5410 on i2c bus */
+	int	i2c_addr;
+	int	of_offset;	/** Offset in device tree */
+	int	ipd_port;	/** IPD port this phy belongs to */
+	int	xiface;		/** xinterface of SFP */
+	int	index;		/** Port index of SFP */
+ 	uint64_t prev_temp;     /** Previous temparature recorded on Phy Core */
+	uint64_t prev_temp_mins; /** Mininutes when the prev temp check is done */
+	/** (Q)SFP attached to this phy */
+	struct cvmx_fdt_sfp_info *sfp_info;
+};
+
 struct cvmx_cs4343_info;
 
 /**
diff --git a/arch/mips/include/asm/octeon/cvmx-helper-cfg.h b/arch/mips/include/asm/octeon/cvmx-helper-cfg.h
index c79a7a41c535..19864ee37d44 100644
--- a/arch/mips/include/asm/octeon/cvmx-helper-cfg.h
+++ b/arch/mips/include/asm/octeon/cvmx-helper-cfg.h
@@ -157,6 +157,8 @@ struct cvmx_cfg_port_param {
 	int sfp_of_offset;
 	/** Microsemi VSC7224 channel info data structure */
 	struct cvmx_vsc7224_chan *vsc7224_chan;
+	/** Avago AVSP-5410 Phy */
+	struct cvmx_avsp5410 *avsp5410;
 };
 
 /*
@@ -766,6 +768,27 @@ struct cvmx_vsc7224_chan *cvmx_helper_cfg_get_vsc7224_chan_info(int xiface,
 void cvmx_helper_cfg_set_vsc7224_chan_info(int xiface, int index,
 				struct cvmx_vsc7224_chan *vsc7224_chan_info);
 
+/**
+ * Get data structure defining the Avago AVSP5410 phy info
+ * or NULL if not present
+ *
+ * @param xiface        node and interface
+ * @param index         port index
+ *
+ * @return pointer to avsp5410 data structure or NULL if not present
+ */
+struct cvmx_avsp5410 *cvmx_helper_cfg_get_avsp5410_info(int xiface, int index);
+
+/**
+ * Sets the Avago AVSP5410 phy info data structure
+ *
+ * @param       xiface  node and interface
+ * @param       index   port index
+ * @param[in]   avsp5410_info   Avago AVSP5410 data structure
+ */
+void cvmx_helper_cfg_set_avsp5410_info(int xiface, int index,
+                                struct cvmx_avsp5410 *avsp5410_info);
+
 /**
  * Gets the SFP data associated with a port
  *
diff --git a/arch/mips/include/asm/octeon/cvmx-l2c-defs.h b/arch/mips/include/asm/octeon/cvmx-l2c-defs.h
index 54a82c87e190..89b047e635fa 100644
--- a/arch/mips/include/asm/octeon/cvmx-l2c-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-l2c-defs.h
@@ -244,10 +244,10 @@ static inline uint64_t CVMX_L2C_CBCX_MIBERR(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if (((offset >= 2) && (offset <= 3)))
 					return CVMX_ADD_IO_SEG(0x0001180080E807E0ull) + ((offset) & 3) * 0x40000ull - 262144*2;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if (((offset >= 2) && (offset <= 3)))
 					return CVMX_ADD_IO_SEG(0x0001180080E807E0ull) + ((offset) & 3) * 0x40000ull - 262144*2;
 
@@ -266,10 +266,10 @@ static inline uint64_t CVMX_L2C_CBCX_MIBERR(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180080E807E0ull) + (offset) * 0x40000ull - 262144*2;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180080E807E0ull) + (offset) * 0x40000ull - 262144*2;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180080E807E0ull) + (offset) * 0x40000ull - 262144*2;
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -545,10 +545,10 @@ static inline uint64_t CVMX_L2C_IOCX_PFC(unsigned long offset)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset == 0))
 					return CVMX_ADD_IO_SEG(0x0001180080800828ull);
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset == 0))
 					return CVMX_ADD_IO_SEG(0x0001180080800828ull);
 			if ((offset == 0))
@@ -574,10 +574,10 @@ static inline uint64_t CVMX_L2C_IOCX_PFC(unsigned long offset __attribute__ ((un
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180080800828ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180080800828ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180080800828ull);
 			return CVMX_ADD_IO_SEG(0x0001180080800828ull);
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -597,10 +597,10 @@ static inline uint64_t CVMX_L2C_IORX_PFC(unsigned long offset)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset == 0))
 					return CVMX_ADD_IO_SEG(0x0001180080800830ull);
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset == 0))
 					return CVMX_ADD_IO_SEG(0x0001180080800830ull);
 			if ((offset == 0))
@@ -626,10 +626,10 @@ static inline uint64_t CVMX_L2C_IORX_PFC(unsigned long offset __attribute__ ((un
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180080800830ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180080800830ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180080800830ull);
 			return CVMX_ADD_IO_SEG(0x0001180080800830ull);
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -915,10 +915,10 @@ static inline uint64_t CVMX_L2C_RSCX_PFC(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180080800810ull) + ((offset) & 3) * 64;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 9))
 					return CVMX_ADD_IO_SEG(0x0001180080800810ull) + ((offset) & 15) * 64;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 9))
 					return CVMX_ADD_IO_SEG(0x0001180080800810ull) + ((offset) & 15) * 64;
 
@@ -948,10 +948,10 @@ static inline uint64_t CVMX_L2C_RSCX_PFC(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180080800810ull) + (offset) * 64;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180080800810ull) + (offset) * 64;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180080800810ull) + (offset) * 64;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180080800810ull) + (offset) * 64;
 
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -978,10 +978,10 @@ static inline uint64_t CVMX_L2C_RSDX_PFC(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180080800818ull) + ((offset) & 3) * 64;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 9))
 					return CVMX_ADD_IO_SEG(0x0001180080800818ull) + ((offset) & 15) * 64;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 9))
 					return CVMX_ADD_IO_SEG(0x0001180080800818ull) + ((offset) & 15) * 64;
 
@@ -1011,10 +1011,10 @@ static inline uint64_t CVMX_L2C_RSDX_PFC(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180080800818ull) + (offset) * 64;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180080800818ull) + (offset) * 64;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180080800818ull) + (offset) * 64;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180080800818ull) + (offset) * 64;
 
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1584,10 +1584,10 @@ static inline uint64_t CVMX_L2C_XMCX_PFC(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180080800800ull) + ((offset) & 3) * 64;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 9))
 					return CVMX_ADD_IO_SEG(0x0001180080800800ull) + ((offset) & 15) * 64;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 9))
 					return CVMX_ADD_IO_SEG(0x0001180080800800ull) + ((offset) & 15) * 64;
 
@@ -1617,10 +1617,10 @@ static inline uint64_t CVMX_L2C_XMCX_PFC(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180080800800ull) + (offset) * 64;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180080800800ull) + (offset) * 64;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180080800800ull) + (offset) * 64;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180080800800ull) + (offset) * 64;
 
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1658,10 +1658,10 @@ static inline uint64_t CVMX_L2C_XMDX_PFC(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180080800808ull) + ((offset) & 3) * 64;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 9))
 					return CVMX_ADD_IO_SEG(0x0001180080800808ull) + ((offset) & 15) * 64;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 9))
 					return CVMX_ADD_IO_SEG(0x0001180080800808ull) + ((offset) & 15) * 64;
 
@@ -1691,10 +1691,10 @@ static inline uint64_t CVMX_L2C_XMDX_PFC(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180080800808ull) + (offset) * 64;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180080800808ull) + (offset) * 64;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180080800808ull) + (offset) * 64;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180080800808ull) + (offset) * 64;
 
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
diff --git a/arch/mips/include/asm/octeon/cvmx-lmcx-defs.h b/arch/mips/include/asm/octeon/cvmx-lmcx-defs.h
index 22f7d67a3a39..739003f89659 100644
--- a/arch/mips/include/asm/octeon/cvmx-lmcx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-lmcx-defs.h
@@ -99,10 +99,10 @@ static inline uint64_t CVMX_LMCX_BIST_CTL(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180088000100ull) + ((offset) & 1) * 0x1000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180088000100ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180088000100ull) + ((offset) & 3) * 0x1000000ull;
 
@@ -126,10 +126,10 @@ static inline uint64_t CVMX_LMCX_BIST_CTL(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180088000100ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180088000100ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180088000100ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180088000100ull) + (offset) * 0x1000000ull;
 
 	}
 	return CVMX_ADD_IO_SEG(0x0001180088000100ull) + (offset) * 0x1000000ull;
@@ -681,10 +681,10 @@ static inline uint64_t CVMX_LMCX_DUAL_MEMCFG(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180088000098ull) + ((offset) & 1) * 0x1000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180088000098ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180088000098ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
@@ -716,10 +716,10 @@ static inline uint64_t CVMX_LMCX_DUAL_MEMCFG(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180088000098ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180088000098ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180088000098ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180088000098ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180088000098ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN56XX & OCTEON_FAMILY_MASK:
@@ -761,10 +761,10 @@ static inline uint64_t CVMX_LMCX_ECC_SYND(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180088000038ull) + ((offset) & 0) * 0x60000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180088000038ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180088000038ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
@@ -801,10 +801,10 @@ static inline uint64_t CVMX_LMCX_ECC_SYND(unsigned long offset)
 		case OCTEON_CN63XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180088000038ull) + (offset) * 0x60000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180088000038ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180088000038ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180088000038ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180088000038ull) + (offset) * 0x1000000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
@@ -863,10 +863,10 @@ static inline uint64_t CVMX_LMCX_FADR(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180088000020ull) + ((offset) & 0) * 0x60000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180088000020ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180088000020ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
@@ -903,10 +903,10 @@ static inline uint64_t CVMX_LMCX_FADR(unsigned long offset)
 		case OCTEON_CN63XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180088000020ull) + (offset) * 0x60000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180088000020ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180088000020ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180088000020ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180088000020ull) + (offset) * 0x1000000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
@@ -1262,10 +1262,10 @@ static inline uint64_t CVMX_LMCX_NXM(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x00011800880000C8ull) + ((offset) & 1) * 0x1000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800880000C8ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800880000C8ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
@@ -1296,10 +1296,10 @@ static inline uint64_t CVMX_LMCX_NXM(unsigned long offset)
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800880000C8ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800880000C8ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800880000C8ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800880000C8ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800880000C8ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN56XX & OCTEON_FAMILY_MASK:
@@ -1963,10 +1963,10 @@ static inline uint64_t CVMX_LMCX_WLEVEL_RANKX(unsigned long offset, unsigned lon
 				return CVMX_ADD_IO_SEG(0x00011800880002C0ull) + (((offset) & 3) + ((block_id) & 1) * 0x200000ull) * 8;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if (((offset <= 3)) && ((block_id <= 3)))
 					return CVMX_ADD_IO_SEG(0x00011800880002C0ull) + (((offset) & 3) + ((block_id) & 3) * 0x200000ull) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if (((offset <= 3)) && ((block_id <= 3)))
 					return CVMX_ADD_IO_SEG(0x00011800880002C0ull) + (((offset) & 3) + ((block_id) & 3) * 0x200000ull) * 8;
 
@@ -1999,10 +1999,10 @@ static inline uint64_t CVMX_LMCX_WLEVEL_RANKX(unsigned long offset, unsigned lon
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800880002C0ull) + ((offset) + (block_id) * 0x200000ull) * 8;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800880002C0ull) + ((offset) + (block_id) * 0x200000ull) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800880002C0ull) + ((offset) + (block_id) * 0x200000ull) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800880002C0ull) + ((offset) + (block_id) * 0x200000ull) * 8;
 
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN63XX & OCTEON_FAMILY_MASK:
diff --git a/arch/mips/include/asm/octeon/cvmx-mio-defs.h b/arch/mips/include/asm/octeon/cvmx-mio-defs.h
index 13240f9129bd..39d9f8d9a389 100644
--- a/arch/mips/include/asm/octeon/cvmx-mio-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-mio-defs.h
@@ -641,10 +641,10 @@ static inline uint64_t CVMX_MIO_FUS_PDF_FUNC(void)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x0001180000001428ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x0001180000001428ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x0001180000001428ull);
 			return CVMX_ADD_IO_SEG(0x0001180000001428ull);
 			break;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -671,10 +671,10 @@ static inline uint64_t CVMX_MIO_FUS_PDF_FUNC(void)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180000001428ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180000001428ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180000001428ull);
 			return CVMX_ADD_IO_SEG(0x0001180000001428ull);
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN50XX & OCTEON_FAMILY_MASK:
@@ -795,10 +795,10 @@ static inline uint64_t CVMX_MIO_FUS_TGG_FUNC(void)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x0001180000001430ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x0001180000001430ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x0001180000001430ull);
 			return CVMX_ADD_IO_SEG(0x0001180000001430ull);
 			break;
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
@@ -819,10 +819,10 @@ static inline uint64_t CVMX_MIO_FUS_TGG_FUNC(void)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180000001430ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180000001430ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180000001430ull);
 			return CVMX_ADD_IO_SEG(0x0001180000001430ull);
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1240,10 +1240,10 @@ static inline uint64_t CVMX_MIO_TWSX_INT(unsigned long offset)
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN52XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x0001180000001010ull) + ((offset) & 1) * 512;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x0001180000001010ull) + ((offset) & 1) * 512;
 		case OCTEON_CN63XX & OCTEON_FAMILY_MASK:
@@ -1279,10 +1279,10 @@ static inline uint64_t CVMX_MIO_TWSX_INT(unsigned long offset)
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN52XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180000001010ull) + (offset) * 512;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180000001010ull) + (offset) * 512;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180000001010ull) + (offset) * 512;
 		case OCTEON_CN63XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000001010ull) + (offset) * 512;
@@ -1345,10 +1345,10 @@ static inline uint64_t CVMX_MIO_TWSX_SW_TWSI(unsigned long offset)
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN52XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x0001180000001000ull) + ((offset) & 1) * 512;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x0001180000001000ull) + ((offset) & 1) * 512;
 		case OCTEON_CN63XX & OCTEON_FAMILY_MASK:
@@ -1384,10 +1384,10 @@ static inline uint64_t CVMX_MIO_TWSX_SW_TWSI(unsigned long offset)
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN52XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180000001000ull) + (offset) * 512;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180000001000ull) + (offset) * 512;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180000001000ull) + (offset) * 512;
 		case OCTEON_CN63XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000001000ull) + (offset) * 512;
@@ -1415,10 +1415,10 @@ static inline uint64_t CVMX_MIO_TWSX_SW_TWSI_EXT(unsigned long offset)
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN52XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x0001180000001018ull) + ((offset) & 1) * 512;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x0001180000001018ull) + ((offset) & 1) * 512;
 		case OCTEON_CN63XX & OCTEON_FAMILY_MASK:
@@ -1454,10 +1454,10 @@ static inline uint64_t CVMX_MIO_TWSX_SW_TWSI_EXT(unsigned long offset)
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN52XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180000001018ull) + (offset) * 512;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180000001018ull) + (offset) * 512;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180000001018ull) + (offset) * 512;
 		case OCTEON_CN63XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000001018ull) + (offset) * 512;
@@ -1485,10 +1485,10 @@ static inline uint64_t CVMX_MIO_TWSX_TWSI_SW(unsigned long offset)
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN52XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x0001180000001008ull) + ((offset) & 1) * 512;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x0001180000001008ull) + ((offset) & 1) * 512;
 		case OCTEON_CN63XX & OCTEON_FAMILY_MASK:
@@ -1524,10 +1524,10 @@ static inline uint64_t CVMX_MIO_TWSX_TWSI_SW(unsigned long offset)
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN52XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180000001008ull) + (offset) * 512;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180000001008ull) + (offset) * 512;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180000001008ull) + (offset) * 512;
 		case OCTEON_CN63XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000001008ull) + (offset) * 512;
diff --git a/arch/mips/include/asm/octeon/cvmx-osm-defs.h b/arch/mips/include/asm/octeon/cvmx-osm-defs.h
index 2d7b55278c62..59508d2d7849 100644
--- a/arch/mips/include/asm/octeon/cvmx-osm-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-osm-defs.h
@@ -68,10 +68,10 @@ static inline uint64_t CVMX_OSM_BANKX_CTRL(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011800DC001000ull) + ((offset) & 63) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011800DC001000ull) + ((offset) & 63) * 8;
 
@@ -89,10 +89,10 @@ static inline uint64_t CVMX_OSM_BANKX_CTRL(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800DC001000ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800DC001000ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800DC001000ull) + (offset) * 8;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001DC0000001000ull) + (offset) * 8;
@@ -117,10 +117,10 @@ static inline uint64_t CVMX_OSM_ECC_CTRL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011800DC000020ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011800DC000020ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011800DC000020ull);
 
 			break;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -136,10 +136,10 @@ static inline uint64_t CVMX_OSM_ECC_CTRL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800DC000020ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800DC000020ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800DC000020ull);
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001DC0000000020ull);
@@ -153,10 +153,10 @@ static inline uint64_t CVMX_OSM_ECO_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011800DC003000ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011800DC003000ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011800DC003000ull);
 
 			break;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -172,10 +172,10 @@ static inline uint64_t CVMX_OSM_ECO_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800DC003000ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800DC003000ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800DC003000ull);
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001DC0000003000ull);
@@ -189,10 +189,10 @@ static inline uint64_t CVMX_OSM_INT_INFO_ADDR_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011800DC000018ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011800DC000018ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011800DC000018ull);
 
 			break;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -208,10 +208,10 @@ static inline uint64_t CVMX_OSM_INT_INFO_ADDR_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800DC000018ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800DC000018ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800DC000018ull);
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001DC0000000018ull);
@@ -225,10 +225,10 @@ static inline uint64_t CVMX_OSM_INT_INFO_ECC_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011800DC000010ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011800DC000010ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011800DC000010ull);
 
 			break;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -244,10 +244,10 @@ static inline uint64_t CVMX_OSM_INT_INFO_ECC_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800DC000010ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800DC000010ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800DC000010ull);
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001DC0000000010ull);
@@ -261,10 +261,10 @@ static inline uint64_t CVMX_OSM_INT_STAT_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011800DC000008ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011800DC000008ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011800DC000008ull);
 
 			break;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -280,10 +280,10 @@ static inline uint64_t CVMX_OSM_INT_STAT_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800DC000008ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800DC000008ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800DC000008ull);
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001DC0000000008ull);
@@ -296,10 +296,10 @@ static inline uint64_t CVMX_OSM_MEMX_BIST_STATUS(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 7))
 					return CVMX_ADD_IO_SEG(0x00011800DC002000ull) + ((offset) & 7) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 7))
 					return CVMX_ADD_IO_SEG(0x00011800DC002000ull) + ((offset) & 7) * 8;
 
@@ -317,10 +317,10 @@ static inline uint64_t CVMX_OSM_MEMX_BIST_STATUS(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800DC002000ull) + (offset) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800DC002000ull) + (offset) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800DC002000ull) + (offset) * 8;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001DC0000002000ull) + (offset) * 8;
diff --git a/arch/mips/include/asm/octeon/cvmx-pcieepx-defs.h b/arch/mips/include/asm/octeon/cvmx-pcieepx-defs.h
index bc0f2e86941e..290b606895f7 100644
--- a/arch/mips/include/asm/octeon/cvmx-pcieepx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pcieepx-defs.h
@@ -65,10 +65,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG000(unsigned long offset)
 				return 0x0000030000000000ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000000ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000000ull + ((offset) & 3) * 0x100000000ull;
 
@@ -103,10 +103,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG000(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000000ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000000ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000000ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000000ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000000ull + (offset) * 0x100000000ull;
@@ -136,10 +136,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG001(unsigned long offset)
 				return 0x0000030000000004ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000004ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000004ull + ((offset) & 3) * 0x100000000ull;
 
@@ -174,10 +174,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG001(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000004ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000004ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000004ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000004ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000004ull + (offset) * 0x100000000ull;
@@ -207,10 +207,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG002(unsigned long offset)
 				return 0x0000030000000008ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000008ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000008ull + ((offset) & 3) * 0x100000000ull;
 
@@ -245,10 +245,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG002(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000008ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000008ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000008ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000008ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000008ull + (offset) * 0x100000000ull;
@@ -278,10 +278,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG003(unsigned long offset)
 				return 0x000003000000000Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000000Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000000Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -316,10 +316,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG003(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000000Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000000Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000000Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000000Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000000Cull + (offset) * 0x100000000ull;
@@ -349,10 +349,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG004(unsigned long offset)
 				return 0x0000030000000010ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000010ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000010ull + ((offset) & 3) * 0x100000000ull;
 
@@ -387,10 +387,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG004(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000010ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000010ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000010ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000010ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000010ull + (offset) * 0x100000000ull;
@@ -420,10 +420,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG004_MASK(unsigned long offset)
 				return 0x0000030080000010ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030080000010ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030080000010ull + ((offset) & 3) * 0x100000000ull;
 
@@ -458,10 +458,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG004_MASK(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000010ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030080000010ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030080000010ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030080000010ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000010ull + (offset) * 0x100000000ull;
@@ -491,10 +491,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG005(unsigned long offset)
 				return 0x0000030000000014ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000014ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000014ull + ((offset) & 3) * 0x100000000ull;
 
@@ -529,10 +529,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG005(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000014ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000014ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000014ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000014ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000014ull + (offset) * 0x100000000ull;
@@ -562,10 +562,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG005_MASK(unsigned long offset)
 				return 0x0000030080000014ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030080000014ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030080000014ull + ((offset) & 3) * 0x100000000ull;
 
@@ -600,10 +600,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG005_MASK(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000014ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030080000014ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030080000014ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030080000014ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000014ull + (offset) * 0x100000000ull;
@@ -633,10 +633,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG006(unsigned long offset)
 				return 0x0000030000000018ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000018ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000018ull + ((offset) & 3) * 0x100000000ull;
 
@@ -671,10 +671,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG006(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000018ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000018ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000018ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000018ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000018ull + (offset) * 0x100000000ull;
@@ -704,10 +704,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG006_MASK(unsigned long offset)
 				return 0x0000030080000018ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030080000018ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030080000018ull + ((offset) & 3) * 0x100000000ull;
 
@@ -742,10 +742,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG006_MASK(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000018ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030080000018ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030080000018ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030080000018ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000018ull + (offset) * 0x100000000ull;
@@ -775,10 +775,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG007(unsigned long offset)
 				return 0x000003000000001Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000001Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000001Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -813,10 +813,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG007(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000001Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000001Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000001Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000001Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000001Cull + (offset) * 0x100000000ull;
@@ -846,10 +846,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG007_MASK(unsigned long offset)
 				return 0x000003008000001Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003008000001Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003008000001Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -884,10 +884,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG007_MASK(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003008000001Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003008000001Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003008000001Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003008000001Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003008000001Cull + (offset) * 0x100000000ull;
@@ -917,10 +917,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG008(unsigned long offset)
 				return 0x0000030000000020ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000020ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000020ull + ((offset) & 3) * 0x100000000ull;
 
@@ -955,10 +955,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG008(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000020ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000020ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000020ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000020ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000020ull + (offset) * 0x100000000ull;
@@ -988,10 +988,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG008_MASK(unsigned long offset)
 				return 0x0000030080000020ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030080000020ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030080000020ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1026,10 +1026,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG008_MASK(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000020ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030080000020ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030080000020ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030080000020ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000020ull + (offset) * 0x100000000ull;
@@ -1059,10 +1059,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG009(unsigned long offset)
 				return 0x0000030000000024ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000024ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000024ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1097,10 +1097,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG009(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000024ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000024ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000024ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000024ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000024ull + (offset) * 0x100000000ull;
@@ -1130,10 +1130,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG009_MASK(unsigned long offset)
 				return 0x0000030080000024ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030080000024ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030080000024ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1168,10 +1168,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG009_MASK(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000024ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030080000024ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030080000024ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030080000024ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000024ull + (offset) * 0x100000000ull;
@@ -1201,10 +1201,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG010(unsigned long offset)
 				return 0x0000030000000028ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000028ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000028ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1239,10 +1239,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG010(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000028ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000028ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000028ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000028ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000028ull + (offset) * 0x100000000ull;
@@ -1272,10 +1272,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG011(unsigned long offset)
 				return 0x000003000000002Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000002Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000002Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -1310,10 +1310,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG011(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000002Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000002Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000002Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000002Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000002Cull + (offset) * 0x100000000ull;
@@ -1343,10 +1343,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG012(unsigned long offset)
 				return 0x0000030000000030ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000030ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000030ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1381,10 +1381,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG012(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000030ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000030ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000030ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000030ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000030ull + (offset) * 0x100000000ull;
@@ -1414,10 +1414,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG012_MASK(unsigned long offset)
 				return 0x0000030080000030ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030080000030ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030080000030ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1452,10 +1452,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG012_MASK(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000030ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030080000030ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030080000030ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030080000030ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030080000030ull + (offset) * 0x100000000ull;
@@ -1485,10 +1485,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG013(unsigned long offset)
 				return 0x0000030000000034ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000034ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000034ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1523,10 +1523,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG013(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000034ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000034ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000034ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000034ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000034ull + (offset) * 0x100000000ull;
@@ -1556,10 +1556,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG015(unsigned long offset)
 				return 0x000003000000003Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000003Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000003Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -1594,10 +1594,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG015(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000003Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000003Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000003Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000003Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000003Cull + (offset) * 0x100000000ull;
@@ -1627,10 +1627,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG016(unsigned long offset)
 				return 0x0000030000000040ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000040ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000040ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1665,10 +1665,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG016(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000040ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000040ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000040ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000040ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000040ull + (offset) * 0x100000000ull;
@@ -1698,10 +1698,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG017(unsigned long offset)
 				return 0x0000030000000044ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000044ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000044ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1736,10 +1736,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG017(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000044ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000044ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000044ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000044ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000044ull + (offset) * 0x100000000ull;
@@ -1769,10 +1769,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG020(unsigned long offset)
 				return 0x0000030000000050ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000050ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000050ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1807,10 +1807,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG020(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000050ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000050ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000050ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000050ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000050ull + (offset) * 0x100000000ull;
@@ -1840,10 +1840,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG021(unsigned long offset)
 				return 0x0000030000000054ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000054ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000054ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1878,10 +1878,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG021(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000054ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000054ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000054ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000054ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000054ull + (offset) * 0x100000000ull;
@@ -1911,10 +1911,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG022(unsigned long offset)
 				return 0x0000030000000058ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000058ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000058ull + ((offset) & 3) * 0x100000000ull;
 
@@ -1949,10 +1949,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG022(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000058ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000058ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000058ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000058ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000058ull + (offset) * 0x100000000ull;
@@ -1982,10 +1982,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG023(unsigned long offset)
 				return 0x000003000000005Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000005Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000005Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -2020,10 +2020,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG023(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000005Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000005Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000005Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000005Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000005Cull + (offset) * 0x100000000ull;
@@ -2053,10 +2053,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG024(unsigned long offset)
 				return 0x0000030000000060ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000060ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000060ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2078,10 +2078,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG024(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000060ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000060ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000060ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000060ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000060ull + (offset) * 0x100000000ull;
@@ -2102,10 +2102,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG025(unsigned long offset)
 				return 0x0000030000000064ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000064ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000064ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2127,10 +2127,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG025(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000064ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000064ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000064ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000064ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000064ull + (offset) * 0x100000000ull;
@@ -2151,10 +2151,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG028(unsigned long offset)
 				return 0x0000030000000070ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000070ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000070ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2189,10 +2189,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG028(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000070ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000070ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000070ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000070ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000070ull + (offset) * 0x100000000ull;
@@ -2222,10 +2222,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG029(unsigned long offset)
 				return 0x0000030000000074ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000074ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000074ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2260,10 +2260,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG029(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000074ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000074ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000074ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000074ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000074ull + (offset) * 0x100000000ull;
@@ -2293,10 +2293,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG030(unsigned long offset)
 				return 0x0000030000000078ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000078ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000078ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2331,10 +2331,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG030(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000078ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000078ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000078ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000078ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000078ull + (offset) * 0x100000000ull;
@@ -2364,10 +2364,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG031(unsigned long offset)
 				return 0x000003000000007Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000007Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000007Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -2402,10 +2402,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG031(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000007Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000007Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000007Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000007Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000007Cull + (offset) * 0x100000000ull;
@@ -2435,10 +2435,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG032(unsigned long offset)
 				return 0x0000030000000080ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000080ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000080ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2473,10 +2473,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG032(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000080ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000080ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000080ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000080ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000080ull + (offset) * 0x100000000ull;
@@ -2532,10 +2532,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG037(unsigned long offset)
 				return 0x0000030000000094ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000094ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000094ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2570,10 +2570,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG037(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000094ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000094ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000094ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000094ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000094ull + (offset) * 0x100000000ull;
@@ -2603,10 +2603,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG038(unsigned long offset)
 				return 0x0000030000000098ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000098ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000098ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2641,10 +2641,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG038(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000098ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000098ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000098ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000098ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000098ull + (offset) * 0x100000000ull;
@@ -2674,10 +2674,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG039(unsigned long offset)
 				return 0x000003000000009Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000009Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000009Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -2712,10 +2712,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG039(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000009Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000009Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000009Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000009Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000009Cull + (offset) * 0x100000000ull;
@@ -2745,10 +2745,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG040(unsigned long offset)
 				return 0x00000300000000A0ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000000A0ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000000A0ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2783,10 +2783,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG040(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000000A0ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000000A0ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000000A0ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000000A0ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000000A0ull + (offset) * 0x100000000ull;
@@ -2834,10 +2834,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG044(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000000B0ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000000B0ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2859,10 +2859,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG044(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000000B0ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000000B0ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000000B0ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000000B0ull + (offset) * 0x100000000ull;
@@ -2877,10 +2877,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG045(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000000B4ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000000B4ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2902,10 +2902,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG045(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000000B4ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000000B4ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000000B4ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000000B4ull + (offset) * 0x100000000ull;
@@ -2920,10 +2920,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG046(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000000B8ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000000B8ull + ((offset) & 3) * 0x100000000ull;
 
@@ -2945,10 +2945,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG046(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000000B8ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000000B8ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000000B8ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000000B8ull + (offset) * 0x100000000ull;
@@ -2971,10 +2971,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG064(unsigned long offset)
 				return 0x0000030000000100ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000100ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000100ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3009,10 +3009,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG064(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000100ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000100ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000100ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000100ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000100ull + (offset) * 0x100000000ull;
@@ -3042,10 +3042,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG065(unsigned long offset)
 				return 0x0000030000000104ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000104ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000104ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3080,10 +3080,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG065(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000104ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000104ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000104ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000104ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000104ull + (offset) * 0x100000000ull;
@@ -3113,10 +3113,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG066(unsigned long offset)
 				return 0x0000030000000108ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000108ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000108ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3151,10 +3151,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG066(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000108ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000108ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000108ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000108ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000108ull + (offset) * 0x100000000ull;
@@ -3184,10 +3184,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG067(unsigned long offset)
 				return 0x000003000000010Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000010Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000010Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -3222,10 +3222,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG067(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000010Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000010Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000010Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000010Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000010Cull + (offset) * 0x100000000ull;
@@ -3255,10 +3255,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG068(unsigned long offset)
 				return 0x0000030000000110ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000110ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000110ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3293,10 +3293,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG068(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000110ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000110ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000110ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000110ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000110ull + (offset) * 0x100000000ull;
@@ -3326,10 +3326,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG069(unsigned long offset)
 				return 0x0000030000000114ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000114ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000114ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3364,10 +3364,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG069(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000114ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000114ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000114ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000114ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000114ull + (offset) * 0x100000000ull;
@@ -3397,10 +3397,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG070(unsigned long offset)
 				return 0x0000030000000118ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000118ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000118ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3435,10 +3435,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG070(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000118ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000118ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000118ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000118ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000118ull + (offset) * 0x100000000ull;
@@ -3468,10 +3468,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG071(unsigned long offset)
 				return 0x000003000000011Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000011Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000011Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -3506,10 +3506,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG071(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000011Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000011Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000011Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000011Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000011Cull + (offset) * 0x100000000ull;
@@ -3539,10 +3539,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG072(unsigned long offset)
 				return 0x0000030000000120ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000120ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000120ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3577,10 +3577,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG072(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000120ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000120ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000120ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000120ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000120ull + (offset) * 0x100000000ull;
@@ -3610,10 +3610,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG073(unsigned long offset)
 				return 0x0000030000000124ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000124ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000124ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3648,10 +3648,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG073(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000124ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000124ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000124ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000124ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000124ull + (offset) * 0x100000000ull;
@@ -3681,10 +3681,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG074(unsigned long offset)
 				return 0x0000030000000128ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000128ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000128ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3719,10 +3719,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG074(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000128ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000128ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000128ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000128ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000128ull + (offset) * 0x100000000ull;
@@ -3744,10 +3744,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG078(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000138ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000138ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3769,10 +3769,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG078(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000138ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000138ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000138ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000138ull + (offset) * 0x100000000ull;
@@ -3795,10 +3795,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG082(unsigned long offset)
 				return 0x0000030000000148ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000148ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000148ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3820,10 +3820,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG082(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000148ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000148ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000148ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000148ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000148ull + (offset) * 0x100000000ull;
@@ -3844,10 +3844,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG083(unsigned long offset)
 				return 0x000003000000014Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000014Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000014Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -3869,10 +3869,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG083(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000014Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000014Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000014Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000014Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000014Cull + (offset) * 0x100000000ull;
@@ -3896,10 +3896,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG086(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000158ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000158ull + ((offset) & 3) * 0x100000000ull;
 
@@ -3921,10 +3921,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG086(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000158ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000158ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000158ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000158ull + (offset) * 0x100000000ull;
@@ -3939,10 +3939,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG087(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000015Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000015Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -3964,10 +3964,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG087(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000015Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000015Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000015Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000015Cull + (offset) * 0x100000000ull;
@@ -3982,10 +3982,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG088(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000160ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000160ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4007,10 +4007,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG088(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000160ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000160ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000160ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000160ull + (offset) * 0x100000000ull;
@@ -4025,10 +4025,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG089(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000164ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000164ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4050,10 +4050,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG089(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000164ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000164ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000164ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000164ull + (offset) * 0x100000000ull;
@@ -4068,10 +4068,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG090(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000168ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000168ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4093,10 +4093,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG090(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000168ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000168ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000168ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000168ull + (offset) * 0x100000000ull;
@@ -4111,10 +4111,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG091(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000016Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000016Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -4136,10 +4136,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG091(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000016Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000016Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000016Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000016Cull + (offset) * 0x100000000ull;
@@ -4154,10 +4154,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG092(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000170ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000170ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4179,10 +4179,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG092(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000170ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000170ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000170ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000170ull + (offset) * 0x100000000ull;
@@ -4197,10 +4197,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG094(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000178ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000178ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4222,10 +4222,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG094(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000178ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000178ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000178ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000178ull + (offset) * 0x100000000ull;
@@ -4240,10 +4240,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG095(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000017Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000017Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -4265,10 +4265,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG095(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000017Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000017Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000017Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000017Cull + (offset) * 0x100000000ull;
@@ -4283,10 +4283,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG096(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000180ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000180ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4308,10 +4308,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG096(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000180ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000180ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000180ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000180ull + (offset) * 0x100000000ull;
@@ -4326,10 +4326,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG097(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000184ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000184ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4351,10 +4351,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG097(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000184ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000184ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000184ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000184ull + (offset) * 0x100000000ull;
@@ -4369,10 +4369,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG098(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000188ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000188ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4394,10 +4394,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG098(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000188ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000188ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000188ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000188ull + (offset) * 0x100000000ull;
@@ -4412,10 +4412,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG099(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000018Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000018Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -4437,10 +4437,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG099(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000018Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000018Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000018Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000018Cull + (offset) * 0x100000000ull;
@@ -4455,10 +4455,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG100(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000190ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000190ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4480,10 +4480,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG100(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000190ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000190ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000190ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000190ull + (offset) * 0x100000000ull;
@@ -4498,10 +4498,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG101(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000194ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000194ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4523,10 +4523,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG101(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000194ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000194ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000194ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000194ull + (offset) * 0x100000000ull;
@@ -4541,10 +4541,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG102(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000198ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000198ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4566,10 +4566,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG102(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000198ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000198ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000198ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000198ull + (offset) * 0x100000000ull;
@@ -4584,10 +4584,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG103(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000019Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000019Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -4609,10 +4609,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG103(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000019Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000019Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000019Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000019Cull + (offset) * 0x100000000ull;
@@ -4627,10 +4627,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG104(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000001A0ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000001A0ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4652,10 +4652,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG104(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000001A0ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000001A0ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000001A0ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000001A0ull + (offset) * 0x100000000ull;
@@ -4670,10 +4670,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG105(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000001A4ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000001A4ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4695,10 +4695,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG105(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000001A4ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000001A4ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000001A4ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000001A4ull + (offset) * 0x100000000ull;
@@ -4713,10 +4713,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG106(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000001A8ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000001A8ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4738,10 +4738,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG106(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000001A8ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000001A8ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000001A8ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000001A8ull + (offset) * 0x100000000ull;
@@ -4756,10 +4756,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG107(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000001ACull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000001ACull + ((offset) & 3) * 0x100000000ull;
 
@@ -4781,10 +4781,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG107(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000001ACull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000001ACull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000001ACull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000001ACull + (offset) * 0x100000000ull;
@@ -4799,10 +4799,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG108(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000001B0ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000001B0ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4824,10 +4824,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG108(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000001B0ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000001B0ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000001B0ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000001B0ull + (offset) * 0x100000000ull;
@@ -4842,10 +4842,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG109(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000001B4ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000001B4ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4867,10 +4867,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG109(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000001B4ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000001B4ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000001B4ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000001B4ull + (offset) * 0x100000000ull;
@@ -4885,10 +4885,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG110(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000001B8ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000001B8ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4910,10 +4910,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG110(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000001B8ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000001B8ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000001B8ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000001B8ull + (offset) * 0x100000000ull;
@@ -4928,10 +4928,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG111(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000001BCull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000001BCull + ((offset) & 3) * 0x100000000ull;
 
@@ -4953,10 +4953,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG111(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000001BCull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000001BCull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000001BCull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000001BCull + (offset) * 0x100000000ull;
@@ -4971,10 +4971,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG112(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000001C0ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000001C0ull + ((offset) & 3) * 0x100000000ull;
 
@@ -4996,10 +4996,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG112(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000001C0ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000001C0ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000001C0ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000001C0ull + (offset) * 0x100000000ull;
@@ -5022,10 +5022,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG448(unsigned long offset)
 				return 0x0000030000000700ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000700ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000700ull + ((offset) & 3) * 0x100000000ull;
 
@@ -5060,10 +5060,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG448(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000700ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000700ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000700ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000700ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000700ull + (offset) * 0x100000000ull;
@@ -5093,10 +5093,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG449(unsigned long offset)
 				return 0x0000030000000704ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000704ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000704ull + ((offset) & 3) * 0x100000000ull;
 
@@ -5131,10 +5131,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG449(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000704ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000704ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000704ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000704ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000704ull + (offset) * 0x100000000ull;
@@ -5164,10 +5164,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG450(unsigned long offset)
 				return 0x0000030000000708ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000708ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000708ull + ((offset) & 3) * 0x100000000ull;
 
@@ -5202,10 +5202,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG450(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000708ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000708ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000708ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000708ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000708ull + (offset) * 0x100000000ull;
@@ -5235,10 +5235,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG451(unsigned long offset)
 				return 0x000003000000070Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000070Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000070Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -5273,10 +5273,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG451(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000070Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000070Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000070Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000070Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000070Cull + (offset) * 0x100000000ull;
@@ -5306,10 +5306,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG452(unsigned long offset)
 				return 0x0000030000000710ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000710ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000710ull + ((offset) & 3) * 0x100000000ull;
 
@@ -5344,10 +5344,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG452(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000710ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000710ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000710ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000710ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000710ull + (offset) * 0x100000000ull;
@@ -5377,10 +5377,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG453(unsigned long offset)
 				return 0x0000030000000714ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000714ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000714ull + ((offset) & 3) * 0x100000000ull;
 
@@ -5415,10 +5415,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG453(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000714ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000714ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000714ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000714ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000714ull + (offset) * 0x100000000ull;
@@ -5448,10 +5448,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG454(unsigned long offset)
 				return 0x0000030000000718ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000718ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000718ull + ((offset) & 3) * 0x100000000ull;
 
@@ -5486,10 +5486,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG454(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000718ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000718ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000718ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000718ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000718ull + (offset) * 0x100000000ull;
@@ -5519,10 +5519,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG455(unsigned long offset)
 				return 0x000003000000071Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000071Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000071Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -5557,10 +5557,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG455(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000071Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000071Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000071Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000071Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000071Cull + (offset) * 0x100000000ull;
@@ -5590,10 +5590,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG456(unsigned long offset)
 				return 0x0000030000000720ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000720ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000720ull + ((offset) & 3) * 0x100000000ull;
 
@@ -5628,10 +5628,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG456(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000720ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000720ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000720ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000720ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000720ull + (offset) * 0x100000000ull;
@@ -5661,10 +5661,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG458(unsigned long offset)
 				return 0x0000030000000728ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000728ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000728ull + ((offset) & 3) * 0x100000000ull;
 
@@ -5699,10 +5699,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG458(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000728ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000728ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000728ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000728ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000728ull + (offset) * 0x100000000ull;
@@ -5732,10 +5732,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG459(unsigned long offset)
 				return 0x000003000000072Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000072Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000072Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -5770,10 +5770,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG459(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000072Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000072Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000072Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000072Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000072Cull + (offset) * 0x100000000ull;
@@ -5803,10 +5803,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG460(unsigned long offset)
 				return 0x0000030000000730ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000730ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000730ull + ((offset) & 3) * 0x100000000ull;
 
@@ -5841,10 +5841,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG460(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000730ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000730ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000730ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000730ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000730ull + (offset) * 0x100000000ull;
@@ -5874,10 +5874,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG461(unsigned long offset)
 				return 0x0000030000000734ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000734ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000734ull + ((offset) & 3) * 0x100000000ull;
 
@@ -5912,10 +5912,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG461(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000734ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000734ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000734ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000734ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000734ull + (offset) * 0x100000000ull;
@@ -5945,10 +5945,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG462(unsigned long offset)
 				return 0x0000030000000738ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000738ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000738ull + ((offset) & 3) * 0x100000000ull;
 
@@ -5983,10 +5983,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG462(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000738ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000738ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000738ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000738ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000738ull + (offset) * 0x100000000ull;
@@ -6016,10 +6016,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG463(unsigned long offset)
 				return 0x000003000000073Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000073Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000073Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -6054,10 +6054,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG463(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000073Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000073Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000073Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000073Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000073Cull + (offset) * 0x100000000ull;
@@ -6087,10 +6087,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG464(unsigned long offset)
 				return 0x0000030000000740ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000740ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000740ull + ((offset) & 3) * 0x100000000ull;
 
@@ -6125,10 +6125,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG464(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000740ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000740ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000740ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000740ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000740ull + (offset) * 0x100000000ull;
@@ -6158,10 +6158,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG465(unsigned long offset)
 				return 0x0000030000000744ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000744ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000744ull + ((offset) & 3) * 0x100000000ull;
 
@@ -6196,10 +6196,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG465(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000744ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000744ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000744ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000744ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000744ull + (offset) * 0x100000000ull;
@@ -6229,10 +6229,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG466(unsigned long offset)
 				return 0x0000030000000748ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000748ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000748ull + ((offset) & 3) * 0x100000000ull;
 
@@ -6267,10 +6267,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG466(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000748ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000748ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000748ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000748ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000748ull + (offset) * 0x100000000ull;
@@ -6300,10 +6300,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG467(unsigned long offset)
 				return 0x000003000000074Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000074Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000074Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -6338,10 +6338,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG467(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000074Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000074Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000074Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000074Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000074Cull + (offset) * 0x100000000ull;
@@ -6371,10 +6371,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG468(unsigned long offset)
 				return 0x0000030000000750ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000750ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000750ull + ((offset) & 3) * 0x100000000ull;
 
@@ -6409,10 +6409,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG468(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000750ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000750ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000750ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000750ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000750ull + (offset) * 0x100000000ull;
@@ -6570,10 +6570,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG515(unsigned long offset)
 				return 0x000003000000080Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000003000000080Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000003000000080Cull + ((offset) & 3) * 0x100000000ull;
 
@@ -6605,10 +6605,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG515(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000080Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000003000000080Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000003000000080Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000003000000080Cull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000003000000080Cull + (offset) * 0x100000000ull;
@@ -6637,10 +6637,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG516(unsigned long offset)
 				return 0x0000030000000810ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000810ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000810ull + ((offset) & 3) * 0x100000000ull;
 
@@ -6675,10 +6675,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG516(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000810ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000810ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000810ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000810ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000810ull + (offset) * 0x100000000ull;
@@ -6708,10 +6708,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG517(unsigned long offset)
 				return 0x0000030000000814ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000814ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000814ull + ((offset) & 3) * 0x100000000ull;
 
@@ -6746,10 +6746,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG517(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000814ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000814ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000814ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000814ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000814ull + (offset) * 0x100000000ull;
@@ -6771,10 +6771,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG548(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000030000000890ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000030000000890ull + ((offset) & 3) * 0x100000000ull;
 
@@ -6796,10 +6796,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG548(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000030000000890ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000030000000890ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000030000000890ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000030000000890ull + (offset) * 0x100000000ull;
@@ -6814,10 +6814,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG554(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000008A8ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000008A8ull + ((offset) & 3) * 0x100000000ull;
 
@@ -6839,10 +6839,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG554(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000008A8ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000008A8ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000008A8ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000008A8ull + (offset) * 0x100000000ull;
@@ -6857,10 +6857,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG558(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000008B8ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000008B8ull + ((offset) & 3) * 0x100000000ull;
 
@@ -6882,10 +6882,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG558(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000008B8ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000008B8ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000008B8ull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000008B8ull + (offset) * 0x100000000ull;
@@ -6900,10 +6900,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG559(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000300000008BCull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000300000008BCull + ((offset) & 3) * 0x100000000ull;
 
@@ -6925,10 +6925,10 @@ static inline uint64_t CVMX_PCIEEPX_CFG559(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000300000008BCull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000300000008BCull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000300000008BCull + (offset) * 0x100000000ull;
 
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000300000008BCull + (offset) * 0x100000000ull;
diff --git a/arch/mips/include/asm/octeon/cvmx-pciercx-defs.h b/arch/mips/include/asm/octeon/cvmx-pciercx-defs.h
index 11212b71e628..6823db94ca3d 100644
--- a/arch/mips/include/asm/octeon/cvmx-pciercx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pciercx-defs.h
@@ -65,10 +65,10 @@ static inline uint64_t CVMX_PCIERCX_CFG000(unsigned long offset)
 				return 0x0000020000000000ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000000ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000000ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -98,10 +98,10 @@ static inline uint64_t CVMX_PCIERCX_CFG000(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000000ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000000ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000000ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000000ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000000ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -129,10 +129,10 @@ static inline uint64_t CVMX_PCIERCX_CFG001(unsigned long offset)
 				return 0x0000020000000004ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000004ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000004ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -162,10 +162,10 @@ static inline uint64_t CVMX_PCIERCX_CFG001(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000004ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000004ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000004ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000004ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000004ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -193,10 +193,10 @@ static inline uint64_t CVMX_PCIERCX_CFG002(unsigned long offset)
 				return 0x0000020000000008ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000008ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000008ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -226,10 +226,10 @@ static inline uint64_t CVMX_PCIERCX_CFG002(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000008ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000008ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000008ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000008ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000008ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -257,10 +257,10 @@ static inline uint64_t CVMX_PCIERCX_CFG003(unsigned long offset)
 				return 0x000002000000000Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000000Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000000Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -290,10 +290,10 @@ static inline uint64_t CVMX_PCIERCX_CFG003(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000000Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000000Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000000Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000000Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000000Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -321,10 +321,10 @@ static inline uint64_t CVMX_PCIERCX_CFG004(unsigned long offset)
 				return 0x0000020000000010ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000010ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000010ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -354,10 +354,10 @@ static inline uint64_t CVMX_PCIERCX_CFG004(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000010ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000010ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000010ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000010ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000010ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -385,10 +385,10 @@ static inline uint64_t CVMX_PCIERCX_CFG005(unsigned long offset)
 				return 0x0000020000000014ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000014ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000014ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -418,10 +418,10 @@ static inline uint64_t CVMX_PCIERCX_CFG005(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000014ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000014ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000014ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000014ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000014ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -449,10 +449,10 @@ static inline uint64_t CVMX_PCIERCX_CFG006(unsigned long offset)
 				return 0x0000020000000018ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000018ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000018ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -482,10 +482,10 @@ static inline uint64_t CVMX_PCIERCX_CFG006(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000018ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000018ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000018ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000018ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000018ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -513,10 +513,10 @@ static inline uint64_t CVMX_PCIERCX_CFG007(unsigned long offset)
 				return 0x000002000000001Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000001Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000001Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -546,10 +546,10 @@ static inline uint64_t CVMX_PCIERCX_CFG007(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000001Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000001Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000001Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000001Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000001Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -577,10 +577,10 @@ static inline uint64_t CVMX_PCIERCX_CFG008(unsigned long offset)
 				return 0x0000020000000020ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000020ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000020ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -610,10 +610,10 @@ static inline uint64_t CVMX_PCIERCX_CFG008(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000020ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000020ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000020ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000020ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000020ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -641,10 +641,10 @@ static inline uint64_t CVMX_PCIERCX_CFG009(unsigned long offset)
 				return 0x0000020000000024ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000024ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000024ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -674,10 +674,10 @@ static inline uint64_t CVMX_PCIERCX_CFG009(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000024ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000024ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000024ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000024ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000024ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -705,10 +705,10 @@ static inline uint64_t CVMX_PCIERCX_CFG010(unsigned long offset)
 				return 0x0000020000000028ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000028ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000028ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -738,10 +738,10 @@ static inline uint64_t CVMX_PCIERCX_CFG010(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000028ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000028ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000028ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000028ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000028ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -769,10 +769,10 @@ static inline uint64_t CVMX_PCIERCX_CFG011(unsigned long offset)
 				return 0x000002000000002Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000002Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000002Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -802,10 +802,10 @@ static inline uint64_t CVMX_PCIERCX_CFG011(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000002Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000002Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000002Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000002Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000002Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -833,10 +833,10 @@ static inline uint64_t CVMX_PCIERCX_CFG012(unsigned long offset)
 				return 0x0000020000000030ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000030ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000030ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -866,10 +866,10 @@ static inline uint64_t CVMX_PCIERCX_CFG012(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000030ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000030ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000030ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000030ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000030ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -897,10 +897,10 @@ static inline uint64_t CVMX_PCIERCX_CFG013(unsigned long offset)
 				return 0x0000020000000034ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000034ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000034ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -930,10 +930,10 @@ static inline uint64_t CVMX_PCIERCX_CFG013(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000034ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000034ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000034ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000034ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000034ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -961,10 +961,10 @@ static inline uint64_t CVMX_PCIERCX_CFG014(unsigned long offset)
 				return 0x0000020000000038ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000038ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000038ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -994,10 +994,10 @@ static inline uint64_t CVMX_PCIERCX_CFG014(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000038ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000038ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000038ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000038ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000038ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1025,10 +1025,10 @@ static inline uint64_t CVMX_PCIERCX_CFG015(unsigned long offset)
 				return 0x000002000000003Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000003Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000003Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1058,10 +1058,10 @@ static inline uint64_t CVMX_PCIERCX_CFG015(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000003Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000003Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000003Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000003Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000003Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1089,10 +1089,10 @@ static inline uint64_t CVMX_PCIERCX_CFG016(unsigned long offset)
 				return 0x0000020000000040ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000040ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000040ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1122,10 +1122,10 @@ static inline uint64_t CVMX_PCIERCX_CFG016(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000040ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000040ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000040ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000040ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000040ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1153,10 +1153,10 @@ static inline uint64_t CVMX_PCIERCX_CFG017(unsigned long offset)
 				return 0x0000020000000044ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000044ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000044ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1186,10 +1186,10 @@ static inline uint64_t CVMX_PCIERCX_CFG017(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000044ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000044ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000044ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000044ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000044ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1217,10 +1217,10 @@ static inline uint64_t CVMX_PCIERCX_CFG020(unsigned long offset)
 				return 0x0000020000000050ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000050ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000050ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1250,10 +1250,10 @@ static inline uint64_t CVMX_PCIERCX_CFG020(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000050ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000050ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000050ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000050ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000050ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1281,10 +1281,10 @@ static inline uint64_t CVMX_PCIERCX_CFG021(unsigned long offset)
 				return 0x0000020000000054ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000054ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000054ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1314,10 +1314,10 @@ static inline uint64_t CVMX_PCIERCX_CFG021(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000054ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000054ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000054ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000054ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000054ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1345,10 +1345,10 @@ static inline uint64_t CVMX_PCIERCX_CFG022(unsigned long offset)
 				return 0x0000020000000058ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000058ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000058ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1378,10 +1378,10 @@ static inline uint64_t CVMX_PCIERCX_CFG022(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000058ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000058ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000058ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000058ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000058ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1409,10 +1409,10 @@ static inline uint64_t CVMX_PCIERCX_CFG023(unsigned long offset)
 				return 0x000002000000005Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000005Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000005Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1442,10 +1442,10 @@ static inline uint64_t CVMX_PCIERCX_CFG023(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000005Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000005Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000005Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000005Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000005Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1473,10 +1473,10 @@ static inline uint64_t CVMX_PCIERCX_CFG028(unsigned long offset)
 				return 0x0000020000000070ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000070ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000070ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1506,10 +1506,10 @@ static inline uint64_t CVMX_PCIERCX_CFG028(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000070ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000070ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000070ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000070ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000070ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1537,10 +1537,10 @@ static inline uint64_t CVMX_PCIERCX_CFG029(unsigned long offset)
 				return 0x0000020000000074ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000074ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000074ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1570,10 +1570,10 @@ static inline uint64_t CVMX_PCIERCX_CFG029(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000074ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000074ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000074ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000074ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000074ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1601,10 +1601,10 @@ static inline uint64_t CVMX_PCIERCX_CFG030(unsigned long offset)
 				return 0x0000020000000078ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000078ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000078ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1634,10 +1634,10 @@ static inline uint64_t CVMX_PCIERCX_CFG030(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000078ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000078ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000078ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000078ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000078ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1665,10 +1665,10 @@ static inline uint64_t CVMX_PCIERCX_CFG031(unsigned long offset)
 				return 0x000002000000007Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000007Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000007Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1698,10 +1698,10 @@ static inline uint64_t CVMX_PCIERCX_CFG031(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000007Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000007Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000007Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000007Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000007Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1729,10 +1729,10 @@ static inline uint64_t CVMX_PCIERCX_CFG032(unsigned long offset)
 				return 0x0000020000000080ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000080ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000080ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1762,10 +1762,10 @@ static inline uint64_t CVMX_PCIERCX_CFG032(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000080ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000080ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000080ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000080ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000080ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1793,10 +1793,10 @@ static inline uint64_t CVMX_PCIERCX_CFG033(unsigned long offset)
 				return 0x0000020000000084ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000084ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000084ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1826,10 +1826,10 @@ static inline uint64_t CVMX_PCIERCX_CFG033(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000084ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000084ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000084ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000084ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000084ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1857,10 +1857,10 @@ static inline uint64_t CVMX_PCIERCX_CFG034(unsigned long offset)
 				return 0x0000020000000088ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000088ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000088ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1890,10 +1890,10 @@ static inline uint64_t CVMX_PCIERCX_CFG034(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000088ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000088ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000088ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000088ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000088ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1921,10 +1921,10 @@ static inline uint64_t CVMX_PCIERCX_CFG035(unsigned long offset)
 				return 0x000002000000008Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000008Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000008Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -1954,10 +1954,10 @@ static inline uint64_t CVMX_PCIERCX_CFG035(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000008Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000008Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000008Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000008Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000008Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -1985,10 +1985,10 @@ static inline uint64_t CVMX_PCIERCX_CFG036(unsigned long offset)
 				return 0x0000020000000090ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000090ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000090ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2018,10 +2018,10 @@ static inline uint64_t CVMX_PCIERCX_CFG036(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000090ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000090ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000090ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000090ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000090ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2049,10 +2049,10 @@ static inline uint64_t CVMX_PCIERCX_CFG037(unsigned long offset)
 				return 0x0000020000000094ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000094ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000094ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2082,10 +2082,10 @@ static inline uint64_t CVMX_PCIERCX_CFG037(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000094ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000094ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000094ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000094ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000094ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2113,10 +2113,10 @@ static inline uint64_t CVMX_PCIERCX_CFG038(unsigned long offset)
 				return 0x0000020000000098ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000098ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000098ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2146,10 +2146,10 @@ static inline uint64_t CVMX_PCIERCX_CFG038(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000098ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000098ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000098ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000098ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000098ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2177,10 +2177,10 @@ static inline uint64_t CVMX_PCIERCX_CFG039(unsigned long offset)
 				return 0x000002000000009Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000009Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000009Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2210,10 +2210,10 @@ static inline uint64_t CVMX_PCIERCX_CFG039(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000009Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000009Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000009Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000009Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000009Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2241,10 +2241,10 @@ static inline uint64_t CVMX_PCIERCX_CFG040(unsigned long offset)
 				return 0x00000200000000A0ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000200000000A0ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000200000000A0ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2274,10 +2274,10 @@ static inline uint64_t CVMX_PCIERCX_CFG040(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x00000200000000A0ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000200000000A0ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000200000000A0ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000200000000A0ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000200000000A0ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2305,10 +2305,10 @@ static inline uint64_t CVMX_PCIERCX_CFG041(unsigned long offset)
 				return 0x00000200000000A4ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000200000000A4ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000200000000A4ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2338,10 +2338,10 @@ static inline uint64_t CVMX_PCIERCX_CFG041(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x00000200000000A4ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000200000000A4ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000200000000A4ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000200000000A4ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000200000000A4ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2369,10 +2369,10 @@ static inline uint64_t CVMX_PCIERCX_CFG042(unsigned long offset)
 				return 0x00000200000000A8ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000200000000A8ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x00000200000000A8ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2402,10 +2402,10 @@ static inline uint64_t CVMX_PCIERCX_CFG042(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x00000200000000A8ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000200000000A8ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000200000000A8ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000200000000A8ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000200000000A8ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2475,10 +2475,10 @@ static inline uint64_t CVMX_PCIERCX_CFG064(unsigned long offset)
 				return 0x0000020000000100ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000100ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000100ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2508,10 +2508,10 @@ static inline uint64_t CVMX_PCIERCX_CFG064(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000100ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000100ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000100ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000100ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000100ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2539,10 +2539,10 @@ static inline uint64_t CVMX_PCIERCX_CFG065(unsigned long offset)
 				return 0x0000020000000104ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000104ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000104ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2572,10 +2572,10 @@ static inline uint64_t CVMX_PCIERCX_CFG065(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000104ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000104ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000104ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000104ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000104ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2603,10 +2603,10 @@ static inline uint64_t CVMX_PCIERCX_CFG066(unsigned long offset)
 				return 0x0000020000000108ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000108ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000108ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2636,10 +2636,10 @@ static inline uint64_t CVMX_PCIERCX_CFG066(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000108ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000108ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000108ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000108ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000108ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2667,10 +2667,10 @@ static inline uint64_t CVMX_PCIERCX_CFG067(unsigned long offset)
 				return 0x000002000000010Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000010Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000010Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2700,10 +2700,10 @@ static inline uint64_t CVMX_PCIERCX_CFG067(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000010Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000010Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000010Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000010Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000010Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2731,10 +2731,10 @@ static inline uint64_t CVMX_PCIERCX_CFG068(unsigned long offset)
 				return 0x0000020000000110ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000110ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000110ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2764,10 +2764,10 @@ static inline uint64_t CVMX_PCIERCX_CFG068(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000110ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000110ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000110ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000110ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000110ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2795,10 +2795,10 @@ static inline uint64_t CVMX_PCIERCX_CFG069(unsigned long offset)
 				return 0x0000020000000114ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000114ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000114ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2828,10 +2828,10 @@ static inline uint64_t CVMX_PCIERCX_CFG069(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000114ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000114ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000114ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000114ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000114ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2859,10 +2859,10 @@ static inline uint64_t CVMX_PCIERCX_CFG070(unsigned long offset)
 				return 0x0000020000000118ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000118ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000118ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2892,10 +2892,10 @@ static inline uint64_t CVMX_PCIERCX_CFG070(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000118ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000118ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000118ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000118ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000118ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2923,10 +2923,10 @@ static inline uint64_t CVMX_PCIERCX_CFG071(unsigned long offset)
 				return 0x000002000000011Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000011Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000011Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -2956,10 +2956,10 @@ static inline uint64_t CVMX_PCIERCX_CFG071(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000011Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000011Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000011Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000011Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000011Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -2987,10 +2987,10 @@ static inline uint64_t CVMX_PCIERCX_CFG072(unsigned long offset)
 				return 0x0000020000000120ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000120ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000120ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3020,10 +3020,10 @@ static inline uint64_t CVMX_PCIERCX_CFG072(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000120ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000120ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000120ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000120ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000120ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3051,10 +3051,10 @@ static inline uint64_t CVMX_PCIERCX_CFG073(unsigned long offset)
 				return 0x0000020000000124ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000124ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000124ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3084,10 +3084,10 @@ static inline uint64_t CVMX_PCIERCX_CFG073(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000124ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000124ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000124ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000124ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000124ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3115,10 +3115,10 @@ static inline uint64_t CVMX_PCIERCX_CFG074(unsigned long offset)
 				return 0x0000020000000128ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000128ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000128ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3148,10 +3148,10 @@ static inline uint64_t CVMX_PCIERCX_CFG074(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000128ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000128ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000128ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000128ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000128ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3179,10 +3179,10 @@ static inline uint64_t CVMX_PCIERCX_CFG075(unsigned long offset)
 				return 0x000002000000012Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000012Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000012Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3212,10 +3212,10 @@ static inline uint64_t CVMX_PCIERCX_CFG075(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000012Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000012Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000012Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000012Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000012Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3243,10 +3243,10 @@ static inline uint64_t CVMX_PCIERCX_CFG076(unsigned long offset)
 				return 0x0000020000000130ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000130ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000130ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3276,10 +3276,10 @@ static inline uint64_t CVMX_PCIERCX_CFG076(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000130ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000130ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000130ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000130ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000130ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3307,10 +3307,10 @@ static inline uint64_t CVMX_PCIERCX_CFG077(unsigned long offset)
 				return 0x0000020000000134ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000134ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000134ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3340,10 +3340,10 @@ static inline uint64_t CVMX_PCIERCX_CFG077(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000134ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000134ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000134ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000134ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000134ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3469,10 +3469,10 @@ static inline uint64_t CVMX_PCIERCX_CFG448(unsigned long offset)
 				return 0x0000020000000700ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000700ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000700ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3502,10 +3502,10 @@ static inline uint64_t CVMX_PCIERCX_CFG448(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000700ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000700ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000700ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000700ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000700ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3533,10 +3533,10 @@ static inline uint64_t CVMX_PCIERCX_CFG449(unsigned long offset)
 				return 0x0000020000000704ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000704ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000704ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3566,10 +3566,10 @@ static inline uint64_t CVMX_PCIERCX_CFG449(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000704ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000704ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000704ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000704ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000704ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3597,10 +3597,10 @@ static inline uint64_t CVMX_PCIERCX_CFG450(unsigned long offset)
 				return 0x0000020000000708ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000708ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000708ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3630,10 +3630,10 @@ static inline uint64_t CVMX_PCIERCX_CFG450(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000708ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000708ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000708ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000708ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000708ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3661,10 +3661,10 @@ static inline uint64_t CVMX_PCIERCX_CFG451(unsigned long offset)
 				return 0x000002000000070Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000070Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000070Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3694,10 +3694,10 @@ static inline uint64_t CVMX_PCIERCX_CFG451(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000070Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000070Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000070Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000070Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000070Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3725,10 +3725,10 @@ static inline uint64_t CVMX_PCIERCX_CFG452(unsigned long offset)
 				return 0x0000020000000710ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000710ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000710ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3758,10 +3758,10 @@ static inline uint64_t CVMX_PCIERCX_CFG452(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000710ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000710ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000710ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000710ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000710ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3789,10 +3789,10 @@ static inline uint64_t CVMX_PCIERCX_CFG453(unsigned long offset)
 				return 0x0000020000000714ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000714ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000714ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3822,10 +3822,10 @@ static inline uint64_t CVMX_PCIERCX_CFG453(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000714ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000714ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000714ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000714ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000714ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3853,10 +3853,10 @@ static inline uint64_t CVMX_PCIERCX_CFG454(unsigned long offset)
 				return 0x0000020000000718ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000718ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000718ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3886,10 +3886,10 @@ static inline uint64_t CVMX_PCIERCX_CFG454(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000718ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000718ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000718ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000718ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000718ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3917,10 +3917,10 @@ static inline uint64_t CVMX_PCIERCX_CFG455(unsigned long offset)
 				return 0x000002000000071Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000071Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000071Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -3950,10 +3950,10 @@ static inline uint64_t CVMX_PCIERCX_CFG455(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000071Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000071Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000071Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000071Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000071Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -3981,10 +3981,10 @@ static inline uint64_t CVMX_PCIERCX_CFG456(unsigned long offset)
 				return 0x0000020000000720ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000720ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000720ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4014,10 +4014,10 @@ static inline uint64_t CVMX_PCIERCX_CFG456(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000720ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000720ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000720ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000720ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000720ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4045,10 +4045,10 @@ static inline uint64_t CVMX_PCIERCX_CFG458(unsigned long offset)
 				return 0x0000020000000728ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000728ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000728ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4078,10 +4078,10 @@ static inline uint64_t CVMX_PCIERCX_CFG458(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000728ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000728ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000728ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000728ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000728ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4109,10 +4109,10 @@ static inline uint64_t CVMX_PCIERCX_CFG459(unsigned long offset)
 				return 0x000002000000072Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000072Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000072Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4142,10 +4142,10 @@ static inline uint64_t CVMX_PCIERCX_CFG459(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000072Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000072Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000072Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000072Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000072Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4173,10 +4173,10 @@ static inline uint64_t CVMX_PCIERCX_CFG460(unsigned long offset)
 				return 0x0000020000000730ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000730ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000730ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4206,10 +4206,10 @@ static inline uint64_t CVMX_PCIERCX_CFG460(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000730ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000730ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000730ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000730ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000730ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4237,10 +4237,10 @@ static inline uint64_t CVMX_PCIERCX_CFG461(unsigned long offset)
 				return 0x0000020000000734ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000734ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000734ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4270,10 +4270,10 @@ static inline uint64_t CVMX_PCIERCX_CFG461(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000734ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000734ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000734ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000734ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000734ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4301,10 +4301,10 @@ static inline uint64_t CVMX_PCIERCX_CFG462(unsigned long offset)
 				return 0x0000020000000738ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000738ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000738ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4334,10 +4334,10 @@ static inline uint64_t CVMX_PCIERCX_CFG462(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000738ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000738ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000738ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000738ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000738ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4365,10 +4365,10 @@ static inline uint64_t CVMX_PCIERCX_CFG463(unsigned long offset)
 				return 0x000002000000073Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000073Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000073Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4398,10 +4398,10 @@ static inline uint64_t CVMX_PCIERCX_CFG463(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000073Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000073Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000073Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000073Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000073Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4429,10 +4429,10 @@ static inline uint64_t CVMX_PCIERCX_CFG464(unsigned long offset)
 				return 0x0000020000000740ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000740ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000740ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4462,10 +4462,10 @@ static inline uint64_t CVMX_PCIERCX_CFG464(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000740ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000740ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000740ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000740ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000740ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4493,10 +4493,10 @@ static inline uint64_t CVMX_PCIERCX_CFG465(unsigned long offset)
 				return 0x0000020000000744ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000744ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000744ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4526,10 +4526,10 @@ static inline uint64_t CVMX_PCIERCX_CFG465(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000744ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000744ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000744ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000744ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000744ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4557,10 +4557,10 @@ static inline uint64_t CVMX_PCIERCX_CFG466(unsigned long offset)
 				return 0x0000020000000748ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000748ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000748ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4590,10 +4590,10 @@ static inline uint64_t CVMX_PCIERCX_CFG466(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000748ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000748ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000748ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000748ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000748ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4621,10 +4621,10 @@ static inline uint64_t CVMX_PCIERCX_CFG467(unsigned long offset)
 				return 0x000002000000074Cull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000074Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000074Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4654,10 +4654,10 @@ static inline uint64_t CVMX_PCIERCX_CFG467(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000074Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000074Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000074Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000074Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000074Cull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4685,10 +4685,10 @@ static inline uint64_t CVMX_PCIERCX_CFG468(unsigned long offset)
 				return 0x0000020000000750ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000750ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000750ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4718,10 +4718,10 @@ static inline uint64_t CVMX_PCIERCX_CFG468(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000750ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000750ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000750ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000750ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000750ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4869,10 +4869,10 @@ static inline uint64_t CVMX_PCIERCX_CFG515(unsigned long offset)
 				return 0x000002000000080Cull + ((offset) & 1) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x000002000000080Cull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x000002000000080Cull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4900,10 +4900,10 @@ static inline uint64_t CVMX_PCIERCX_CFG515(unsigned long offset)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000080Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x000002000000080Cull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x000002000000080Cull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x000002000000080Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x000002000000080Cull + (offset) * 0x100000000ull;
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
@@ -4929,10 +4929,10 @@ static inline uint64_t CVMX_PCIERCX_CFG516(unsigned long offset)
 				return 0x0000020000000810ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000810ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000810ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -4962,10 +4962,10 @@ static inline uint64_t CVMX_PCIERCX_CFG516(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000810ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000810ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000810ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000810ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000810ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
@@ -4993,10 +4993,10 @@ static inline uint64_t CVMX_PCIERCX_CFG517(unsigned long offset)
 				return 0x0000020000000814ull + ((offset) & 3) * 0x100000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000020000000814ull + ((offset) & 3) * 0x100000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return 0x0000020000000814ull + ((offset) & 3) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -5026,10 +5026,10 @@ static inline uint64_t CVMX_PCIERCX_CFG517(unsigned long offset)
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000814ull + (offset) * 0x100000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000020000000814ull + (offset) * 0x100000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000020000000814ull + (offset) * 0x100000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000020000000814ull + (offset) * 0x100000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000020000000814ull + (offset) * 0x100000000ull;
 		case OCTEON_CNF71XX & OCTEON_FAMILY_MASK:
diff --git a/arch/mips/include/asm/octeon/cvmx-pemx-defs.h b/arch/mips/include/asm/octeon/cvmx-pemx-defs.h
index b8fb33b62391..47dbdb4ba0f0 100644
--- a/arch/mips/include/asm/octeon/cvmx-pemx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pemx-defs.h
@@ -65,10 +65,10 @@ static inline uint64_t CVMX_PEMX_BAR1_INDEXX(unsigned long offset, unsigned long
 				return CVMX_ADD_IO_SEG(0x00011800C0000100ull) + (((offset) & 15) + ((block_id) & 1) * 0x200000ull) * 8;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if (((offset <= 15)) && ((block_id <= 3)))
 					return CVMX_ADD_IO_SEG(0x00011800C0000100ull) + (((offset) & 15) + ((block_id) & 3) * 0x200000ull) * 8;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if (((offset <= 15)) && ((block_id <= 3)))
 					return CVMX_ADD_IO_SEG(0x00011800C0000100ull) + (((offset) & 15) + ((block_id) & 3) * 0x200000ull) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -96,10 +96,10 @@ static inline uint64_t CVMX_PEMX_BAR1_INDEXX(unsigned long offset, unsigned long
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C0000100ull) + ((offset) + (block_id) * 0x200000ull) * 8;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800C0000100ull) + ((offset) + (block_id) * 0x200000ull) * 8;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800C0000100ull) + ((offset) + (block_id) * 0x200000ull) * 8;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800C0000100ull) + ((offset) + (block_id) * 0x200000ull) * 8;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C0000100ull) + ((offset) + (block_id) * 0x200000ull) * 8;
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
@@ -125,10 +125,10 @@ static inline uint64_t CVMX_PEMX_BAR2_MASK(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x00011800C00000B0ull) + ((offset) & 1) * 0x1000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C00000B0ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C00000B0ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -155,10 +155,10 @@ static inline uint64_t CVMX_PEMX_BAR2_MASK(unsigned long offset)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C00000B0ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800C00000B0ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800C00000B0ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800C00000B0ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C10000B0ull) + (offset) * 0x1000000ull - 16777216*1;
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
@@ -183,10 +183,10 @@ static inline uint64_t CVMX_PEMX_BAR_CTL(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x00011800C00000A8ull) + ((offset) & 1) * 0x1000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C00000A8ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C00000A8ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -214,10 +214,10 @@ static inline uint64_t CVMX_PEMX_BAR_CTL(unsigned long offset)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C00000A8ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800C00000A8ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800C00000A8ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800C00000A8ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C10000A8ull) + (offset) * 0x1000000ull - 16777216*1;
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
@@ -251,10 +251,10 @@ static inline uint64_t CVMX_PEMX_BIST_STATUS(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x00011800C0000440ull) + ((offset) & 1) * 0x1000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C0000440ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C0000440ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -280,10 +280,10 @@ static inline uint64_t CVMX_PEMX_BIST_STATUS(unsigned long offset)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C0000440ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800C0000440ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800C0000440ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800C0000440ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C1000440ull) + (offset) * 0x1000000ull - 16777216*1;
 	}
@@ -463,10 +463,10 @@ static inline uint64_t CVMX_PEMX_DBG_INFO(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x00011800C00000D0ull) + ((offset) & 1) * 0x1000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C00000D0ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C00000D0ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -494,10 +494,10 @@ static inline uint64_t CVMX_PEMX_DBG_INFO(unsigned long offset)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C00000D0ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800C00000D0ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800C00000D0ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800C00000D0ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C10000D0ull) + (offset) * 0x1000000ull - 16777216*1;
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
@@ -555,10 +555,10 @@ static inline uint64_t CVMX_PEMX_ECC_ENA(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x00011800C0000448ull) + ((offset) & 1) * 0x1000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C0000448ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C0000448ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -580,10 +580,10 @@ static inline uint64_t CVMX_PEMX_ECC_ENA(unsigned long offset)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C0000448ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800C0000448ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800C0000448ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800C0000448ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C1000448ull) + (offset) * 0x1000000ull - 16777216*1;
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -601,10 +601,10 @@ static inline uint64_t CVMX_PEMX_ECC_SYND_CTRL(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x00011800C0000450ull) + ((offset) & 1) * 0x1000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C0000450ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C0000450ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -626,10 +626,10 @@ static inline uint64_t CVMX_PEMX_ECC_SYND_CTRL(unsigned long offset)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C0000450ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800C0000450ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800C0000450ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800C0000450ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C1000450ull) + (offset) * 0x1000000ull - 16777216*1;
 		case OCTEON_CN70XX & OCTEON_FAMILY_MASK:
@@ -728,10 +728,10 @@ static inline uint64_t CVMX_PEMX_INB_READ_CREDITS(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x00011800C00000B8ull) + ((offset) & 1) * 0x1000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C00000B8ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C00000B8ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -758,10 +758,10 @@ static inline uint64_t CVMX_PEMX_INB_READ_CREDITS(unsigned long offset)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C00000B8ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800C00000B8ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800C00000B8ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800C00000B8ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C10000B8ull) + (offset) * 0x1000000ull - 16777216*1;
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
@@ -858,10 +858,10 @@ static inline uint64_t CVMX_PEMX_INT_SUM(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x00011800C0000428ull) + ((offset) & 1) * 0x1000000ull;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C0000428ull) + ((offset) & 3) * 0x1000000ull;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011800C0000428ull) + ((offset) & 3) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
@@ -889,10 +889,10 @@ static inline uint64_t CVMX_PEMX_INT_SUM(unsigned long offset)
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C0000428ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011800C0000428ull) + (offset) * 0x1000000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011800C0000428ull) + (offset) * 0x1000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011800C0000428ull) + (offset) * 0x1000000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011800C1000428ull) + (offset) * 0x1000000ull - 16777216*1;
 		case OCTEON_CN66XX & OCTEON_FAMILY_MASK:
diff --git a/arch/mips/include/asm/octeon/cvmx-pexp-defs.h b/arch/mips/include/asm/octeon/cvmx-pexp-defs.h
index 16b9fd5e798e..bbcc146f04cc 100644
--- a/arch/mips/include/asm/octeon/cvmx-pexp-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-pexp-defs.h
@@ -1458,10 +1458,10 @@ static inline uint64_t CVMX_PEXP_SLI_BIST_STATUS_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000028580ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000010580ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000028580ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028580ull);
 			break;
@@ -1483,10 +1483,10 @@ static inline uint64_t CVMX_PEXP_SLI_BIST_STATUS_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000010580ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000028580ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000010580ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000028580ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028580ull);
 	}
@@ -1516,12 +1516,12 @@ static inline uint64_t CVMX_PEXP_SLI_CTL_PORTX(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 3))
-					return CVMX_ADD_IO_SEG(0x00011F00000286E0ull) + ((offset) & 3) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011F00000106E0ull) + ((offset) & 3) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 3))
+					return CVMX_ADD_IO_SEG(0x00011F00000286E0ull) + ((offset) & 3) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 3))
 				return CVMX_ADD_IO_SEG(0x00011F00000286E0ull) + ((offset) & 3) * 16;
@@ -1546,10 +1546,10 @@ static inline uint64_t CVMX_PEXP_SLI_CTL_PORTX(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000286E0ull) + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F00000106E0ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000286E0ull) + (offset) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000286E0ull) + (offset) * 16;
 	}
@@ -1571,10 +1571,10 @@ static inline uint64_t CVMX_PEXP_SLI_CTL_STATUS_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000028570ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000010570ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000028570ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028570ull);
 			break;
@@ -1596,10 +1596,10 @@ static inline uint64_t CVMX_PEXP_SLI_CTL_STATUS_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000010570ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000028570ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000010570ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000028570ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028570ull);
 	}
@@ -1621,10 +1621,10 @@ static inline uint64_t CVMX_PEXP_SLI_DATA_OUT_CNT_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F00000285F0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F00000105F0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F00000285F0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000285F0ull);
 			break;
@@ -1646,10 +1646,10 @@ static inline uint64_t CVMX_PEXP_SLI_DATA_OUT_CNT_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F00000105F0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000285F0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F00000105F0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000285F0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000285F0ull);
 	}
@@ -1693,12 +1693,12 @@ static inline uint64_t CVMX_PEXP_SLI_DMAX_CNT(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 1))
-					return CVMX_ADD_IO_SEG(0x00011F0000028400ull) + ((offset) & 1) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011F0000010400ull) + ((offset) & 1) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 1))
+					return CVMX_ADD_IO_SEG(0x00011F0000028400ull) + ((offset) & 1) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 1))
 				return CVMX_ADD_IO_SEG(0x00011F0000028400ull) + ((offset) & 1) * 16;
@@ -1720,10 +1720,10 @@ static inline uint64_t CVMX_PEXP_SLI_DMAX_CNT(unsigned long offset)
 			return CVMX_ADD_IO_SEG(0x00011F0000010400ull) + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000028400ull) + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000010400ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000028400ull) + (offset) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028400ull) + (offset) * 16;
 	}
@@ -1745,12 +1745,12 @@ static inline uint64_t CVMX_PEXP_SLI_DMAX_INT_LEVEL(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 1))
-					return CVMX_ADD_IO_SEG(0x00011F00000283E0ull) + ((offset) & 1) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011F00000103E0ull) + ((offset) & 1) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 1))
+					return CVMX_ADD_IO_SEG(0x00011F00000283E0ull) + ((offset) & 1) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 1))
 				return CVMX_ADD_IO_SEG(0x00011F00000283E0ull) + ((offset) & 1) * 16;
@@ -1772,10 +1772,10 @@ static inline uint64_t CVMX_PEXP_SLI_DMAX_INT_LEVEL(unsigned long offset)
 			return CVMX_ADD_IO_SEG(0x00011F00000103E0ull) + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000283E0ull) + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F00000103E0ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000283E0ull) + (offset) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000283E0ull) + (offset) * 16;
 	}
@@ -1797,12 +1797,12 @@ static inline uint64_t CVMX_PEXP_SLI_DMAX_TIM(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 1))
-					return CVMX_ADD_IO_SEG(0x00011F0000028420ull) + ((offset) & 1) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return CVMX_ADD_IO_SEG(0x00011F0000010420ull) + ((offset) & 1) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 1))
+					return CVMX_ADD_IO_SEG(0x00011F0000028420ull) + ((offset) & 1) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 1))
 				return CVMX_ADD_IO_SEG(0x00011F0000028420ull) + ((offset) & 1) * 16;
@@ -1824,10 +1824,10 @@ static inline uint64_t CVMX_PEXP_SLI_DMAX_TIM(unsigned long offset)
 			return CVMX_ADD_IO_SEG(0x00011F0000010420ull) + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000028420ull) + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000010420ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000028420ull) + (offset) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028420ull) + (offset) * 16;
 	}
@@ -2062,10 +2062,10 @@ static inline uint64_t CVMX_PEXP_SLI_MAC_CREDIT_CNT_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000023D70ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000013D70ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000023D70ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023D70ull);
 			break;
@@ -2087,10 +2087,10 @@ static inline uint64_t CVMX_PEXP_SLI_MAC_CREDIT_CNT_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000013D70ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000023D70ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000013D70ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000023D70ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023D70ull);
 	}
@@ -2110,10 +2110,10 @@ static inline uint64_t CVMX_PEXP_SLI_MAC_CREDIT_CNT2_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000023E10ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000013E10ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000023E10ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023E10ull);
 			break;
@@ -2133,10 +2133,10 @@ static inline uint64_t CVMX_PEXP_SLI_MAC_CREDIT_CNT2_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000013E10ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000023E10ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000013E10ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000023E10ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023E10ull);
 	}
@@ -2158,10 +2158,10 @@ static inline uint64_t CVMX_PEXP_SLI_MEM_ACCESS_CTL_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F00000282F0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F00000102F0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F00000282F0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000282F0ull);
 			break;
@@ -2183,10 +2183,10 @@ static inline uint64_t CVMX_PEXP_SLI_MEM_ACCESS_CTL_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F00000102F0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000282F0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F00000102F0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000282F0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000282F0ull);
 	}
@@ -2208,12 +2208,12 @@ static inline uint64_t CVMX_PEXP_SLI_MEM_ACCESS_SUBIDX(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if (((offset >= 12) && (offset <= 27)))
-					return CVMX_ADD_IO_SEG(0x00011F00000280E0ull) + ((offset) & 31) * 16 - 16*12;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if (((offset >= 12) && (offset <= 27)))
 					return CVMX_ADD_IO_SEG(0x00011F00000100E0ull) + ((offset) & 31) * 16 - 16*12;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if (((offset >= 12) && (offset <= 27)))
+					return CVMX_ADD_IO_SEG(0x00011F00000280E0ull) + ((offset) & 31) * 16 - 16*12;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if (((offset >= 12) && (offset <= 27)))
 				return CVMX_ADD_IO_SEG(0x00011F00000280E0ull) + ((offset) & 31) * 16 - 16*12;
@@ -2235,10 +2235,10 @@ static inline uint64_t CVMX_PEXP_SLI_MEM_ACCESS_SUBIDX(unsigned long offset)
 			return CVMX_ADD_IO_SEG(0x00011F00000100E0ull) + (offset) * 16 - 16*12;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000280E0ull) + (offset) * 16 - 16*12;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F00000100E0ull) + (offset) * 16 - 16*12;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000280E0ull) + (offset) * 16 - 16*12;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000280E0ull) + (offset) * 16 - 16*12;
 	}
@@ -2251,10 +2251,10 @@ static inline uint64_t CVMX_PEXP_SLI_MEM_CTL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F00000285E0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F00000105E0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F00000285E0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000285E0ull);
@@ -2271,10 +2271,10 @@ static inline uint64_t CVMX_PEXP_SLI_MEM_CTL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000285E0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F00000105E0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000285E0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000285E0ull);
@@ -2289,10 +2289,10 @@ static inline uint64_t CVMX_PEXP_SLI_MEM_INT_SUM_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F00000285D0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F00000105D0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F00000285D0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000285D0ull);
@@ -2309,10 +2309,10 @@ static inline uint64_t CVMX_PEXP_SLI_MEM_INT_SUM_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000285D0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F00000105D0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000285D0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000285D0ull);
@@ -2326,12 +2326,12 @@ static inline uint64_t CVMX_PEXP_SLI_MSIXX_TABLE_ADDR(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 64))
-					return CVMX_ADD_IO_SEG(0x00011F0000000000ull) + ((offset) & 127) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 64))
 					return CVMX_ADD_IO_SEG(0x00011F0000016000ull) + ((offset) & 127) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 64))
+					return CVMX_ADD_IO_SEG(0x00011F0000000000ull) + ((offset) & 127) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 64))
@@ -2348,10 +2348,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSIXX_TABLE_ADDR(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000000000ull) + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000016000ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000000000ull) + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000000000ull) + (offset) * 16;
@@ -2365,12 +2365,12 @@ static inline uint64_t CVMX_PEXP_SLI_MSIXX_TABLE_DATA(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 64))
-					return CVMX_ADD_IO_SEG(0x00011F0000000008ull) + ((offset) & 127) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 64))
 					return CVMX_ADD_IO_SEG(0x00011F0000016008ull) + ((offset) & 127) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 64))
+					return CVMX_ADD_IO_SEG(0x00011F0000000008ull) + ((offset) & 127) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 64))
@@ -2387,10 +2387,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSIXX_TABLE_DATA(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000000008ull) + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000016008ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000000008ull) + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000000008ull) + (offset) * 16;
@@ -2427,10 +2427,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSIX_PBA0_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000001000ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000017000ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000001000ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000001000ull);
@@ -2447,10 +2447,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSIX_PBA0_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000001000ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000017000ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000001000ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000001000ull);
@@ -2465,10 +2465,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSIX_PBA1_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000001008ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000017010ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000001008ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000001008ull);
@@ -2485,10 +2485,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSIX_PBA1_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000001008ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000017010ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000001008ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000001008ull);
@@ -2556,10 +2556,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_RCV0_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000023C10ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000013C10ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000023C10ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023C10ull);
 			break;
@@ -2581,10 +2581,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_RCV0_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000013C10ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000023C10ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000013C10ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000023C10ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023C10ull);
 	}
@@ -2606,10 +2606,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_RCV1_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000023C20ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000013C20ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000023C20ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023C20ull);
 			break;
@@ -2631,10 +2631,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_RCV1_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000013C20ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000023C20ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000013C20ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000023C20ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023C20ull);
 	}
@@ -2656,10 +2656,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_RCV2_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000023C30ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000013C30ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000023C30ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023C30ull);
 			break;
@@ -2681,10 +2681,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_RCV2_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000013C30ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000023C30ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000013C30ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000023C30ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023C30ull);
 	}
@@ -2706,10 +2706,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_RCV3_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000023C40ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000013C40ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000023C40ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023C40ull);
 			break;
@@ -2731,10 +2731,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_RCV3_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000013C40ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000023C40ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000013C40ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000023C40ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023C40ull);
 	}
@@ -2756,10 +2756,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_RD_MAP_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000023CA0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000013CA0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000023CA0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023CA0ull);
 			break;
@@ -2781,10 +2781,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_RD_MAP_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000013CA0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000023CA0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000013CA0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000023CA0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023CA0ull);
 	}
@@ -2894,10 +2894,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_WR_MAP_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000023C90ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000013C90ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000023C90ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023C90ull);
 			break;
@@ -2919,10 +2919,10 @@ static inline uint64_t CVMX_PEXP_SLI_MSI_WR_MAP_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000013C90ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000023C90ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000013C90ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000023C90ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023C90ull);
 	}
@@ -2944,10 +2944,10 @@ static inline uint64_t CVMX_PEXP_SLI_PCIE_MSI_RCV_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000023CB0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000013CB0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000023CB0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023CB0ull);
 			break;
@@ -2969,10 +2969,10 @@ static inline uint64_t CVMX_PEXP_SLI_PCIE_MSI_RCV_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000013CB0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000023CB0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000013CB0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000023CB0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023CB0ull);
 	}
@@ -2994,10 +2994,10 @@ static inline uint64_t CVMX_PEXP_SLI_PCIE_MSI_RCV_B1_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000028650ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000010650ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000028650ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028650ull);
 			break;
@@ -3019,10 +3019,10 @@ static inline uint64_t CVMX_PEXP_SLI_PCIE_MSI_RCV_B1_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000010650ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000028650ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000010650ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000028650ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028650ull);
 	}
@@ -3044,10 +3044,10 @@ static inline uint64_t CVMX_PEXP_SLI_PCIE_MSI_RCV_B2_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000028660ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000010660ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000028660ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028660ull);
 			break;
@@ -3069,10 +3069,10 @@ static inline uint64_t CVMX_PEXP_SLI_PCIE_MSI_RCV_B2_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000010660ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000028660ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000010660ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000028660ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028660ull);
 	}
@@ -3094,10 +3094,10 @@ static inline uint64_t CVMX_PEXP_SLI_PCIE_MSI_RCV_B3_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000028670ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000010670ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000028670ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028670ull);
 			break;
@@ -3119,10 +3119,10 @@ static inline uint64_t CVMX_PEXP_SLI_PCIE_MSI_RCV_B3_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000010670ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000028670ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000010670ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000028670ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028670ull);
 	}
@@ -3146,12 +3146,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_CNTS(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F00000100B0ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000012400ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F00000100B0ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return CVMX_ADD_IO_SEG(0x00011F00000100B0ull) + ((offset) & 63) * 0x20000ull;
@@ -3174,10 +3174,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_CNTS(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000100B0ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000012400ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000100B0ull) + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000100B0ull) + (offset) * 0x20000ull;
 	}
@@ -3202,12 +3202,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_INPUT_CONTROL(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F0000010000ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000014000ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F0000010000ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
@@ -3224,10 +3224,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_INPUT_CONTROL(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000010000ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000014000ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000010000ull) + (offset) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000010000ull) + (offset) * 0x20000ull;
@@ -3253,12 +3253,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_INSTR_BADDR(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F0000010010ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000012800ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F0000010010ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return CVMX_ADD_IO_SEG(0x00011F0000010010ull) + ((offset) & 63) * 0x20000ull;
@@ -3281,10 +3281,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_INSTR_BADDR(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000010010ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000012800ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000010010ull) + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000010010ull) + (offset) * 0x20000ull;
 	}
@@ -3308,12 +3308,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_INSTR_BAOFF_DBELL(unsigned long offset
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F0000010020ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000012C00ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F0000010020ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return CVMX_ADD_IO_SEG(0x00011F0000010020ull) + ((offset) & 63) * 0x20000ull;
@@ -3336,10 +3336,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_INSTR_BAOFF_DBELL(unsigned long offset
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000010020ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000012C00ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000010020ull) + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000010020ull) + (offset) * 0x20000ull;
 	}
@@ -3363,12 +3363,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_INSTR_FIFO_RSIZE(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F0000010030ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000013000ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F0000010030ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return CVMX_ADD_IO_SEG(0x00011F0000010030ull) + ((offset) & 63) * 0x20000ull;
@@ -3391,10 +3391,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_INSTR_FIFO_RSIZE(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000010030ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000013000ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000010030ull) + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000010030ull) + (offset) * 0x20000ull;
 	}
@@ -3422,12 +3422,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_INT_LEVELS(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F00000100A0ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000014400ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F00000100A0ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
@@ -3444,10 +3444,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_INT_LEVELS(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000100A0ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000014400ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000100A0ull) + (offset) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000100A0ull) + (offset) * 0x20000ull;
@@ -3489,12 +3489,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_OUTPUT_CONTROL(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F0000010050ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000014800ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F0000010050ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
@@ -3511,10 +3511,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_OUTPUT_CONTROL(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000010050ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000014800ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000010050ull) + (offset) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000010050ull) + (offset) * 0x20000ull;
@@ -3540,12 +3540,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_OUT_SIZE(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F0000010060ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000010C00ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F0000010060ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return CVMX_ADD_IO_SEG(0x00011F0000010060ull) + ((offset) & 63) * 0x20000ull;
@@ -3568,10 +3568,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_OUT_SIZE(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000010060ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000010C00ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000010060ull) + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000010060ull) + (offset) * 0x20000ull;
 	}
@@ -3608,12 +3608,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_SLIST_BADDR(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F0000010070ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000011400ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F0000010070ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return CVMX_ADD_IO_SEG(0x00011F0000010070ull) + ((offset) & 63) * 0x20000ull;
@@ -3636,10 +3636,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_SLIST_BADDR(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000010070ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000011400ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000010070ull) + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000010070ull) + (offset) * 0x20000ull;
 	}
@@ -3663,12 +3663,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_SLIST_BAOFF_DBELL(unsigned long offset
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F0000010080ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000011800ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F0000010080ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return CVMX_ADD_IO_SEG(0x00011F0000010080ull) + ((offset) & 63) * 0x20000ull;
@@ -3691,10 +3691,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_SLIST_BAOFF_DBELL(unsigned long offset
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000010080ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000011800ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000010080ull) + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000010080ull) + (offset) * 0x20000ull;
 	}
@@ -3718,12 +3718,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_SLIST_FIFO_RSIZE(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F0000010090ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000011C00ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F0000010090ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return CVMX_ADD_IO_SEG(0x00011F0000010090ull) + ((offset) & 63) * 0x20000ull;
@@ -3746,10 +3746,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKTX_SLIST_FIFO_RSIZE(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000010090ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000011C00ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000010090ull) + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000010090ull) + (offset) * 0x20000ull;
 	}
@@ -3806,10 +3806,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_CNT_INT_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000029130ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000011130ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000029130ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029130ull);
 			break;
@@ -3831,10 +3831,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_CNT_INT_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000011130ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000029130ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000011130ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000029130ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029130ull);
 	}
@@ -3968,10 +3968,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_INT_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000029160ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000011160ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000029160ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029160ull);
@@ -3988,10 +3988,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_INT_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000029160ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000011160ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000029160ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029160ull);
@@ -4039,12 +4039,12 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_IN_DONEX_CNTS(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return CVMX_ADD_IO_SEG(0x00011F0000010040ull) + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return CVMX_ADD_IO_SEG(0x00011F0000012000ull) + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return CVMX_ADD_IO_SEG(0x00011F0000010040ull) + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return CVMX_ADD_IO_SEG(0x00011F0000010040ull) + ((offset) & 63) * 0x20000ull;
@@ -4067,10 +4067,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_IN_DONEX_CNTS(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000010040ull) + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000012000ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000010040ull) + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000010040ull) + (offset) * 0x20000ull;
 	}
@@ -4092,10 +4092,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_IN_INSTR_COUNTS_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000029200ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000011200ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000029200ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029200ull);
 			break;
@@ -4117,10 +4117,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_IN_INSTR_COUNTS_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000011200ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000029200ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000011200ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000029200ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029200ull);
 	}
@@ -4133,10 +4133,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_IN_INT_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000029150ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000011150ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000029150ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029150ull);
@@ -4153,10 +4153,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_IN_INT_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000029150ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000011150ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000029150ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029150ull);
@@ -4272,10 +4272,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_MEM_CTL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000029120ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000011120ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000029120ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029120ull);
@@ -4292,10 +4292,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_MEM_CTL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000029120ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000011120ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000029120ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029120ull);
@@ -4319,10 +4319,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_OUTPUT_WMARK_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000029180ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000011180ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000029180ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029180ull);
 			break;
@@ -4344,10 +4344,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_OUTPUT_WMARK_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000011180ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000029180ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000011180ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000029180ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029180ull);
 	}
@@ -4470,10 +4470,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_RING_RST_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F00000291E0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F00000111E0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F00000291E0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000291E0ull);
@@ -4490,10 +4490,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_RING_RST_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000291E0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F00000111E0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000291E0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000291E0ull);
@@ -4550,10 +4550,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_TIME_INT_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000029140ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000011140ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000029140ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029140ull);
 			break;
@@ -4575,10 +4575,10 @@ static inline uint64_t CVMX_PEXP_SLI_PKT_TIME_INT_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000011140ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000029140ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000011140ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000029140ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000029140ull);
 	}
@@ -4628,12 +4628,12 @@ static inline uint64_t CVMX_PEXP_SLI_S2M_PORTX_CTL(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 3))
-					return CVMX_ADD_IO_SEG(0x00011F0000023D80ull) + ((offset) & 3) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x00011F0000013D80ull) + ((offset) & 3) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 3))
+					return CVMX_ADD_IO_SEG(0x00011F0000023D80ull) + ((offset) & 3) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 3))
 				return CVMX_ADD_IO_SEG(0x00011F0000023D80ull) + ((offset) & 3) * 16;
@@ -4657,10 +4657,10 @@ static inline uint64_t CVMX_PEXP_SLI_S2M_PORTX_CTL(unsigned long offset)
 			return CVMX_ADD_IO_SEG(0x00011F0000013D80ull) + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000023D80ull) + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000013D80ull) + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000023D80ull) + (offset) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000023D80ull) + (offset) * 16;
 	}
@@ -4682,10 +4682,10 @@ static inline uint64_t CVMX_PEXP_SLI_SCRATCH_1_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F00000283C0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F00000103C0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F00000283C0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000283C0ull);
 			break;
@@ -4707,10 +4707,10 @@ static inline uint64_t CVMX_PEXP_SLI_SCRATCH_1_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F00000103C0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000283C0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F00000103C0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000283C0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000283C0ull);
 	}
@@ -4732,10 +4732,10 @@ static inline uint64_t CVMX_PEXP_SLI_SCRATCH_2_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F00000283D0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F00000103D0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F00000283D0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000283D0ull);
 			break;
@@ -4757,10 +4757,10 @@ static inline uint64_t CVMX_PEXP_SLI_SCRATCH_2_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F00000103D0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000283D0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F00000103D0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000283D0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000283D0ull);
 	}
@@ -4782,10 +4782,10 @@ static inline uint64_t CVMX_PEXP_SLI_STATE1_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000028620ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000010620ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000028620ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028620ull);
 			break;
@@ -4807,10 +4807,10 @@ static inline uint64_t CVMX_PEXP_SLI_STATE1_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000010620ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000028620ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000010620ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000028620ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028620ull);
 	}
@@ -4832,10 +4832,10 @@ static inline uint64_t CVMX_PEXP_SLI_STATE2_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000028630ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000010630ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000028630ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028630ull);
 			break;
@@ -4857,10 +4857,10 @@ static inline uint64_t CVMX_PEXP_SLI_STATE2_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000010630ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000028630ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000010630ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000028630ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028630ull);
 	}
@@ -4882,10 +4882,10 @@ static inline uint64_t CVMX_PEXP_SLI_STATE3_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000028640ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000010640ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000028640ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028640ull);
 			break;
@@ -4907,10 +4907,10 @@ static inline uint64_t CVMX_PEXP_SLI_STATE3_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F0000010640ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000028640ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000010640ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000028640ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000028640ull);
 	}
@@ -4943,10 +4943,10 @@ static inline uint64_t CVMX_PEXP_SLI_WINDOW_CTL_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F00000282E0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F00000102E0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F00000282E0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000282E0ull);
 			break;
@@ -4968,10 +4968,10 @@ static inline uint64_t CVMX_PEXP_SLI_WINDOW_CTL_FUNC(void)
 			return CVMX_ADD_IO_SEG(0x00011F00000102E0ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F00000282E0ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F00000102E0ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F00000282E0ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F00000282E0ull);
 	}
diff --git a/arch/mips/include/asm/octeon/cvmx-pow.h b/arch/mips/include/asm/octeon/cvmx-pow.h
index 0b875673cbe0..f412557fd823 100644
--- a/arch/mips/include/asm/octeon/cvmx-pow.h
+++ b/arch/mips/include/asm/octeon/cvmx-pow.h
@@ -2055,10 +2055,17 @@ static inline cvmx_pow_tag_type_t cvmx_pow_work_request_null_rd(void)
 	cvmx_pow_tag_sw_wait();
 
 	ptr.u64 = 0;
-	ptr.snull_rd.mem_region = CVMX_IO_SEG;
-	ptr.snull_rd.is_io = 1;
-	ptr.snull_rd.did = CVMX_OCT_DID_TAG_NULL_RD;
-
+	if (octeon_has_feature(OCTEON_FEATURE_CN78XX_WQE)) {
+		ptr.swork_78xx.mem_region = CVMX_IO_SEG;
+		ptr.swork_78xx.is_io = 1;
+		ptr.swork_78xx.did = CVMX_OCT_DID_TAG_NULL_RD;
+		ptr.swork_78xx.node = cvmx_get_node_num();
+	}
+	else {
+		ptr.snull_rd.mem_region = CVMX_IO_SEG;
+		ptr.snull_rd.is_io = 1;
+		ptr.snull_rd.did = CVMX_OCT_DID_TAG_NULL_RD;
+	}
 	result.u64 = cvmx_read_csr(ptr.u64);
 	return (cvmx_pow_tag_type_t)result.s_null_rd.state;
 }
@@ -2638,6 +2645,118 @@ static inline void cvmx_pow_set_group_mask(uint64_t core_num, uint64_t mask)
 	}
 }
 
+/**
+ * This function gets the group mask for a core.  The group mask
+ * indicates which groups each core will accept work from.
+ *
+ * @param core_num   core to apply mask to
+ * @return 	Group mask, one bit for up to 64 groups.
+ *               Each 1 bit in the mask enables the core to accept work from
+ *               the corresponding group.
+ *               The CN68XX supports 64 groups, earlier models only support
+ *               16 groups.
+ *
+ * The CN78XX in backwards compatibility mode allows up to 32 groups,
+ * so the 'mask' argument has one bit for every of the legacy
+ * groups, and a '1' in the mask causes a total of 8 groups
+ * which share the legacy group numbher and 8 qos levels,
+ * to be enabled for the calling processor core.
+ * A '0' in the mask will disable the current core
+ * from receiving work from the associated group.
+ */
+static inline uint64_t cvmx_pow_get_group_mask(uint64_t core_num) 
+{
+	if (octeon_has_feature(OCTEON_FEATURE_CN78XX_WQE)) {
+		cvmx_sso_ppx_sx_grpmskx_t grp_msk;
+		unsigned core, node, i;
+		int rix;	/* Register index */
+		uint64_t mask = 0;
+
+		node = cvmx_coremask_core_to_node(core_num);
+		core = cvmx_coremask_core_on_node(core_num);
+
+		/* 78xx: 256 groups divided into 4 X 64 bit registers */
+		/* 73xx: 64 groups are in one register */
+		for (rix = (cvmx_sso_num_xgrp() >> 6) - 1; rix >= 0; rix-- ) {
+			/* read only mask_set=0 (both 'set' was written same) */
+			grp_msk.u64 = cvmx_read_csr_node(node,
+				CVMX_SSO_PPX_SX_GRPMSKX(core, 0, rix));
+			/* ASSUME: (this is how mask bits got written) */
+			/* grp_mask[7:0]: all bits 0..7 are same */
+			/* grp_mask[15:8]: all bits 8..15 are same, etc */
+			/* DO: mask[7:0] = grp_mask.u64[56,48,40,32,24,16,8,0] */
+			for (i = 0; i < 8; i++)
+				mask |= (grp_msk.u64 & ((uint64_t)1<<(i*8))) >> (7*i);
+			/* we collected 8 MSBs in mask[7:0], <<=8 and continue */
+			if (cvmx_likely(rix != 0))
+				mask <<= 8;
+		}
+		return mask & 0xFFFFFFFF;
+	} else if (octeon_has_feature(OCTEON_FEATURE_CN68XX_WQE)) {
+		cvmx_sso_ppx_grp_msk_t grp_msk;
+		grp_msk.u64 = cvmx_read_csr(CVMX_SSO_PPX_GRP_MSK(core_num));
+		return grp_msk.u64;
+	} else {
+		cvmx_pow_pp_grp_mskx_t grp_msk;
+		grp_msk.u64 = cvmx_read_csr(CVMX_POW_PP_GRP_MSKX(core_num));
+		return grp_msk.u64 & 0xffff;
+	}
+}
+
+/*
+ * Returns 0 if 78xx(73xx,75xx) is not programmed in legacy compatible mode
+ * Returns 1 if 78xx(73xx,75xx) is programmed in legacy compatible mode
+ * Returns 1 if octeon model is not 78xx(73xx,75xx)
+ */
+static inline uint64_t cvmx_pow_is_legacy78mode(uint64_t core_num)
+{
+	if (octeon_has_feature(OCTEON_FEATURE_CN78XX_WQE)) {
+		cvmx_sso_ppx_sx_grpmskx_t grp_msk0, grp_msk1;
+		unsigned core, node, i;
+		int rix;	/* Register index */
+		uint64_t mask = 0;
+
+		node = cvmx_coremask_core_to_node(core_num);
+		core = cvmx_coremask_core_on_node(core_num);
+
+		/* 78xx: 256 groups divided into 4 X 64 bit registers */
+		/* 73xx: 64 groups are in one register */
+		/* 1) in order for the 78_SSO to be in legacy compatible mode
+		 * the both mask_sets should be programmed the same */
+		for (rix = (cvmx_sso_num_xgrp() >> 6) - 1; rix >= 0; rix-- ) {
+			/* read mask_set=0 (both 'set' was written same) */
+			grp_msk0.u64 = cvmx_read_csr_node(node,
+				CVMX_SSO_PPX_SX_GRPMSKX(core, 0, rix));
+			grp_msk1.u64 = cvmx_read_csr_node(node,
+				CVMX_SSO_PPX_SX_GRPMSKX(core, 1, rix));
+			if (grp_msk0.u64 != grp_msk1.u64) {
+//				cvmx_dprintf("\nThe SSO/POW is NOT in legacy compatible mode for ");
+//				cvmx_dprintf("core#%d because: idx=%d: set1:%016llx != set2:%016llx\n",
+//					     core, rix, CAST_ULL(grp_msk0.u64),
+//					     CAST_ULL(grp_msk1.u64) );
+				return 0;
+			}
+			/* (this is how mask bits should be written) */
+			/* grp_mask[7:0]: all bits 0..7 are same */
+			/* grp_mask[15:8]: all bits 8..15 are same, etc */
+			/* 2) in order for the 78_SSO to be in legacy compatible
+			 * mode above should be true (test only mask_set=0 */
+			for (i = 0; i < 8; i++) {
+				mask = (grp_msk0.u64 >> (i<<3)) & 0xFF;
+				if (!(mask == 0 || mask == 0xFF)) {
+//					cvmx_dprintf("\nThe SSO/POW is NOT in legacy compatible mode for ");
+//					cvmx_dprintf("core#%d because: idx=%d, off=%d: mask=%#02x (!= (00 || FF))\n",
+//					     core, rix, i<<3, (unsigned)mask);
+					return 0;
+				}
+			}
+		}
+		/* if we come here, the 78_SSO is in legacy compatible mode */
+	}
+	return 1;	/* the SSO/POW is in legacy (or compatible) mode */
+}
+
+
 /**
  * This function sets POW static priorities for a core. Each input queue has
  * an associated priority value.
@@ -2677,8 +2796,8 @@ static inline void cvmx_pow_set_priority(uint64_t core_num, const uint8_t priori
 		unsigned node = cvmx_get_node_num();
 		cvmx_sso_grpx_pri_t grp_pri;
 
-		grp_pri.s.weight = 0x3f;
-		grp_pri.s.affinity = 0xf;
+		/*grp_pri.s.weight = 0x3f; these will be anyway overwritten */
+		/*grp_pri.s.affinity = 0xf; by the next cvmx_read_csr_node(..), */
 
 		for(group = 0; group < cvmx_sso_num_xgrp(); group ++ ) {
 			grp_pri.u64 = cvmx_read_csr_node(node,
@@ -2719,6 +2838,102 @@ static inline void cvmx_pow_set_priority(uint64_t core_num, const uint8_t priori
 	}
 }
 
+/**
+ * This function gets POW static priorities for a core. Each input queue has
+ * an associated priority value.
+ *
+ * @param[in]  core_num core to get priorities for
+ * @param[out] priority Pointer to uint8_t[] where to return priorities
+ * 		     	Vector of 8 priorities, one per POW Input Queue (0-7).
+ *                   	Highest priority is 0 and lowest is 7. A priority value
+ *                   	of 0xF instructs POW to skip the Input Queue when
+ *                   	scheduling to this specific core.
+ *                   NOTE: priorities should not have gaps in values, meaning
+ *                         {0,1,1,1,1,1,1,1} is a valid configuration while
+ *                         {0,2,2,2,2,2,2,2} is not.
+ */
+static inline void cvmx_pow_get_priority(uint64_t core_num, uint8_t priority[])
+{
+	if (OCTEON_IS_MODEL(OCTEON_CN3XXX))
+		return;
+
+	if (octeon_has_feature(OCTEON_FEATURE_CN78XX_WQE)) {
+		unsigned group;
+		unsigned node = cvmx_get_node_num();
+		cvmx_sso_grpx_pri_t grp_pri;
+		
+		/* read priority only from the first 8 groups */
+		/* the next groups are programmed the same (periodicaly) */
+		for(group = 0; group < 8/*cvmx_sso_num_xgrp()*/; group ++ ) {
+			grp_pri.u64 = cvmx_read_csr_node(node,
+				CVMX_SSO_GRPX_PRI(group));
+			priority[group/* & 0x7*/] = grp_pri.s.pri; 
+		}
+
+	} else if (octeon_has_feature(OCTEON_FEATURE_CN68XX_WQE)) {
+		cvmx_sso_ppx_qos_pri_t qos_pri;
+
+		qos_pri.u64 = cvmx_read_csr(CVMX_SSO_PPX_QOS_PRI(core_num));
+		priority[0] = qos_pri.s.qos0_pri;
+		priority[1] = qos_pri.s.qos1_pri;
+		priority[2] = qos_pri.s.qos2_pri;
+		priority[3] = qos_pri.s.qos3_pri;
+		priority[4] = qos_pri.s.qos4_pri;
+		priority[5] = qos_pri.s.qos5_pri;
+		priority[6] = qos_pri.s.qos6_pri;
+		priority[7] = qos_pri.s.qos7_pri;
+	} else {
+		/* POW priorities on CN5xxx .. CN66XX */
+		cvmx_pow_pp_grp_mskx_t grp_msk;
+
+		grp_msk.u64 = cvmx_read_csr(CVMX_POW_PP_GRP_MSKX(core_num));
+		priority[0] = grp_msk.s.qos0_pri;
+		priority[1] = grp_msk.s.qos1_pri;
+		priority[2] = grp_msk.s.qos2_pri;
+		priority[3] = grp_msk.s.qos3_pri;
+		priority[4] = grp_msk.s.qos4_pri;
+		priority[5] = grp_msk.s.qos5_pri;
+		priority[6] = grp_msk.s.qos6_pri;
+		priority[7] = grp_msk.s.qos7_pri;
+	}
+	
+	/* Detect gaps between priorities and flag error - (optional) */
+	if (!octeon_has_feature(OCTEON_FEATURE_CN78XX_WQE)) {
+		int i;
+		uint32_t prio_mask = 0;
+
+		for (i = 0; i < 8; i++)
+			if (priority[i] != 0xF)
+				prio_mask |= 1 << priority[i];
+
+		if (prio_mask ^ ((1 << cvmx_pop(prio_mask)) - 1)) {
+			cvmx_dprintf("ERROR:%s: POW static priorities should be contiguous (0x%llx)\n",
+				__func__, (unsigned long long)prio_mask);
+			return;
+		}
+	}
+}
+
+static inline void cvmx_sso_get_group_priority(int node, cvmx_xgrp_t xgrp,
+			int *priority, int *weight, int *affinity)
+{
+	cvmx_sso_grpx_pri_t grp_pri;
+
+	if (!octeon_has_feature(OCTEON_FEATURE_CN78XX_WQE)) {
+		cvmx_dprintf(
+			"ERROR: %s is not supported on this chip)\n",
+			__FUNCTION__);
+		return;
+	}
+
+	grp_pri.u64 = cvmx_read_csr_node(node, CVMX_SSO_GRPX_PRI(xgrp.xgrp));
+	*affinity = grp_pri.s.affinity;
+	*priority = grp_pri.s.pri;
+	*weight = grp_pri.s.weight;
+}
+
+		
+
 /**
  * Performs a tag switch and then an immediate deschedule. This completes
  * immediately, so completion must not be waited for.  This function does NOT
@@ -3157,7 +3372,6 @@ static inline void *cvmx_sso_work_request_grp_sync(unsigned int lgrp,
 static inline void cvmx_pow_set_xgrp_mask( uint64_t core_num,
 		uint8_t mask_set, const uint64_t xgrp_mask[])
 {
-	cvmx_sso_ppx_sx_grpmskx_t grp_msk;
 	unsigned grp, node, core;
 	uint64_t reg_addr;
 
@@ -3178,18 +3392,65 @@ static inline void cvmx_pow_set_xgrp_mask( uint64_t core_num,
 	core = cvmx_coremask_core_on_node(core_num);
 
 	for (grp = 0; grp < (cvmx_sso_num_xgrp() >> 6); grp++) {
-		reg_addr = CVMX_SSO_PPX_SX_GRPMSKX(core, 0, grp),
-		grp_msk.u64 = 0;
 		if (mask_set & 1) {
-			grp_msk.s.grp_msk = xgrp_mask[grp];
-			cvmx_write_csr_node(node, reg_addr, grp_msk.u64);
+			reg_addr = CVMX_SSO_PPX_SX_GRPMSKX(core, 0, grp),
+			cvmx_write_csr_node(node, reg_addr, xgrp_mask[grp]);
 		}
+		if (mask_set & 2) {
+			reg_addr = CVMX_SSO_PPX_SX_GRPMSKX(core, 1, grp),
+			cvmx_write_csr_node(node, reg_addr, xgrp_mask[grp]);
+		}
+	}
+}
+
+/**
+ * This function gets the group mask for a core.  The group mask bits
+ * indicate which groups each core will accept work from.
+ *
+ * @param core_num 	Processor core to apply mask to.
+ * @param mask_set	7XXX has 2 sets of masks per core.
+ *     Bit 0 represents the first mask set, bit 1 -- the second.
+ * @param xgrp_mask	Provide pointer to uint64_t mask[8] output array.
+ *     Total number of groups is divided into a number of
+ *     64-bits mask sets. Each bit in the mask represents
+ *     the core accepts work from the corresponding group.
+ *
+ * NOTE: Each core can be configured to accept work in accordance to both
+ * mask sets, with the first having higher precedence over the second,
+ * or to accept work in accordance to just one of the two mask sets.
+ * The 'core_num' argument represents a processor core on any node
+ * in a coherent multi-chip system.
+ */
+static inline void cvmx_pow_get_xgrp_mask( uint64_t core_num,
+		uint8_t mask_set, uint64_t *xgrp_mask)
+{
+	cvmx_sso_ppx_sx_grpmskx_t grp_msk;
+	unsigned grp, node, core;
+	uint64_t reg_addr;
 
-		reg_addr = CVMX_SSO_PPX_SX_GRPMSKX(core, 1, grp),
-		grp_msk.u64 = 0;
+	if (!octeon_has_feature(OCTEON_FEATURE_CN78XX_WQE)) {
+		cvmx_dprintf( "ERROR: %s is not supported on this chip)\n",
+			__FUNCTION__);
+		return;
+	}
+	
+	if (CVMX_ENABLE_POW_CHECKS) {
+		cvmx_warn_if(mask_set != 1 && mask_set != 2, "Invalid mask set");
+	}
+	
+	node = cvmx_coremask_core_to_node(core_num);
+	core = cvmx_coremask_core_on_node(core_num);
+	
+	for (grp = 0; grp < cvmx_sso_num_xgrp() >> 6; grp++) {
+		if (mask_set & 1) {
+			reg_addr = CVMX_SSO_PPX_SX_GRPMSKX(core, 0, grp),
+			grp_msk.u64 = cvmx_read_csr_node(node, reg_addr);
+			xgrp_mask[grp] = grp_msk.s.grp_msk;
+		}
 		if (mask_set & 2) {
-			grp_msk.s.grp_msk = xgrp_mask[grp];
-			cvmx_write_csr_node(node, reg_addr, grp_msk.u64);
+			reg_addr = CVMX_SSO_PPX_SX_GRPMSKX(core, 1, grp),
+			grp_msk.u64 = cvmx_read_csr_node(node, reg_addr);
+			xgrp_mask[grp] = grp_msk.s.grp_msk;
 		}
 	}
 }
@@ -3604,12 +3865,52 @@ int cvmx_sso_release_group_range(int node, int base_group, int count);
 int cvmx_sso_release_group(int node, int group);
 
 /**
- * Show integrated PKI configuration.
+ * Show integrated SSO configuration.
  *
  * @param node	   node number
  */
 int cvmx_sso_config_dump(unsigned node);
 
+/**
+ * Show integrated SSO statistics.
+ *
+ * @param node	   node number
+ */
+int cvmx_sso_stats_dump(unsigned node);
+
+/**
+ * Clear integrated SSO statistics.
+ *
+ * @param node	   node number
+ */
+int cvmx_sso_stats_clear(unsigned node);
+
+/**
+ * Show SSO core-group affinity and priority per node (multi-node systems)
+ */
+extern void cvmx_pow_mask_priority_dump_node(unsigned int node, cvmx_coremask_t *avail_coremask);
+
+/**
+ * Show POW/SSO core-group affinity and priority (legacy, single-node systems)
+ */
+static inline void cvmx_pow_mask_priority_dump(cvmx_coremask_t *avail_coremask)
+{
+	 cvmx_pow_mask_priority_dump_node(0/*node*/, avail_coremask);
+}
+
+/**
+ * Show SSO performance counters (multi-node systems)
+ */
+extern void cvmx_pow_show_perf_counters_node(unsigned int node);
+
+/**
+ * Show POW/SSO performance counters (legacy, single-node systems)
+ */
+static inline void cvmx_pow_show_perf_counters(void)
+{
+	cvmx_pow_show_perf_counters_node(0/*node*/);
+}
+
 #ifdef  __cplusplus
 /* *INDENT-OFF* */
 }
diff --git a/arch/mips/include/asm/octeon/cvmx-sli-defs.h b/arch/mips/include/asm/octeon/cvmx-sli-defs.h
index bd8bd4b04578..2d5493ec5429 100644
--- a/arch/mips/include/asm/octeon/cvmx-sli-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-sli-defs.h
@@ -67,10 +67,10 @@ static inline uint64_t CVMX_SLI_BIST_STATUS_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000028580ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000580ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000028580ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028580ull;
 			break;
@@ -92,10 +92,10 @@ static inline uint64_t CVMX_SLI_BIST_STATUS_FUNC(void)
 			return 0x0000000000000580ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000028580ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000580ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000028580ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028580ull;
 	}
@@ -147,12 +147,12 @@ static inline uint64_t CVMX_SLI_CTL_PORTX(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 3))
-					return 0x00000000000286E0ull + ((offset) & 3) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x00000000000006E0ull + ((offset) & 3) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 3))
+					return 0x00000000000286E0ull + ((offset) & 3) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 3))
 				return 0x00000000000286E0ull + ((offset) & 3) * 16;
@@ -177,10 +177,10 @@ static inline uint64_t CVMX_SLI_CTL_PORTX(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000286E0ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000000000006E0ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000286E0ull + (offset) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000286E0ull + (offset) * 16;
 	}
@@ -202,10 +202,10 @@ static inline uint64_t CVMX_SLI_CTL_STATUS_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000028570ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000570ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000028570ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028570ull;
 			break;
@@ -227,10 +227,10 @@ static inline uint64_t CVMX_SLI_CTL_STATUS_FUNC(void)
 			return 0x0000000000000570ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000028570ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000570ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000028570ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028570ull;
 	}
@@ -252,10 +252,10 @@ static inline uint64_t CVMX_SLI_DATA_OUT_CNT_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x00000000000285F0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x00000000000005F0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x00000000000285F0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000285F0ull;
 			break;
@@ -277,10 +277,10 @@ static inline uint64_t CVMX_SLI_DATA_OUT_CNT_FUNC(void)
 			return 0x00000000000005F0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000285F0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000000000005F0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000285F0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000285F0ull;
 	}
@@ -324,12 +324,12 @@ static inline uint64_t CVMX_SLI_DMAX_CNT(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 1))
-					return 0x0000000000028400ull + ((offset) & 1) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return 0x0000000000000400ull + ((offset) & 1) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 1))
+					return 0x0000000000028400ull + ((offset) & 1) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 1))
 				return 0x0000000000028400ull + ((offset) & 1) * 16;
@@ -351,10 +351,10 @@ static inline uint64_t CVMX_SLI_DMAX_CNT(unsigned long offset)
 			return 0x0000000000000400ull + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000028400ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000400ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000028400ull + (offset) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028400ull + (offset) * 16;
 	}
@@ -376,12 +376,12 @@ static inline uint64_t CVMX_SLI_DMAX_INT_LEVEL(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 1))
-					return 0x00000000000283E0ull + ((offset) & 1) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return 0x00000000000003E0ull + ((offset) & 1) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 1))
+					return 0x00000000000283E0ull + ((offset) & 1) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 1))
 				return 0x00000000000283E0ull + ((offset) & 1) * 16;
@@ -403,10 +403,10 @@ static inline uint64_t CVMX_SLI_DMAX_INT_LEVEL(unsigned long offset)
 			return 0x00000000000003E0ull + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000283E0ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000000000003E0ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000283E0ull + (offset) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000283E0ull + (offset) * 16;
 	}
@@ -428,12 +428,12 @@ static inline uint64_t CVMX_SLI_DMAX_TIM(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 1))
-					return 0x0000000000028420ull + ((offset) & 1) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 1))
 					return 0x0000000000000420ull + ((offset) & 1) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 1))
+					return 0x0000000000028420ull + ((offset) & 1) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 1))
 				return 0x0000000000028420ull + ((offset) & 1) * 16;
@@ -455,10 +455,10 @@ static inline uint64_t CVMX_SLI_DMAX_TIM(unsigned long offset)
 			return 0x0000000000000420ull + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000028420ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000420ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000028420ull + (offset) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028420ull + (offset) * 16;
 	}
@@ -693,10 +693,10 @@ static inline uint64_t CVMX_SLI_MAC_CREDIT_CNT_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000023D70ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000003D70ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000023D70ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023D70ull;
 			break;
@@ -718,10 +718,10 @@ static inline uint64_t CVMX_SLI_MAC_CREDIT_CNT_FUNC(void)
 			return 0x0000000000003D70ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000023D70ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003D70ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000023D70ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023D70ull;
 	}
@@ -741,10 +741,10 @@ static inline uint64_t CVMX_SLI_MAC_CREDIT_CNT2_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000023E10ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000003E10ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000023E10ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023E10ull;
 			break;
@@ -764,10 +764,10 @@ static inline uint64_t CVMX_SLI_MAC_CREDIT_CNT2_FUNC(void)
 			return 0x0000000000013E10ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000023E10ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003E10ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000023E10ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023E10ull;
 	}
@@ -789,10 +789,10 @@ static inline uint64_t CVMX_SLI_MAC_NUMBER_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000020050ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000003E00ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000020050ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020050ull;
 			break;
@@ -814,10 +814,10 @@ static inline uint64_t CVMX_SLI_MAC_NUMBER_FUNC(void)
 			return 0x0000000000003E00ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000020050ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003E00ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000020050ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020050ull;
 	}
@@ -839,10 +839,10 @@ static inline uint64_t CVMX_SLI_MEM_ACCESS_CTL_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x00000000000282F0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x00000000000002F0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x00000000000282F0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000282F0ull;
 			break;
@@ -864,10 +864,10 @@ static inline uint64_t CVMX_SLI_MEM_ACCESS_CTL_FUNC(void)
 			return 0x00000000000002F0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000282F0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000000000002F0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000282F0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000282F0ull;
 	}
@@ -889,12 +889,12 @@ static inline uint64_t CVMX_SLI_MEM_ACCESS_SUBIDX(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if (((offset >= 12) && (offset <= 27)))
-					return 0x00000000000280E0ull + ((offset) & 31) * 16 - 16*12;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if (((offset >= 12) && (offset <= 27)))
 					return 0x00000000000000E0ull + ((offset) & 31) * 16 - 16*12;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if (((offset >= 12) && (offset <= 27)))
+					return 0x00000000000280E0ull + ((offset) & 31) * 16 - 16*12;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if (((offset >= 12) && (offset <= 27)))
 				return 0x00000000000280E0ull + ((offset) & 31) * 16 - 16*12;
@@ -916,10 +916,10 @@ static inline uint64_t CVMX_SLI_MEM_ACCESS_SUBIDX(unsigned long offset)
 			return 0x00000000000000E0ull + (offset) * 16 - 16*12;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000280E0ull + (offset) * 16 - 16*12;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000000000000E0ull + (offset) * 16 - 16*12;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000280E0ull + (offset) * 16 - 16*12;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000280E0ull + (offset) * 16 - 16*12;
 	}
@@ -932,10 +932,10 @@ static inline uint64_t CVMX_SLI_MEM_CTL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x00000000000285E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x00000000000005E0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x00000000000285E0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000285E0ull;
@@ -952,10 +952,10 @@ static inline uint64_t CVMX_SLI_MEM_CTL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000285E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000000000005E0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000285E0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000285E0ull;
@@ -970,10 +970,10 @@ static inline uint64_t CVMX_SLI_MEM_INT_SUM_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x00000000000285D0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x00000000000005D0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x00000000000285D0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000285D0ull;
@@ -990,10 +990,10 @@ static inline uint64_t CVMX_SLI_MEM_INT_SUM_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000285D0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000000000005D0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000285D0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000285D0ull;
@@ -1007,12 +1007,12 @@ static inline uint64_t CVMX_SLI_MSIXX_TABLE_ADDR(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 64))
-					return 0x0000000000000000ull + ((offset) & 127) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 64))
 					return 0x0000000000006000ull + ((offset) & 127) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 64))
+					return 0x0000000000000000ull + ((offset) & 127) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 64))
@@ -1029,10 +1029,10 @@ static inline uint64_t CVMX_SLI_MSIXX_TABLE_ADDR(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000000000ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000006000ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000000000ull + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000000000ull + (offset) * 16;
@@ -1046,12 +1046,12 @@ static inline uint64_t CVMX_SLI_MSIXX_TABLE_DATA(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 64))
-					return 0x0000000000000008ull + ((offset) & 127) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 64))
 					return 0x0000000000006008ull + ((offset) & 127) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 64))
+					return 0x0000000000000008ull + ((offset) & 127) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 64))
@@ -1068,10 +1068,10 @@ static inline uint64_t CVMX_SLI_MSIXX_TABLE_DATA(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000000008ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000006008ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000000008ull + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000000008ull + (offset) * 16;
@@ -1108,10 +1108,10 @@ static inline uint64_t CVMX_SLI_MSIX_PBA0_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000001000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000007000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000001000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000001000ull;
@@ -1128,10 +1128,10 @@ static inline uint64_t CVMX_SLI_MSIX_PBA0_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000001000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000007000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000001000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000001000ull;
@@ -1146,10 +1146,10 @@ static inline uint64_t CVMX_SLI_MSIX_PBA1_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000001008ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000007010ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000001008ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000001008ull;
@@ -1166,10 +1166,10 @@ static inline uint64_t CVMX_SLI_MSIX_PBA1_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000001008ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000007010ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000001008ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000001008ull;
@@ -1237,10 +1237,10 @@ static inline uint64_t CVMX_SLI_MSI_RCV0_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000023C10ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000003C10ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000023C10ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023C10ull;
 			break;
@@ -1262,10 +1262,10 @@ static inline uint64_t CVMX_SLI_MSI_RCV0_FUNC(void)
 			return 0x0000000000003C10ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000023C10ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003C10ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000023C10ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023C10ull;
 	}
@@ -1287,10 +1287,10 @@ static inline uint64_t CVMX_SLI_MSI_RCV1_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000023C20ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000003C20ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000023C20ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023C20ull;
 			break;
@@ -1312,10 +1312,10 @@ static inline uint64_t CVMX_SLI_MSI_RCV1_FUNC(void)
 			return 0x0000000000003C20ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000023C20ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003C20ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000023C20ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023C20ull;
 	}
@@ -1337,10 +1337,10 @@ static inline uint64_t CVMX_SLI_MSI_RCV2_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000023C30ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000003C30ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000023C30ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023C30ull;
 			break;
@@ -1362,10 +1362,10 @@ static inline uint64_t CVMX_SLI_MSI_RCV2_FUNC(void)
 			return 0x0000000000003C30ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000023C30ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003C30ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000023C30ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023C30ull;
 	}
@@ -1387,10 +1387,10 @@ static inline uint64_t CVMX_SLI_MSI_RCV3_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000023C40ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000003C40ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000023C40ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023C40ull;
 			break;
@@ -1412,10 +1412,10 @@ static inline uint64_t CVMX_SLI_MSI_RCV3_FUNC(void)
 			return 0x0000000000003C40ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000023C40ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003C40ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000023C40ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023C40ull;
 	}
@@ -1437,10 +1437,10 @@ static inline uint64_t CVMX_SLI_MSI_RD_MAP_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000023CA0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000003CA0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000023CA0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023CA0ull;
 			break;
@@ -1462,10 +1462,10 @@ static inline uint64_t CVMX_SLI_MSI_RD_MAP_FUNC(void)
 			return 0x0000000000003CA0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000023CA0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003CA0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000023CA0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023CA0ull;
 	}
@@ -1575,10 +1575,10 @@ static inline uint64_t CVMX_SLI_MSI_WR_MAP_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000023C90ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000003C90ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000023C90ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023C90ull;
 			break;
@@ -1600,10 +1600,10 @@ static inline uint64_t CVMX_SLI_MSI_WR_MAP_FUNC(void)
 			return 0x0000000000003C90ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000023C90ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003C90ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000023C90ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023C90ull;
 	}
@@ -1636,10 +1636,10 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000023CB0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000003CB0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000023CB0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023CB0ull;
 			break;
@@ -1661,10 +1661,10 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_FUNC(void)
 			return 0x0000000000003CB0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000023CB0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003CB0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000023CB0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023CB0ull;
 	}
@@ -1686,10 +1686,10 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B1_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000028650ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000650ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000028650ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028650ull;
 			break;
@@ -1711,10 +1711,10 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B1_FUNC(void)
 			return 0x0000000000000650ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000028650ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000650ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000028650ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028650ull;
 	}
@@ -1736,10 +1736,10 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B2_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000028660ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000660ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000028660ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028660ull;
 			break;
@@ -1761,10 +1761,10 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B2_FUNC(void)
 			return 0x0000000000000660ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000028660ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000660ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000028660ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028660ull;
 	}
@@ -1786,10 +1786,10 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B3_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000028670ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000670ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000028670ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028670ull;
 			break;
@@ -1811,10 +1811,10 @@ static inline uint64_t CVMX_SLI_PCIE_MSI_RCV_B3_FUNC(void)
 			return 0x0000000000000670ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000028670ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000670ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000028670ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028670ull;
 	}
@@ -1838,12 +1838,12 @@ static inline uint64_t CVMX_SLI_PKTX_CNTS(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x00000000000100B0ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return 0x0000000000002400ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x00000000000100B0ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return 0x00000000000100B0ull + ((offset) & 63) * 0x20000ull;
@@ -1866,10 +1866,10 @@ static inline uint64_t CVMX_SLI_PKTX_CNTS(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000100B0ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000002400ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000100B0ull + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000100B0ull + (offset) * 0x20000ull;
 	}
@@ -1894,12 +1894,12 @@ static inline uint64_t CVMX_SLI_PKTX_INPUT_CONTROL(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x0000000000010000ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return 0x0000000000004000ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x0000000000010000ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
@@ -1916,10 +1916,10 @@ static inline uint64_t CVMX_SLI_PKTX_INPUT_CONTROL(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000010000ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000004000ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000010000ull + (offset) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000010000ull + (offset) * 0x20000ull;
@@ -1945,12 +1945,12 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_BADDR(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x0000000000010010ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return 0x0000000000002800ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x0000000000010010ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return 0x0000000000010010ull + ((offset) & 63) * 0x20000ull;
@@ -1973,10 +1973,10 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_BADDR(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000010010ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000002800ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000010010ull + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000010010ull + (offset) * 0x20000ull;
 	}
@@ -2000,12 +2000,12 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_BAOFF_DBELL(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x0000000000010020ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
-					return 0x0000000000002C00ull + ((offset) & 63) * 16;
+					return 0x0000000000002C00ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x0000000000010020ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return 0x0000000000010020ull + ((offset) & 63) * 0x20000ull;
@@ -2028,10 +2028,10 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_BAOFF_DBELL(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000010020ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000002C00ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000010020ull + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000010020ull + (offset) * 0x20000ull;
 	}
@@ -2055,12 +2055,12 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_FIFO_RSIZE(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x0000000000010030ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return 0x0000000000003000ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x0000000000010030ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return 0x0000000000010030ull + ((offset) & 63) * 0x20000ull;
@@ -2083,10 +2083,10 @@ static inline uint64_t CVMX_SLI_PKTX_INSTR_FIFO_RSIZE(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000010030ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003000ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000010030ull + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000010030ull + (offset) * 0x20000ull;
 	}
@@ -2114,12 +2114,12 @@ static inline uint64_t CVMX_SLI_PKTX_INT_LEVELS(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x00000000000100A0ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return 0x0000000000004400ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x00000000000100A0ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
@@ -2136,10 +2136,10 @@ static inline uint64_t CVMX_SLI_PKTX_INT_LEVELS(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000100A0ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000004400ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000100A0ull + (offset) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000100A0ull + (offset) * 0x20000ull;
@@ -2181,12 +2181,12 @@ static inline uint64_t CVMX_SLI_PKTX_OUTPUT_CONTROL(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x0000000000010050ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return 0x0000000000004800ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x0000000000010050ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
@@ -2203,10 +2203,10 @@ static inline uint64_t CVMX_SLI_PKTX_OUTPUT_CONTROL(unsigned long offset)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000010050ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000004800ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000010050ull + (offset) * 0x20000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000010050ull + (offset) * 0x20000ull;
@@ -2232,12 +2232,12 @@ static inline uint64_t CVMX_SLI_PKTX_OUT_SIZE(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x0000000000010060ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return 0x0000000000000C00ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x0000000000010060ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return 0x0000000000010060ull + ((offset) & 63) * 0x20000ull;
@@ -2260,10 +2260,10 @@ static inline uint64_t CVMX_SLI_PKTX_OUT_SIZE(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000010060ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000C00ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000010060ull + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000010060ull + (offset) * 0x20000ull;
 	}
@@ -2300,12 +2300,12 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_BADDR(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x0000000000010070ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return 0x0000000000001400ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x0000000000010070ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return 0x0000000000010070ull + ((offset) & 63) * 0x20000ull;
@@ -2328,10 +2328,10 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_BADDR(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000010070ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000001400ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000010070ull + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000010070ull + (offset) * 0x20000ull;
 	}
@@ -2355,12 +2355,12 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_BAOFF_DBELL(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x0000000000010080ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return 0x0000000000001800ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x0000000000010080ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return 0x0000000000010080ull + ((offset) & 63) * 0x20000ull;
@@ -2383,10 +2383,10 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_BAOFF_DBELL(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000010080ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000001800ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000010080ull + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000010080ull + (offset) * 0x20000ull;
 	}
@@ -2410,12 +2410,12 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_FIFO_RSIZE(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x0000000000010090ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return 0x0000000000001C00ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x0000000000010090ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return 0x0000000000010090ull + ((offset) & 63) * 0x20000ull;
@@ -2438,10 +2438,10 @@ static inline uint64_t CVMX_SLI_PKTX_SLIST_FIFO_RSIZE(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000010090ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000001C00ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000010090ull + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000010090ull + (offset) * 0x20000ull;
 	}
@@ -2498,10 +2498,10 @@ static inline uint64_t CVMX_SLI_PKT_CNT_INT_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000029130ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000001130ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000029130ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029130ull;
 			break;
@@ -2523,10 +2523,10 @@ static inline uint64_t CVMX_SLI_PKT_CNT_INT_FUNC(void)
 			return 0x0000000000001130ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000029130ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000001130ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000029130ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029130ull;
 	}
@@ -2660,10 +2660,10 @@ static inline uint64_t CVMX_SLI_PKT_INT_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000029160ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000001160ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000029160ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029160ull;
@@ -2680,10 +2680,10 @@ static inline uint64_t CVMX_SLI_PKT_INT_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000029160ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000001160ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000029160ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029160ull;
@@ -2731,12 +2731,12 @@ static inline uint64_t CVMX_SLI_PKT_IN_DONEX_CNTS(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 63))
-					return 0x0000000000010040ull + ((offset) & 63) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 63))
 					return 0x0000000000002000ull + ((offset) & 63) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 63))
+					return 0x0000000000010040ull + ((offset) & 63) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 63))
 				return 0x0000000000010040ull + ((offset) & 63) * 0x20000ull;
@@ -2759,10 +2759,10 @@ static inline uint64_t CVMX_SLI_PKT_IN_DONEX_CNTS(unsigned long offset)
 
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000010040ull + (offset) * 0x20000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000002000ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000010040ull + (offset) * 0x20000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000010040ull + (offset) * 0x20000ull;
 	}
@@ -2784,10 +2784,10 @@ static inline uint64_t CVMX_SLI_PKT_IN_INSTR_COUNTS_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000029200ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000001200ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000029200ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029200ull;
 			break;
@@ -2809,10 +2809,10 @@ static inline uint64_t CVMX_SLI_PKT_IN_INSTR_COUNTS_FUNC(void)
 			return 0x0000000000001200ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000029200ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000001200ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000029200ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029200ull;
 	}
@@ -2825,10 +2825,10 @@ static inline uint64_t CVMX_SLI_PKT_IN_INT_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000029150ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000001150ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000029150ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029150ull;
@@ -2845,10 +2845,10 @@ static inline uint64_t CVMX_SLI_PKT_IN_INT_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000029150ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000001150ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000029150ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029150ull;
@@ -2964,10 +2964,10 @@ static inline uint64_t CVMX_SLI_PKT_MEM_CTL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000029120ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000001120ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000029120ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029120ull;
@@ -2984,10 +2984,10 @@ static inline uint64_t CVMX_SLI_PKT_MEM_CTL_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000029120ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000001120ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000029120ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029120ull;
@@ -3011,10 +3011,10 @@ static inline uint64_t CVMX_SLI_PKT_OUTPUT_WMARK_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000029180ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000001180ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000029180ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029180ull;
 			break;
@@ -3036,10 +3036,10 @@ static inline uint64_t CVMX_SLI_PKT_OUTPUT_WMARK_FUNC(void)
 			return 0x0000000000001180ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000029180ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000001180ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000029180ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029180ull;
 	}
@@ -3162,10 +3162,10 @@ static inline uint64_t CVMX_SLI_PKT_RING_RST_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x00000000000291E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x00000000000011E0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x00000000000291E0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000291E0ull;
@@ -3182,10 +3182,10 @@ static inline uint64_t CVMX_SLI_PKT_RING_RST_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000291E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000000000011E0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000291E0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000291E0ull;
@@ -3242,10 +3242,10 @@ static inline uint64_t CVMX_SLI_PKT_TIME_INT_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000029140ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000001140ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000029140ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029140ull;
 			break;
@@ -3267,10 +3267,10 @@ static inline uint64_t CVMX_SLI_PKT_TIME_INT_FUNC(void)
 			return 0x0000000000001140ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000029140ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000001140ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000029140ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000029140ull;
 	}
@@ -3316,10 +3316,10 @@ static inline uint64_t CVMX_SLI_S2C_END_MERGE_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00011F0000025000ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00011F0000015000ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00011F0000025000ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000025000ull);
@@ -3336,10 +3336,10 @@ static inline uint64_t CVMX_SLI_S2C_END_MERGE_FUNC(void)
 {
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00011F0000025000ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00011F0000015000ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00011F0000025000ull);
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00011F0000025000ull);
@@ -3369,12 +3369,12 @@ static inline uint64_t CVMX_SLI_S2M_PORTX_CTL(unsigned long offset)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				if ((offset <= 3))
-					return 0x0000000000023D80ull + ((offset) & 3) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return 0x0000000000003D80ull + ((offset) & 3) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				if ((offset <= 3))
+					return 0x0000000000023D80ull + ((offset) & 3) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			if ((offset <= 3))
 				return 0x0000000000023D80ull + ((offset) & 3) * 16;
@@ -3398,10 +3398,10 @@ static inline uint64_t CVMX_SLI_S2M_PORTX_CTL(unsigned long offset)
 			return 0x0000000000013D80ull + (offset) * 16;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000023D80ull + (offset) * 16;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000003D80ull + (offset) * 16;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000023D80ull + (offset) * 16;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000023D80ull + (offset) * 16;
 	}
@@ -3423,10 +3423,10 @@ static inline uint64_t CVMX_SLI_SCRATCH_1_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x00000000000283C0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x00000000000003C0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x00000000000283C0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000283C0ull;
 			break;
@@ -3448,10 +3448,10 @@ static inline uint64_t CVMX_SLI_SCRATCH_1_FUNC(void)
 			return 0x00000000000003C0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000283C0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000000000003C0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000283C0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000283C0ull;
 	}
@@ -3473,10 +3473,10 @@ static inline uint64_t CVMX_SLI_SCRATCH_2_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x00000000000283D0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x00000000000003D0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x00000000000283D0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000283D0ull;
 			break;
@@ -3498,10 +3498,10 @@ static inline uint64_t CVMX_SLI_SCRATCH_2_FUNC(void)
 			return 0x00000000000003D0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000283D0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000000000003D0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000283D0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000283D0ull;
 	}
@@ -3523,10 +3523,10 @@ static inline uint64_t CVMX_SLI_STATE1_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000028620ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000620ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000028620ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028620ull;
 			break;
@@ -3548,10 +3548,10 @@ static inline uint64_t CVMX_SLI_STATE1_FUNC(void)
 			return 0x0000000000000620ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000028620ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000620ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000028620ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028620ull;
 	}
@@ -3573,10 +3573,10 @@ static inline uint64_t CVMX_SLI_STATE2_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000028630ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000630ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000028630ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028630ull;
 			break;
@@ -3598,10 +3598,10 @@ static inline uint64_t CVMX_SLI_STATE2_FUNC(void)
 			return 0x0000000000000630ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000028630ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000630ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000028630ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028630ull;
 	}
@@ -3623,10 +3623,10 @@ static inline uint64_t CVMX_SLI_STATE3_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000028640ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000640ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000028640ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028640ull;
 			break;
@@ -3648,10 +3648,10 @@ static inline uint64_t CVMX_SLI_STATE3_FUNC(void)
 			return 0x0000000000000640ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000028640ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000640ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000028640ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000028640ull;
 	}
@@ -3684,10 +3684,10 @@ static inline uint64_t CVMX_SLI_WINDOW_CTL_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x00000000000282E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x00000000000002E0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x00000000000282E0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000282E0ull;
 			break;
@@ -3709,10 +3709,10 @@ static inline uint64_t CVMX_SLI_WINDOW_CTL_FUNC(void)
 			return 0x00000000000002E0ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x00000000000282E0ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x00000000000002E0ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x00000000000282E0ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x00000000000282E0ull;
 	}
@@ -3734,10 +3734,10 @@ static inline uint64_t CVMX_SLI_WIN_RD_ADDR_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000020010ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000010ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000020010ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020010ull;
 			break;
@@ -3759,10 +3759,10 @@ static inline uint64_t CVMX_SLI_WIN_RD_ADDR_FUNC(void)
 			return 0x0000000000000010ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000020010ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000010ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000020010ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020010ull;
 	}
@@ -3784,10 +3784,10 @@ static inline uint64_t CVMX_SLI_WIN_RD_DATA_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000020040ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000040ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000020040ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020040ull;
 			break;
@@ -3809,10 +3809,10 @@ static inline uint64_t CVMX_SLI_WIN_RD_DATA_FUNC(void)
 			return 0x0000000000000040ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000020040ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000040ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000020040ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020040ull;
 	}
@@ -3834,10 +3834,10 @@ static inline uint64_t CVMX_SLI_WIN_WR_ADDR_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000020000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000020000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020000ull;
 			break;
@@ -3859,10 +3859,10 @@ static inline uint64_t CVMX_SLI_WIN_WR_ADDR_FUNC(void)
 			return 0x0000000000000000ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000020000ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000000ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000020000ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020000ull;
 	}
@@ -3884,10 +3884,10 @@ static inline uint64_t CVMX_SLI_WIN_WR_DATA_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000020020ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000020ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000020020ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020020ull;
 			break;
@@ -3909,10 +3909,10 @@ static inline uint64_t CVMX_SLI_WIN_WR_DATA_FUNC(void)
 			return 0x0000000000000020ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000020020ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000020ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000020020ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020020ull;
 	}
@@ -3934,10 +3934,10 @@ static inline uint64_t CVMX_SLI_WIN_WR_MASK_FUNC(void)
 			break;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return 0x0000000000020030ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return 0x0000000000000030ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return 0x0000000000020030ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020030ull;
 			break;
@@ -3959,10 +3959,10 @@ static inline uint64_t CVMX_SLI_WIN_WR_MASK_FUNC(void)
 			return 0x0000000000000030ull;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return 0x0000000000020030ull;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return 0x0000000000000030ull;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return 0x0000000000020030ull;
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return 0x0000000000020030ull;
 	}
diff --git a/arch/mips/include/asm/octeon/cvmx-smix-defs.h b/arch/mips/include/asm/octeon/cvmx-smix-defs.h
index 4f615d24d658..e1f577c14c93 100644
--- a/arch/mips/include/asm/octeon/cvmx-smix-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-smix-defs.h
@@ -75,10 +75,10 @@ static inline uint64_t CVMX_SMIX_CLK(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180000001818ull) + ((offset) & 0) * 256;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180000003818ull) + ((offset) & 3) * 128;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180000003818ull) + ((offset) & 3) * 128;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
@@ -113,10 +113,10 @@ static inline uint64_t CVMX_SMIX_CLK(unsigned long offset)
 		case OCTEON_CN58XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000001818ull) + (offset) * 256;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180000003818ull) + (offset) * 128;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180000003818ull) + (offset) * 128;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180000003818ull) + (offset) * 128;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000003818ull) + (offset) * 128;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
@@ -149,10 +149,10 @@ static inline uint64_t CVMX_SMIX_CMD(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180000001800ull) + ((offset) & 0) * 256;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180000003800ull) + ((offset) & 3) * 128;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180000003800ull) + ((offset) & 3) * 128;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
@@ -187,10 +187,10 @@ static inline uint64_t CVMX_SMIX_CMD(unsigned long offset)
 		case OCTEON_CN58XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000001800ull) + (offset) * 256;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180000003800ull) + (offset) * 128;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180000003800ull) + (offset) * 128;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180000003800ull) + (offset) * 128;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000003800ull) + (offset) * 128;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
@@ -223,10 +223,10 @@ static inline uint64_t CVMX_SMIX_EN(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180000001820ull) + ((offset) & 0) * 256;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180000003820ull) + ((offset) & 3) * 128;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180000003820ull) + ((offset) & 3) * 128;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
@@ -261,10 +261,10 @@ static inline uint64_t CVMX_SMIX_EN(unsigned long offset)
 		case OCTEON_CN58XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000001820ull) + (offset) * 256;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180000003820ull) + (offset) * 128;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180000003820ull) + (offset) * 128;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180000003820ull) + (offset) * 128;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000003820ull) + (offset) * 128;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
@@ -297,10 +297,10 @@ static inline uint64_t CVMX_SMIX_RD_DAT(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180000001810ull) + ((offset) & 0) * 256;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180000003810ull) + ((offset) & 3) * 128;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180000003810ull) + ((offset) & 3) * 128;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
@@ -335,10 +335,10 @@ static inline uint64_t CVMX_SMIX_RD_DAT(unsigned long offset)
 		case OCTEON_CN58XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000001810ull) + (offset) * 256;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180000003810ull) + (offset) * 128;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180000003810ull) + (offset) * 128;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180000003810ull) + (offset) * 128;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000003810ull) + (offset) * 128;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
@@ -371,10 +371,10 @@ static inline uint64_t CVMX_SMIX_WR_DAT(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x0001180000001808ull) + ((offset) & 0) * 256;
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180000003808ull) + ((offset) & 3) * 128;
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset <= 3))
 					return CVMX_ADD_IO_SEG(0x0001180000003808ull) + ((offset) & 3) * 128;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
@@ -409,10 +409,10 @@ static inline uint64_t CVMX_SMIX_WR_DAT(unsigned long offset)
 		case OCTEON_CN58XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000001808ull) + (offset) * 256;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180000003808ull) + (offset) * 128;
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180000003808ull) + (offset) * 128;
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180000003808ull) + (offset) * 128;
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x0001180000003808ull) + (offset) * 128;
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
diff --git a/arch/mips/include/asm/octeon/cvmx-sso-defs.h b/arch/mips/include/asm/octeon/cvmx-sso-defs.h
index 173fd1d5c192..e0ae44e6ad77 100644
--- a/arch/mips/include/asm/octeon/cvmx-sso-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-sso-defs.h
@@ -948,10 +948,10 @@ static inline uint64_t CVMX_SSO_RESET_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-					return CVMX_ADD_IO_SEG(0x00016700000010F8ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 					return CVMX_ADD_IO_SEG(0x00016700000010F8ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+					return CVMX_ADD_IO_SEG(0x00016700000010F8ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00016700000010F8ull);
 			break;
@@ -969,10 +969,10 @@ static inline uint64_t CVMX_SSO_RESET_FUNC(void)
 	switch(cvmx_get_octeon_family()) {
 		case OCTEON_CNF75XX & OCTEON_FAMILY_MASK:
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x00016700000010F8ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x00016700000010F8ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x00016700000010F8ull);
 		case OCTEON_CN73XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x00016700000010F8ull);
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
diff --git a/arch/mips/include/asm/octeon/cvmx-uctlx-defs.h b/arch/mips/include/asm/octeon/cvmx-uctlx-defs.h
index 9b49e2a40e51..9fdaf4466f72 100644
--- a/arch/mips/include/asm/octeon/cvmx-uctlx-defs.h
+++ b/arch/mips/include/asm/octeon/cvmx-uctlx-defs.h
@@ -65,10 +65,10 @@ static inline uint64_t CVMX_UCTLX_BIST_STATUS(unsigned long offset)
 				return CVMX_ADD_IO_SEG(0x000118006F0000A0ull);
 			break;
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				if ((offset == 0))
 					return CVMX_ADD_IO_SEG(0x0001180068000008ull);
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
 				if ((offset == 0))
 					return CVMX_ADD_IO_SEG(0x0001180068000008ull);
 
@@ -88,10 +88,10 @@ static inline uint64_t CVMX_UCTLX_BIST_STATUS(unsigned long offset __attribute__
 		case OCTEON_CN68XX & OCTEON_FAMILY_MASK:
 			return CVMX_ADD_IO_SEG(0x000118006F0000A0ull);
 		case OCTEON_CN78XX & OCTEON_FAMILY_MASK:
-			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
-				return CVMX_ADD_IO_SEG(0x0001180068000008ull);
 			if (OCTEON_IS_MODEL(OCTEON_CN78XX_PASS1_X))
 				return CVMX_ADD_IO_SEG(0x0001180068000008ull);
+			if (OCTEON_IS_MODEL(OCTEON_CN78XX))
+				return CVMX_ADD_IO_SEG(0x0001180068000008ull);
 
 	}
 	return CVMX_ADD_IO_SEG(0x000118006F0000A0ull);
-- 
2.25.1

