From d9c1e18b1d1c173cf4faa7ee6203c511db8d3bcc Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Thu, 23 May 2019 21:13:49 +0200
Subject: [PATCH 206/345] MIPS: OCTEON: Add NUMA support for cn78XX

Create machine specific bootmem initialization, and add topology
functions.  This gets it to boot, but more changes needed to be able
to use devices on node-1.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Carlos Munoz <cmunoz@caviumnetworks.com>
---
 arch/mips/Kconfig                             |   3 +
 arch/mips/cavium-octeon/Makefile              |   1 +
 arch/mips/cavium-octeon/octeon-irq.c          |   5 +-
 arch/mips/cavium-octeon/octeon-numa.c         | 131 ++++++++++++++++++
 arch/mips/cavium-octeon/setup.c               | 110 +++++++++++++--
 arch/mips/cavium-octeon/smp.c                 |   1 +
 .../mips/include/asm/mach-cavium-octeon/irq.h |   8 ++
 .../asm/mach-cavium-octeon/mach_bootmem.h     |   8 ++
 .../include/asm/mach-cavium-octeon/mmzone.h   |  20 +++
 arch/mips/include/asm/octeon/octeon.h         |   8 ++
 10 files changed, 285 insertions(+), 10 deletions(-)
 create mode 100644 arch/mips/cavium-octeon/octeon-numa.c
 create mode 100644 arch/mips/include/asm/mach-cavium-octeon/mach_bootmem.h
 create mode 100644 arch/mips/include/asm/mach-cavium-octeon/mmzone.h

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index 9c0e92c45e22..2fe3b8019d6a 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -921,6 +921,8 @@ config CAVIUM_OCTEON_SOC
 	select SYS_SUPPORTS_SMP
 	select NR_CPUS_DEFAULT_64
 	select MIPS_NR_CPU_NR_MAP_1024
+	select SYS_SUPPORTS_NUMA if SMP
+	select SPARSE_IRQ if NUMA
 	select BUILTIN_DTB
 	select MTD_COMPLEX_MAPPINGS
 	select SYS_SUPPORTS_RELOCATABLE
@@ -2660,6 +2662,7 @@ config RANDOMIZE_BASE_MAX_OFFSET
 
 config NODES_SHIFT
 	int
+	default "1" if CAVIUM_OCTEON_SOC
 	default "6"
 	depends on NEED_MULTIPLE_NODES
 
diff --git a/arch/mips/cavium-octeon/Makefile b/arch/mips/cavium-octeon/Makefile
index 8d4ab7d44368..d908b3372301 100644
--- a/arch/mips/cavium-octeon/Makefile
+++ b/arch/mips/cavium-octeon/Makefile
@@ -21,6 +21,7 @@ obj-y += crypto/
 
 obj-$(CONFIG_MTD)		      += flash_setup.o
 obj-$(CONFIG_SMP)		      += smp.o
+obj-$(CONFIG_NUMA)			+= octeon-numa.o
 obj-$(CONFIG_OCTEON_ILM)	      += oct_ilm.o
 obj-$(CONFIG_USB)		      += octeon-usb.o
 obj-$(CONFIG_SYSFS)                   += octeon-power-throttle.o
diff --git a/arch/mips/cavium-octeon/octeon-irq.c b/arch/mips/cavium-octeon/octeon-irq.c
index ea132d23344b..bed6b40c041d 100644
--- a/arch/mips/cavium-octeon/octeon-irq.c
+++ b/arch/mips/cavium-octeon/octeon-irq.c
@@ -3093,7 +3093,10 @@ static int __init octeon_irq_init_ciu3(struct device_node *ciu_node,
 	u64 base_addr;
 	union cvmx_ciu3_const consts;
 
-	node = 0; /* of_node_to_nid(ciu_node); */
+	node = of_node_to_nid(ciu_node);
+	if (node >= ARRAY_SIZE(octeon_ciu3_info_per_node))
+		return -EINVAL;
+	
 	ciu3_info = kzalloc_node(sizeof(*ciu3_info), GFP_KERNEL, node);
 
 	if (!ciu3_info)
diff --git a/arch/mips/cavium-octeon/octeon-numa.c b/arch/mips/cavium-octeon/octeon-numa.c
new file mode 100644
index 000000000000..c06a9e56dc5d
--- /dev/null
+++ b/arch/mips/cavium-octeon/octeon-numa.c
@@ -0,0 +1,131 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2014 Cavium, Inc.
+ */
+
+#include <linux/init.h>
+#include <linux/topology.h>
+#include <linux/mm.h>
+#include <linux/nodemask.h>
+#include <linux/bootmem.h>
+#include <linux/swap.h>
+#include <linux/of.h>
+
+#include <asm/sections.h>
+
+#include <asm/pgalloc.h>
+#include <asm/octeon/octeon.h>
+#include <asm/octeon/cvmx-coremask.h>
+
+
+void octeon_setup_numa(void)
+{
+	int id;
+	int node;
+	struct cpumask *mask;
+	const int coreid = cvmx_get_core_num();
+	struct cvmx_sysinfo *sysinfo = cvmx_sysinfo_get();
+
+	for (id = 0; id < CONFIG_MIPS_NR_CPU_NR_MAP; id++) {
+		if (cvmx_coremask_is_core_set(&sysinfo->core_mask, id)) {
+			node = (id >> 7) & 7;
+			node_set_online(node);
+			node_set_state(node, N_POSSIBLE);
+		}
+	}
+	node = (coreid >> 7) & 7;
+	mask = cpumask_of_node(node);
+	/* The boot CPU will be CPU 0 */
+	cpumask_set_cpu(0, mask);
+}
+
+void octeon_numa_cpu_online(void)
+{
+	int node;
+	struct cpumask *mask;
+	const int coreid = cvmx_get_core_num();
+
+	node = (coreid >> 7) & 7;
+	mask = cpumask_of_node(node);
+	cpumask_set_cpu(smp_processor_id(), mask);
+}
+
+void __init paging_init(void)
+{
+	unsigned long max_zone_pfns[MAX_NR_ZONES] = {0,};
+	unsigned node;
+
+	pagetable_init();
+
+#ifdef CONFIG_ZONE_DMA
+	max_zone_pfns[ZONE_DMA] = MAX_DMA_PFN;
+#endif
+#ifdef CONFIG_ZONE_DMA32
+	max_zone_pfns[ZONE_DMA32] = MAX_DMA32_PFN;
+#endif
+	for_each_online_node(node) {
+		unsigned long start_pfn, end_pfn;
+
+		get_pfn_range_for_nid(node, &start_pfn, &end_pfn);
+
+		if (end_pfn > max_low_pfn)
+			max_low_pfn = end_pfn;
+	}
+	max_zone_pfns[ZONE_NORMAL] = max_low_pfn;
+
+	free_area_init_nodes(max_zone_pfns);
+}
+
+void setup_zero_pages(void);
+
+void __init mem_init(void)
+{
+	unsigned long codesize, datasize, initsize, tmp;
+
+	totalram_pages += free_all_bootmem();
+	setup_zero_pages();	/* This comes from node 0 */
+
+	codesize =  (unsigned long) &_etext - (unsigned long) &_text;
+	datasize =  (unsigned long) &_edata - (unsigned long) &_etext;
+	initsize =  (unsigned long) &__init_end - (unsigned long) &__init_begin;
+
+	tmp = nr_free_pages();
+	pr_info("Memory: %luk/%luk available (%ldk kernel code, %ldk reserved, %ldk data, %ldk init)\n",
+	       tmp << (PAGE_SHIFT-10),
+	       totalram_pages << (PAGE_SHIFT-10),
+	       codesize >> 10,
+	       (totalram_pages - tmp) << (PAGE_SHIFT-10),
+	       datasize >> 10,
+	       initsize >> 10);
+}
+
+int of_node_to_nid(struct device_node *np)
+{
+	int ret = 0;
+	struct device_node *node;
+
+	if (!np)
+		return 0;
+
+	node = of_node_get(np);
+	do {
+		if (strcmp("soc", node->name) == 0) {
+			int rc;
+			u32 msbits = 0;
+
+			rc = of_property_read_u32_index(node, "ranges",	2, &msbits);
+			if (rc == -EINVAL)
+				WARN_ONCE(true, "Missing ranges property<%s>\n", node->full_name);
+			ret = (msbits >> 4) & 1;
+			break;
+		}
+		node = of_get_next_parent(node);
+	} while (node);
+
+	of_node_put(node);
+	return ret;
+}
+EXPORT_SYMBOL(of_node_to_nid);
diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index e9c52568fbf8..4c8818c2e7b7 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -30,6 +30,11 @@
 #include <linux/kexec.h>
 #include <linux/initrd.h>
 
+#include <linux/bootmem.h>
+#include <linux/memblock.h>
+
+#include <mmzone.h>
+
 #include <asm/processor.h>
 #include <asm/reboot.h>
 #include <asm/smp-ops.h>
@@ -873,6 +878,7 @@ void __init prom_init(void)
 #endif
 
 	octeon_user_io_init();
+	octeon_setup_numa();
 	octeon_setup_smp();
 
 #ifdef CONFIG_CAVIUM_GDB
@@ -1082,19 +1088,13 @@ void __init plat_mem_setup(void)
 		mem_alloc_size = max_memory;
 
 	cvmx_bootmem_lock();
+	limit_min = __pa_symbol(&__init_end);
 	while ((boot_mem_map.nr_map < BOOT_MEM_MAP_MAX)
-		&& (total < max_memory)) {
-#if defined(CONFIG_64BIT) || defined(CONFIG_64BIT_PHYS_ADDR)
+	       && (total < max_memory)) {
 		if (total < MIN_MEM_32)
 			limit_max = (1ull << 32)-1;	/* 4GBytes */
 		else
 			limit_max = ~0ull;		/* unlimitted */
-#elif defined(CONFIG_HIGHMEM)
-		limit_max = (1ull << 31) - 1;	/* 4GBytes */
-#else
-		limit_max = (1ull << 29) - 1;	/* 512MBytes */
-#endif
-		limit_min = __pa_symbol(&__init_end);
 
 		memory = cvmx_bootmem_phy_alloc(mem_alloc_size,
 				limit_min, limit_max, 0x100000,
@@ -1102,7 +1102,6 @@ void __init plat_mem_setup(void)
 
 		if (memory >= 0) {
 			u64 size = mem_alloc_size;
-
 			/*
 			 * exclude a page at the beginning and end of
 			 * the 256MB PCIe 'hole' so the kernel will not
@@ -1146,6 +1145,99 @@ void __init plat_mem_setup(void)
 	cvmx_qlm_init();
 }
 
+struct node_data __node_data[4];
+
+void __init mach_bootmem_init(void)
+{
+	int i;
+	int node;
+
+	min_low_pfn = ~0UL;
+	max_low_pfn = 0;
+
+	for (i = 0; i < boot_mem_map.nr_map; i++) {
+		unsigned long start, end;
+		struct node_data *nd;
+		bool is_usable;
+
+		switch (boot_mem_map.map[i].type) {
+		case BOOT_MEM_RAM:
+			is_usable = true;
+			break;
+		case BOOT_MEM_KERNEL:
+		case BOOT_MEM_INIT_RAM:
+			is_usable = false;
+			break;
+		default:
+			/* Not usable memory */
+			continue;
+		}
+		start = PFN_UP(boot_mem_map.map[i].addr);
+		end = PFN_DOWN(boot_mem_map.map[i].addr
+				+ boot_mem_map.map[i].size);
+		node = pa_to_nid(boot_mem_map.map[i].addr);
+		nd = __node_data + node;
+
+		if (max_low_pfn < end)
+			max_low_pfn = end;
+		if (min_low_pfn > start)
+			min_low_pfn = start;
+
+		memblock_add_node(PFN_PHYS(start), PFN_PHYS(end - start), node);
+
+		if (nd->endpfn == 0) {
+			nd->startpfn = start;
+			nd->endpfn = end;
+		} else {
+			if (nd->startpfn > start)
+				nd->startpfn = start;
+			if (nd->endpfn < end)
+				nd->endpfn = end;
+		}
+		if (is_usable && (nd->startmempfn == 0 || start < nd->startmempfn))
+			nd->startmempfn = start;
+	}
+	totalram_pages = 0;
+
+	for_each_online_node(node) {
+		unsigned long bootmap_size;
+		struct node_data *nd = __node_data + node;
+		if (nd->endpfn == 0)
+			continue;
+		NODE_DATA(node)->bdata = &bootmem_node_data[node];
+		bootmap_size = init_bootmem_node(NODE_DATA(node), nd->startmempfn, nd->startpfn,  nd->endpfn);
+
+		for (i = 0; i < boot_mem_map.nr_map; i++) {
+			int map_nid;
+			bool is_init;
+
+			switch (boot_mem_map.map[i].type) {
+			case BOOT_MEM_RAM:
+				is_init = false;
+				break;
+			case BOOT_MEM_INIT_RAM:
+				is_init = true;
+				break;
+			default:
+				/* Not usable memory */
+				continue;
+			}
+			map_nid = pa_to_nid(boot_mem_map.map[i].addr);
+			if (map_nid != node)
+				continue;
+			memory_present(node,
+				       PFN_DOWN(boot_mem_map.map[i].addr),
+				       PFN_UP(boot_mem_map.map[i].addr + boot_mem_map.map[i].size));
+			if (!is_init) {
+				totalram_pages += PFN_DOWN(boot_mem_map.map[i].size);
+				memblock_add_node(boot_mem_map.map[i].addr, boot_mem_map.map[i].size, node);
+				free_bootmem_node(NODE_DATA(node), boot_mem_map.map[i].addr, boot_mem_map.map[i].size);
+			}
+		}
+		reserve_bootmem(PFN_PHYS(nd->startmempfn), bootmap_size, BOOTMEM_DEFAULT);
+	}
+}
+
 /*
  * Emit one character to the boot UART.	 Exported for use by the
  * watchdog timer.
diff --git a/arch/mips/cavium-octeon/smp.c b/arch/mips/cavium-octeon/smp.c
index f9c81cee98ca..3f7a2cee95d2 100644
--- a/arch/mips/cavium-octeon/smp.c
+++ b/arch/mips/cavium-octeon/smp.c
@@ -330,6 +330,7 @@ static void octeon_smp_finish(void)
 	octeon_user_io_init();
 	per_cpu(cpu_state, smp_processor_id()) = CPU_ONLINE;
 	mb();
+	octeon_numa_cpu_online();
 
 	/* to generate the first CPU timer interrupt */
 	write_c0_compare(read_c0_count() + mips_hpt_frequency / HZ);
diff --git a/arch/mips/include/asm/mach-cavium-octeon/irq.h b/arch/mips/include/asm/mach-cavium-octeon/irq.h
index 87ec4a38bdb2..bf0002b85aff 100644
--- a/arch/mips/include/asm/mach-cavium-octeon/irq.h
+++ b/arch/mips/include/asm/mach-cavium-octeon/irq.h
@@ -11,6 +11,14 @@
 #define NR_IRQS OCTEON_IRQ_LAST
 #define MIPS_CPU_IRQ_BASE OCTEON_IRQ_SW0
 
+/*
+ * 0    - unused.
+ * 1..8 - MIPS
+ *
+ * For a total of 9
+ */
+#define NR_IRQS_LEGACY 9
+
 enum octeon_irq {
 /* 1 - 8 represent the 8 MIPS standard interrupt sources */
 	OCTEON_IRQ_SW0 = 1,
diff --git a/arch/mips/include/asm/mach-cavium-octeon/mach_bootmem.h b/arch/mips/include/asm/mach-cavium-octeon/mach_bootmem.h
new file mode 100644
index 000000000000..3d8d1deb088e
--- /dev/null
+++ b/arch/mips/include/asm/mach-cavium-octeon/mach_bootmem.h
@@ -0,0 +1,8 @@
+#ifndef _ASM_MACH_CAVIUM_OCTEON_MACH_BOOTMEM_H
+#define _ASM_MACH_CAVIUM_OCTEON_MACH_BOOTMEM_H
+
+void mach_bootmem_init(void);
+
+#define mach_bootmem_init mach_bootmem_init
+
+#endif /* _ASM_MACH_CAVIUM_OCTEON_MACH_BOOTMEM_H */
diff --git a/arch/mips/include/asm/mach-cavium-octeon/mmzone.h b/arch/mips/include/asm/mach-cavium-octeon/mmzone.h
new file mode 100644
index 000000000000..547098c697e0
--- /dev/null
+++ b/arch/mips/include/asm/mach-cavium-octeon/mmzone.h
@@ -0,0 +1,20 @@
+#ifndef _ASM_MACH_CAVIUM_OCTEON_MMZONE_H
+#define _ASM_MACH_CAVIUM_OCTEON_MMZONE_H
+
+struct node_data {
+#ifdef CONFIG_NUMA
+	struct pglist_data pglist;
+	struct cpumask cpumask_on_node;
+#endif
+	unsigned long startmempfn;
+	unsigned long startpfn;
+	unsigned long endpfn;
+};
+
+extern struct node_data __node_data[];
+
+#ifdef CONFIG_NUMA
+#define NODE_DATA(n)		(&__node_data[(n)].pglist)
+#endif
+
+#endif /* _ASM_MACH_CAVIUM_OCTEON_MMZONE_H */
diff --git a/arch/mips/include/asm/octeon/octeon.h b/arch/mips/include/asm/octeon/octeon.h
index 606b6a7e94f3..94e89d08256d 100644
--- a/arch/mips/include/asm/octeon/octeon.h
+++ b/arch/mips/include/asm/octeon/octeon.h
@@ -470,6 +470,14 @@ void octeon_release_ipi_handler(int action);
 
 #define OCTEON_DEBUG_UART 1
 
+#ifdef CONFIG_NUMA
+void octeon_setup_numa(void);
+void octeon_numa_cpu_online(void);
+#else
+static inline void octeon_setup_numa(void) {}
+static inline void octeon_numa_cpu_online(void) {}
+#endif
+
 extern void (*octeon_scache_init)(void);
 int register_co_cache_error_notifier(struct notifier_block *nb);
 int unregister_co_cache_error_notifier(struct notifier_block *nb);
-- 
2.25.1

