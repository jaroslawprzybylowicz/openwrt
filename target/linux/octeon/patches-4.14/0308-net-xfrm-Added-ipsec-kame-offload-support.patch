From ac93aa48e937fcb2ff03985aec1247b4646ddebb Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Sun, 9 Jun 2019 17:27:53 +0200
Subject: [PATCH 308/345] net: xfrm: Added ipsec kame offload support.

This is required for ipsec-kame-offload module in SDK.

Signed-off-by: Abhijit Ayarekar <abhijit.ayarekar@cavium.com>
Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
---
 arch/mips/cavium-octeon/Kconfig |  9 ++++++
 include/net/xfrm.h              | 11 +++++++
 net/ipv4/esp4.c                 | 16 ++++++++++
 net/ipv6/esp6.c                 | 15 +++++++++
 net/xfrm/xfrm_input.c           | 56 +++++++++++++++++++++++++++++++++
 net/xfrm/xfrm_output.c          | 47 ++++++++++++++++++++++++---
 net/xfrm/xfrm_policy.c          | 11 +++++++
 7 files changed, 161 insertions(+), 4 deletions(-)

diff --git a/arch/mips/cavium-octeon/Kconfig b/arch/mips/cavium-octeon/Kconfig
index c566c28e6470..67a358698f36 100644
--- a/arch/mips/cavium-octeon/Kconfig
+++ b/arch/mips/cavium-octeon/Kconfig
@@ -211,4 +211,13 @@ config OCTEON_ERROR_INJECTOR
 	  Used to test hardware error reporting.  Should never be used
 	  in a normal running system.
 
+config CAVIUM_OCTEON_IPSEC
+       bool "Enable enhancements to the IPSec stack to allow procotol offload."
+       default "n"
+       depends on NET_KEY
+       help
+         This enables enhancements to the IPSec stack to allow some of the
+         processing required for IPSec to be performed on another processor
+         which must be running the ipsec-filter application.
+
 endif # CAVIUM_OCTEON_SOC
diff --git a/include/net/xfrm.h b/include/net/xfrm.h
index db99efb2d1d0..ff117574e1d9 100644
--- a/include/net/xfrm.h
+++ b/include/net/xfrm.h
@@ -244,6 +244,14 @@ struct xfrm_state {
 	/* Private data of this transformer, format is opaque,
 	 * interpreted by xfrm_type methods. */
 	void			*data;
+
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+	void            	*sa_handle;
+	struct xfrm_policy  	*pol;
+	u8 			*iv;
+	int 			ivinitted;
+#endif  /* defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY) */
+
 };
 
 static inline struct net *xs_net(struct xfrm_state *x)
@@ -587,6 +595,9 @@ struct xfrm_policy {
 	struct xfrm_sec_ctx	*security;
 	struct xfrm_tmpl       	xfrm_vec[XFRM_MAX_DEPTH];
 	struct rcu_head		rcu;
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+    struct xfrm_state   *x;
+#endif /* defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY) */
 };
 
 static inline struct net *xp_net(const struct xfrm_policy *xp)
diff --git a/net/ipv4/esp4.c b/net/ipv4/esp4.c
index b00e4a43b4dc..fd32d3d03f28 100644
--- a/net/ipv4/esp4.c
+++ b/net/ipv4/esp4.c
@@ -814,6 +814,13 @@ static void esp_destroy(struct xfrm_state *x)
 {
 	struct crypto_aead *aead = x->data;
 
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+	if (x->iv) {
+		kfree(x->iv);
+		x->iv = NULL;
+	}
+#endif
+
 	if (!aead)
 		return;
 
@@ -970,6 +977,15 @@ static int esp_init_state(struct xfrm_state *x)
 
 	aead = x->data;
 
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+	if(crypto_aead_ivsize(aead)) {
+		x->iv = kmalloc(crypto_aead_ivsize(aead), GFP_KERNEL);
+		if (unlikely(x->iv == NULL))
+			goto error;
+		x->ivinitted = 0;
+	}
+#endif
+
 	x->props.header_len = sizeof(struct ip_esp_hdr) +
 			      crypto_aead_ivsize(aead);
 	if (x->props.mode == XFRM_MODE_TUNNEL)
diff --git a/net/ipv6/esp6.c b/net/ipv6/esp6.c
index f112fef79216..cea955a3091c 100644
--- a/net/ipv6/esp6.c
+++ b/net/ipv6/esp6.c
@@ -725,6 +725,13 @@ static void esp6_destroy(struct xfrm_state *x)
 {
 	struct crypto_aead *aead = x->data;
 
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+	if (x->iv) {
+		kfree(x->iv);
+		x->iv = NULL;
+	}
+#endif
+
 	if (!aead)
 		return;
 
@@ -884,6 +891,14 @@ static int esp6_init_state(struct xfrm_state *x)
 
 	aead = x->data;
 
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+	if(crypto_aead_ivsize(aead)) {
+		x->iv = kmalloc(crypto_aead_ivsize(aead), GFP_KERNEL);
+		if (unlikely(x->iv == NULL))
+			goto error;
+		x->ivinitted = 0;
+	}
+#endif
 	x->props.header_len = sizeof(struct ip_esp_hdr) +
 			      crypto_aead_ivsize(aead);
 	switch (x->props.mode) {
diff --git a/net/xfrm/xfrm_input.c b/net/xfrm/xfrm_input.c
index 9f492dc417d5..39a510df9ca5 100644
--- a/net/xfrm/xfrm_input.c
+++ b/net/xfrm/xfrm_input.c
@@ -20,6 +20,10 @@
 #include <net/ip_tunnels.h>
 #include <net/ip6_tunnel.h>
 
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+extern int (*cavium_ipsec_process)(void *, struct sk_buff *, int, int);
+#endif
+
 struct xfrm_trans_tasklet {
 	struct tasklet_struct tasklet;
 	struct sk_buff_head queue;
@@ -236,6 +240,9 @@ int xfrm_input(struct sk_buff *skb, int nexthdr, __be32 spi, int encap_type)
 	bool crypto_done = false;
 	struct xfrm_offload *xo = xfrm_offload(skb);
 
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+	int offset = 0;
+#endif
 	if (encap_type < 0) {
 		x = xfrm_input_state(skb);
 
@@ -362,7 +369,53 @@ int xfrm_input(struct sk_buff *skb, int nexthdr, __be32 spi, int encap_type)
 			XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATESEQERROR);
 			goto drop_unlock;
 		}
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+		/*
+		 * If Octeon IPSEC Acceleration module has been loaded
+ 		 * call it, otherwise, follow the software path
+ 		 */
+		if (cavium_ipsec_process) {
+			if (x->props.replay_window && x->repl->check(x, skb, seq) ) {
+				XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATESEQERROR);
+				goto drop_unlock;
+			}
+
+			if (xfrm_state_check_expire(x)) {
+				XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEEXPIRED);
+				goto drop_unlock;
+			}
 
+			spin_unlock(&x->lock);
+			seq_hi = htonl(xfrm_replay_seqhi(x, seq));
+
+			XFRM_SKB_CB(skb)->seq.input.low = seq;
+			XFRM_SKB_CB(skb)->seq.input.hi = seq_hi;
+
+			skb_dst_force(skb);
+			switch (nexthdr) {
+				case IPPROTO_AH:
+					offset = offsetof(struct ip_auth_hdr, spi);
+					break;
+				case IPPROTO_ESP:
+					offset = offsetof(struct ip_esp_hdr, spi);
+					break;
+				default:
+					return 1;
+			}
+			offset += (uint64_t)skb->data - (uint64_t)ip_hdr(skb);
+			/*
+			 * skb->data points to the start of the esp/ah header
+			 * but we require skb->data to point to the start of ip header.
+			 */
+			skb_push(skb, (unsigned int)((uint64_t)skb->data - (uint64_t)ip_hdr(skb)));
+			if ((skb_is_nonlinear(skb) || skb_cloned(skb)) && 
+					skb_linearize(skb) != 0) {
+				err = -ENOMEM;
+				goto drop_unlock;
+			}
+			nexthdr = cavium_ipsec_process(x, skb, offset, 0 /*DECRYPT*/);
+        } else  {  /* if (cavium_ipsec_process == NULL) */
+#endif
 		if (xfrm_state_check_expire(x)) {
 			XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEEXPIRED);
 			goto drop_unlock;
@@ -387,6 +440,9 @@ int xfrm_input(struct sk_buff *skb, int nexthdr, __be32 spi, int encap_type)
 			nexthdr = x->type_offload->input_tail(x, skb);
 		else
 			nexthdr = x->type->input(x, skb);
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+	}
+#endif
 
 		if (nexthdr == -EINPROGRESS)
 			return 0;
diff --git a/net/xfrm/xfrm_output.c b/net/xfrm/xfrm_output.c
index 35610cc881a9..ecfdb081a621 100644
--- a/net/xfrm/xfrm_output.c
+++ b/net/xfrm/xfrm_output.c
@@ -19,6 +19,18 @@
 #include <net/dst.h>
 #include <net/xfrm.h>
 
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+
+int (*cavium_ipsec_process)(void *, struct sk_buff *, int, int) = NULL;
+
+void set_cavium_ipsec_process(void *func)
+{
+	cavium_ipsec_process = func;
+	return;
+}
+EXPORT_SYMBOL(set_cavium_ipsec_process);
+#endif
+
 static int xfrm_output2(struct net *net, struct sock *sk, struct sk_buff *skb);
 
 static int xfrm_skb_check_space(struct sk_buff *skb)
@@ -107,10 +119,37 @@ static int xfrm_output_one(struct sk_buff *skb, int err)
 		} else {
 			/* Inner headers are invalid now. */
 			skb->encapsulation = 0;
-
-			err = x->type->output(x, skb);
-			if (err == -EINPROGRESS)
-				goto out;
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+	 		/*
+	 		 * If Octeon IPSEC Acceleration module has been loaded
+	 		 * call it, otherwise, follow the software path
+	 		*/
+			if(cavium_ipsec_process)
+			{
+				if (skb_is_nonlinear(skb) && skb_linearize(skb) != 0) {
+					err = -ENOMEM;
+					goto error;
+				}
+				/*
+				 * If Octeon IPSec Acceleration module is not able to handle the 
+				 * Cipher at any instance, Use the Software Path to hadnle it
+				 */
+				if (x->sa_handle != NULL) {
+					err = cavium_ipsec_process(x, skb, 0, 1 /*ENCRYPT*/);
+					if (err != 0) {
+						err = x->type->output(x, skb);
+					}
+				} else {
+					err = x->type->output(x, skb);
+				}
+			} else {
+				err = x->type->output(x, skb);
+			}
+#else
+		err = x->type->output(x, skb);
+#endif
+		if (err == -EINPROGRESS)
+			goto out;
 		}
 
 resume:
diff --git a/net/xfrm/xfrm_policy.c b/net/xfrm/xfrm_policy.c
index 2fb7a78308e1..bd51e959f2bb 100644
--- a/net/xfrm/xfrm_policy.c
+++ b/net/xfrm/xfrm_policy.c
@@ -2388,6 +2388,10 @@ static inline int secpath_has_nontransport(const struct sec_path *sp, int k, int
 	return 0;
 }
 
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+extern int (*cavium_ipsec_process)(void *, struct sk_buff *, int, int);
+#endif /* defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY) */
+
 int __xfrm_policy_check(struct sock *sk, int dir, struct sk_buff *skb,
 			unsigned short family)
 {
@@ -2472,6 +2476,10 @@ int __xfrm_policy_check(struct sock *sk, int dir, struct sk_buff *skb,
 #endif
 
 	if (pol->action == XFRM_POLICY_ALLOW) {
+
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+		if(!cavium_ipsec_process) {
+#endif /* defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY) */
 		struct sec_path *sp;
 		static struct sec_path dummy;
 		struct xfrm_tmpl *tp[XFRM_MAX_DEPTH];
@@ -2524,6 +2532,9 @@ int __xfrm_policy_check(struct sock *sk, int dir, struct sk_buff *skb,
 			goto reject;
 		}
 
+#if defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY)
+		}
+#endif /* defined(CONFIG_CAVIUM_OCTEON_IPSEC) && defined(CONFIG_NET_KEY) */
 		xfrm_pols_put(pols, npols);
 		return 1;
 	}
-- 
2.25.1

