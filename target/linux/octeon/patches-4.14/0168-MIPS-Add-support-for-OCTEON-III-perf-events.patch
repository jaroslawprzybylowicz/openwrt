From 1493f07c467c0711f127762030da24374f7f957c Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Fri, 17 May 2019 17:36:27 +0200
Subject: [PATCH 168/345] MIPS: Add support for OCTEON III perf events.

Add notifiers on pmu_enable/pmu_enable.

Update handling of OCTEON raw perf events.

They are mostly the same as previous OCTEON models, but we need to
enable them for the OCTEON III CPUs.

Signed-off-by: David Daney <david.daney@cavium.com>
---
 arch/mips/include/asm/perf_event.h   | 10 +++++++++-
 arch/mips/kernel/perf_event_mipsxx.c | 24 +++++++++++++++++++-----
 2 files changed, 28 insertions(+), 6 deletions(-)

diff --git a/arch/mips/include/asm/perf_event.h b/arch/mips/include/asm/perf_event.h
index d0c77496c728..0cf24f7d00aa 100644
--- a/arch/mips/include/asm/perf_event.h
+++ b/arch/mips/include/asm/perf_event.h
@@ -11,5 +11,13 @@
 
 #ifndef __MIPS_PERF_EVENT_H__
 #define __MIPS_PERF_EVENT_H__
-/* Leave it empty here. The file is required by linux/perf_event.h */
+
+#include <linux/notifier.h>
+
+/* Allow CPU specific actions on PMU state changes. */
+int mipspmu_notifier_register(struct notifier_block *nb);
+int mipspmu_notifier_unregister(struct notifier_block *nb);
+#define MIPSPMU_ENABLE 0
+#define MIPSPMU_DISABLE 1
+
 #endif /* __MIPS_PERF_EVENT_H__ */
diff --git a/arch/mips/kernel/perf_event_mipsxx.c b/arch/mips/kernel/perf_event_mipsxx.c
index 6668f67a61c3..84b9c3a2bfbf 100644
--- a/arch/mips/kernel/perf_event_mipsxx.c
+++ b/arch/mips/kernel/perf_event_mipsxx.c
@@ -77,6 +77,17 @@ struct mips_perf_event {
 #endif
 };
 
+static ATOMIC_NOTIFIER_HEAD(mipsxx_pmu_chain);
+int mipspmu_notifier_register(struct notifier_block *nb)
+{
+	return atomic_notifier_chain_register(&mipsxx_pmu_chain, nb);
+}
+
+int mipspmu_notifier_unregister(struct notifier_block *nb)
+{
+	return atomic_notifier_chain_unregister(&mipsxx_pmu_chain, nb);
+}
+
 static struct mips_perf_event raw_event;
 static DEFINE_MUTEX(raw_event_mutex);
 
@@ -515,6 +526,7 @@ static void mipspmu_enable(struct pmu *pmu)
 	write_unlock(&pmuint_rwlock);
 #endif
 	resume_local_counters();
+	atomic_notifier_call_chain(&mipsxx_pmu_chain, MIPSPMU_ENABLE, NULL);
 }
 
 /*
@@ -534,6 +546,7 @@ static void mipspmu_disable(struct pmu *pmu)
 #ifdef CONFIG_MIPS_PERF_SHARED_TC_COUNTERS
 	write_lock(&pmuint_rwlock);
 #endif
+	atomic_notifier_call_chain(&mipsxx_pmu_chain, MIPSPMU_DISABLE, NULL);
 }
 
 static atomic_t active_events = ATOMIC_INIT(0);
@@ -1663,14 +1676,15 @@ static const struct mips_perf_event *mipsxx_pmu_map_raw_event(u64 config)
 
 static const struct mips_perf_event *octeon_pmu_map_raw_event(u64 config)
 {
-	unsigned int raw_id = config & 0xff;
-	unsigned int base_id = raw_id & 0x7f;
-
+	unsigned int base_id = config & 0x7f;
 
 	raw_event.cntr_mask = CNTR_ALL;
 	raw_event.event_id = base_id;
 
-	if (current_cpu_type() == CPU_CAVIUM_OCTEON2) {
+	if (current_cpu_type() == CPU_CAVIUM_OCTEON3) {
+		if (base_id > 0x5f)
+			return ERR_PTR(-EOPNOTSUPP);
+	} else if (current_cpu_type() == CPU_CAVIUM_OCTEON2) {
 		if (base_id > 0x42)
 			return ERR_PTR(-EOPNOTSUPP);
 	} else {
@@ -1685,7 +1699,6 @@ static const struct mips_perf_event *octeon_pmu_map_raw_event(u64 config)
 	case 0x1f:
 	case 0x2f:
 	case 0x34:
-	case 0x3b ... 0x3f:
 		return ERR_PTR(-EOPNOTSUPP);
 	default:
 		break;
@@ -1806,6 +1819,7 @@ init_hw_perf_events(void)
 	case CPU_CAVIUM_OCTEON:
 	case CPU_CAVIUM_OCTEON_PLUS:
 	case CPU_CAVIUM_OCTEON2:
+	case CPU_CAVIUM_OCTEON3:
 		mipspmu.name = "octeon";
 		mipspmu.general_event_map = &octeon_event_map;
 		mipspmu.cache_event_map = &octeon_cache_map;
-- 
2.25.1

