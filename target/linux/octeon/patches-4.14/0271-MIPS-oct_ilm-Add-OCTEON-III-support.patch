From 3b6b1bfa51ed46696ba28cb006b124028038eb98 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Thu, 9 May 2019 16:44:39 +0200
Subject: [PATCH 271/345] MIPS: oct_ilm: Add OCTEON III support.

Use OCTEON III specific interrupt mapping, and register addresses.

Signed-off-by: David Daney <david.daney@cavium.com>
---
 arch/mips/cavium-octeon/oct_ilm.c | 43 +++++++++++++++++++++----------
 1 file changed, 30 insertions(+), 13 deletions(-)

diff --git a/arch/mips/cavium-octeon/oct_ilm.c b/arch/mips/cavium-octeon/oct_ilm.c
index 38a4c4327b94..0a3047d831b2 100644
--- a/arch/mips/cavium-octeon/oct_ilm.c
+++ b/arch/mips/cavium-octeon/oct_ilm.c
@@ -2,6 +2,7 @@
 #include <linux/interrupt.h>
 #include <asm/octeon/octeon.h>
 #include <asm/octeon/cvmx-ciu-defs.h>
+#include <asm/octeon/cvmx-ciu3-defs.h>
 #include <asm/octeon/cvmx.h>
 #include <linux/debugfs.h>
 #include <linux/kernel.h>
@@ -10,6 +11,9 @@
 
 #define TIMER_NUM 3
 
+static int oct_ilm_irq;
+static u64 ciu_timx_reg;
+
 static bool reset_stats;
 
 struct latency_info {
@@ -113,7 +117,7 @@ static void init_latency_info(struct latency_info *li, int startup)
 }
 
 
-static void start_timer(int timer, u64 interval)
+static void start_timer(u64 interval)
 {
 	union cvmx_ciu_timx timx;
 	unsigned long flags;
@@ -123,9 +127,9 @@ static void start_timer(int timer, u64 interval)
 	timx.s.len = interval;
 	raw_local_irq_save(flags);
 	li.timer_start1 = read_c0_cvmcount();
-	cvmx_write_csr(CVMX_CIU_TIMX(timer), timx.u64);
+	cvmx_write_csr(ciu_timx_reg, timx.u64);
 	/* Read it back to force wait until register is written. */
-	timx.u64 = cvmx_read_csr(CVMX_CIU_TIMX(timer));
+	timx.u64 = cvmx_read_csr(ciu_timx_reg);
 	li.timer_start2 = read_c0_cvmcount();
 	raw_local_irq_restore(flags);
 }
@@ -149,25 +153,38 @@ static irqreturn_t cvm_oct_ciu_timer_interrupt(int cpl, void *dev_id)
 		if (last_latency < li.min_latency)
 			li.min_latency = last_latency;
 	}
-	start_timer(TIMER_NUM, li.io_interval);
+	start_timer(li.io_interval);
 	return IRQ_HANDLED;
 }
 
-static void disable_timer(int timer)
+static void disable_timer(void)
 {
 	union cvmx_ciu_timx timx;
 
 	timx.s.one_shot = 0;
 	timx.s.len = 0;
-	cvmx_write_csr(CVMX_CIU_TIMX(timer), timx.u64);
+	cvmx_write_csr(ciu_timx_reg, timx.u64);
 	/* Read it back to force immediate write of timer register*/
-	timx.u64 = cvmx_read_csr(CVMX_CIU_TIMX(timer));
+	timx.u64 = cvmx_read_csr(ciu_timx_reg);
 }
 
 static __init int oct_ilm_module_init(void)
 {
 	int rc;
-	int irq = OCTEON_IRQ_TIMER0 + TIMER_NUM;
+
+	if (octeon_has_feature(OCTEON_FEATURE_CIU3)) {
+		int intsn = 0x2000 + 0x80 * TIMER_NUM;
+		struct irq_domain *d = octeon_irq_get_block_domain(0, intsn >> 12);
+
+		oct_ilm_irq = irq_create_mapping(d, intsn);
+		irqd_set_trigger_type(irq_get_irq_data(oct_ilm_irq),
+				      IRQ_TYPE_EDGE_RISING);
+
+		ciu_timx_reg = CVMX_CIU3_TIMX(TIMER_NUM);
+	} else {
+		oct_ilm_irq = OCTEON_IRQ_TIMER0 + TIMER_NUM;
+		ciu_timx_reg = CVMX_CIU_TIMX(TIMER_NUM);
+	}
 
 	rc = init_debufs();
 	if (rc) {
@@ -175,15 +192,15 @@ static __init int oct_ilm_module_init(void)
 		return rc;
 	}
 
-	rc = request_irq(irq, cvm_oct_ciu_timer_interrupt, IRQF_NO_THREAD,
+	rc = request_irq(oct_ilm_irq, cvm_oct_ciu_timer_interrupt, IRQF_NO_THREAD,
 			 "oct_ilm", 0);
 	if (rc) {
-		WARN(1, "Could not acquire IRQ %d", irq);
+		WARN(1, "Could not acquire IRQ %d", oct_ilm_irq);
 		goto err_irq;
 	}
 
 	init_latency_info(&li, 1);
-	start_timer(TIMER_NUM, li.io_interval);
+	start_timer(li.io_interval);
 
 	return 0;
 err_irq:
@@ -193,9 +210,9 @@ static __init int oct_ilm_module_init(void)
 
 static __exit void oct_ilm_module_exit(void)
 {
-	disable_timer(TIMER_NUM);
+	disable_timer();
 	debugfs_remove_recursive(dir);
-	free_irq(OCTEON_IRQ_TIMER0 + TIMER_NUM, 0);
+	free_irq(oct_ilm_irq, 0);
 }
 
 module_exit(oct_ilm_module_exit);
-- 
2.25.1

