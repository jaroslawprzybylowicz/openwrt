From 0ddfb9e9de0ec98001a45281993cfc14fa718041 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Sat, 4 May 2019 19:15:13 +0200
Subject: [PATCH 213/345] MIPS: OCTEON: Add csrc-fpa-clk.

In multi-node OCTEON systems, we need a clocksource usable from all
CPUs.  Since the node reference clocks can drift, we use FPA_CLK_COUNT
on node-0 as the common clock.  If only a single node is present, we
continue to use the CVMCNT based counter.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Carlos Munoz <cmunoz@caviumnetworks.com>
---
 arch/mips/cavium-octeon/Makefile       |  1 +
 arch/mips/cavium-octeon/csrc-fpa-clk.c | 64 ++++++++++++++++++++++++++
 arch/mips/cavium-octeon/csrc-octeon.c  | 28 ++++++++---
 3 files changed, 87 insertions(+), 6 deletions(-)
 create mode 100644 arch/mips/cavium-octeon/csrc-fpa-clk.c

diff --git a/arch/mips/cavium-octeon/Makefile b/arch/mips/cavium-octeon/Makefile
index d908b3372301..4b2f66643bd3 100644
--- a/arch/mips/cavium-octeon/Makefile
+++ b/arch/mips/cavium-octeon/Makefile
@@ -22,6 +22,7 @@ obj-y += crypto/
 obj-$(CONFIG_MTD)		      += flash_setup.o
 obj-$(CONFIG_SMP)		      += smp.o
 obj-$(CONFIG_NUMA)			+= octeon-numa.o
+obj-$(CONFIG_NUMA)			+= csrc-fpa-clk.o
 obj-$(CONFIG_OCTEON_ILM)	      += oct_ilm.o
 obj-$(CONFIG_USB)		      += octeon-usb.o
 obj-$(CONFIG_SYSFS)                   += octeon-power-throttle.o
diff --git a/arch/mips/cavium-octeon/csrc-fpa-clk.c b/arch/mips/cavium-octeon/csrc-fpa-clk.c
new file mode 100644
index 000000000000..ea34df0a6447
--- /dev/null
+++ b/arch/mips/cavium-octeon/csrc-fpa-clk.c
@@ -0,0 +1,64 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2014 Cavium, Inc.
+ *
+ * clocksource provider driven by node-0 FPA_CLK_COUNT.  This will
+ * give consistent time across multi-node NUMA systems.
+ */
+#include <linux/clocksource.h>
+
+#include <asm/octeon/octeon.h>
+#include <asm/octeon/cvmx-fpa-defs.h>
+#include <asm/octeon/cvmx-rst-defs.h>
+
+static u64 csrc_fpa_clk_read(struct clocksource *cs)
+{
+	return cvmx_read_csr(CVMX_FPA_CLK_COUNT);
+}
+
+static struct clocksource csrc_fpa_clk = {
+	.name		= "OCTEON_FPA_CLK_COUNT",
+	.read		= csrc_fpa_clk_read,
+	.mask		= CLOCKSOURCE_MASK(64),
+	.flags		= CLOCK_SOURCE_IS_CONTINUOUS,
+};
+
+void __init csrc_fpa_clk_init(void)
+{
+	union cvmx_rst_boot rst_boot;
+	u64 f;
+
+	rst_boot.u64 = cvmx_read_csr(CVMX_RST_BOOT);
+
+	f = 50000000ull * rst_boot.s.pnr_mul;
+
+	csrc_fpa_clk.rating = 300;
+	clocksource_register_hz(&csrc_fpa_clk, f);
+}
+
+unsigned long long notrace csrc_fpa_clk_sched_clock(void)
+{
+	/* 64-bit arithmatic can overflow, so use 128-bit.  */
+	u64 t1, t2, t3;
+	unsigned long long rv;
+	u64 mult = csrc_fpa_clk.mult;
+	u64 shift = csrc_fpa_clk.shift;
+	u64 cnt = cvmx_read_csr(CVMX_FPA_CLK_COUNT);
+
+	asm (
+		"dmultu\t%[cnt],%[mult]\n\t"
+		"nor\t%[t1],$0,%[shift]\n\t"
+		"mfhi\t%[t2]\n\t"
+		"mflo\t%[t3]\n\t"
+		"dsll\t%[t2],%[t2],1\n\t"
+		"dsrlv\t%[rv],%[t3],%[shift]\n\t"
+		"dsllv\t%[t1],%[t2],%[t1]\n\t"
+		"or\t%[rv],%[t1],%[rv]\n\t"
+		: [rv] "=&r" (rv), [t1] "=&r" (t1), [t2] "=&r" (t2), [t3] "=&r" (t3)
+		: [cnt] "r" (cnt), [mult] "r" (mult), [shift] "r" (shift)
+		: "hi", "lo");
+	return rv;
+}
diff --git a/arch/mips/cavium-octeon/csrc-octeon.c b/arch/mips/cavium-octeon/csrc-octeon.c
index 0552212fbaa4..83ae57f6724c 100644
--- a/arch/mips/cavium-octeon/csrc-octeon.c
+++ b/arch/mips/cavium-octeon/csrc-octeon.c
@@ -109,22 +109,30 @@ static u64 octeon_cvmcount_read(struct clocksource *cs)
 	return read_c0_cvmcount();
 }
 
-static struct clocksource clocksource_mips = {
+static struct clocksource csrc_octeon = {
 	.name		= "OCTEON_CVMCOUNT",
 	.read		= octeon_cvmcount_read,
 	.mask		= CLOCKSOURCE_MASK(64),
 	.flags		= CLOCK_SOURCE_IS_CONTINUOUS,
 };
 
+static bool use_fpa_clk;
+unsigned long long csrc_fpa_clk_sched_clock(void);
+void csrc_fpa_clk_init(void);
+
 unsigned long long notrace sched_clock(void)
 {
 	/* 64-bit arithmatic can overflow, so use 128-bit.  */
 	u64 t1, t2, t3;
 	unsigned long long rv;
-	u64 mult = clocksource_mips.mult;
-	u64 shift = clocksource_mips.shift;
-	u64 cnt = read_c0_cvmcount();
+	u64 mult, shift, cnt;
+
+	if (use_fpa_clk)
+		return csrc_fpa_clk_sched_clock();
 
+	mult = csrc_octeon.mult;
+	shift = csrc_octeon.shift;
+	cnt = read_c0_cvmcount();
 	asm (
 		"dmultu\t%[cnt],%[mult]\n\t"
 		"nor\t%[t1],$0,%[shift]\n\t"
@@ -142,8 +150,16 @@ unsigned long long notrace sched_clock(void)
 
 void __init plat_time_init(void)
 {
-	clocksource_mips.rating = 300;
-	clocksource_register_hz(&clocksource_mips, octeon_get_clock_rate());
+#ifdef CONFIG_NUMA
+	if (num_online_nodes() > 1)
+		use_fpa_clk = true;
+#endif
+	if (use_fpa_clk) {
+		csrc_fpa_clk_init();
+	} else {
+		csrc_octeon.rating = 300;
+		clocksource_register_hz(&csrc_octeon, octeon_get_clock_rate());
+	}
 }
 
 void __udelay(unsigned long us)
-- 
2.25.1

