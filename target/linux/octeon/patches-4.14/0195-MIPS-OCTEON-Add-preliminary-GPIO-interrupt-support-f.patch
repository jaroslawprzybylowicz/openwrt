From 6755e242bfe10e016900f45cd02e0893f497d57d Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Thu, 23 May 2019 18:36:38 +0200
Subject: [PATCH 195/345] MIPS: OCTEON: Add preliminary GPIO interrupt support
 for cn78XX.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Carlos Munoz <carlos.munoz@caviumnetworks.com>
---
 arch/mips/cavium-octeon/octeon-irq.c | 204 +++++++++++++++++++++++++--
 arch/mips/cavium-octeon/setup.c      |   6 +-
 arch/mips/pci/msi-octeon.c           |   1 -
 3 files changed, 198 insertions(+), 13 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-irq.c b/arch/mips/cavium-octeon/octeon-irq.c
index 1586cb44c64d..971903969ba6 100644
--- a/arch/mips/cavium-octeon/octeon-irq.c
+++ b/arch/mips/cavium-octeon/octeon-irq.c
@@ -121,6 +121,11 @@ void octeon_irq_free_cd(struct irq_domain *d, unsigned int irq)
 static int octeon_irq_force_ciu_mapping(struct irq_domain *domain,
 					int irq, int line, int bit)
 {
+	int r;
+
+	r = irq_alloc_desc_at(irq, 0);
+	WARN_ON(r < 0);
+
 	return irq_domain_associate(domain, irq, line << 6 | bit);
 }
 
@@ -254,7 +259,6 @@ static void __init octeon_irq_init_core(void)
 
 static int next_cpu_for_irq(struct irq_data *data)
 {
-
 #ifdef CONFIG_SMP
 	int cpu;
 	struct cpumask *mask = irq_data_get_affinity_mask(data);
@@ -264,7 +268,11 @@ static int next_cpu_for_irq(struct irq_data *data)
 	if (weight > 1) {
 		cpu = cd->current_cpu;
 		for (;;) {
+#ifdef CONFIG_NUMA
+			cpu = cpumask_next_and(cpu, mask, cpumask_of_node(cd->ciu_node));
+#else
 			cpu = cpumask_next(cpu, mask);
+#endif
 			if (cpu >= nr_cpu_ids) {
 				cpu = -1;
 				continue;
@@ -273,9 +281,19 @@ static int next_cpu_for_irq(struct irq_data *data)
 			}
 		}
 	} else if (weight == 1) {
+#ifdef CONFIG_NUMA
+		cpu = cpumask_first_and(mask, cpumask_of_node(cd->ciu_node));
+		if (cpu >= nr_cpu_ids)
+			cpu = cpumask_first(cpumask_of_node(cd->ciu_node));
+#else
 		cpu = cpumask_first(mask);
+#endif
 	} else {
+#ifdef CONFIG_NUMA
+		cpu = cpumask_first(cpumask_of_node(cd->ciu_node));
+#else
 		cpu = smp_processor_id();
+#endif
 	}
 	cd->current_cpu = cpu;
 	return cpu;
@@ -687,7 +705,7 @@ static void octeon_irq_gpio_setup(struct irq_data *data)
 	cfg.s.fil_cnt = 7;
 	cfg.s.fil_sel = 3;
 
-	cvmx_write_csr(CVMX_GPIO_BIT_CFGX(cd->gpio_line), cfg.u64);
+	cvmx_write_csr_node(cd->ciu_node, CVMX_GPIO_BIT_CFGX(cd->gpio_line), cfg.u64);
 }
 
 static void octeon_irq_ciu_enable_gpio_v2(struct irq_data *data)
@@ -744,6 +762,7 @@ static void octeon_irq_ciu_gpio_ack(struct irq_data *data)
 	mask = 1ull << (cd->gpio_line);
 
 	cvmx_write_csr(CVMX_GPIO_INT_CLR, mask);
+	cvmx_read_csr(CVMX_GPIO_INT_CLR);
 }
 
 #ifdef CONFIG_SMP
@@ -1438,6 +1457,15 @@ static int __init octeon_irq_init_ciu(
 	if (!dd)
 		return -ENOMEM;
 
+#ifdef CONFIG_SMP
+	/*
+	 * Set the default affinity to the boot cpu.  Currently
+	 * required by Ethernet Driver.
+	 */
+	cpumask_clear(irq_default_affinity);
+	cpumask_set_cpu(smp_processor_id(), irq_default_affinity);
+#endif
+
 	octeon_irq_init_ciu_percpu();
 	octeon_irq_setup_secondary = octeon_irq_setup_secondary_ciu;
 
@@ -1487,6 +1515,9 @@ static int __init octeon_irq_init_ciu(
 			goto err;
 	}
 
+	r = irq_alloc_descs_from(OCTEON_IRQ_MBOX0, 2, 0);
+	WARN_ON(r < 0);
+
 	r = octeon_irq_set_ciu_mapping(
 		OCTEON_IRQ_MBOX0, 0, 32, 0, chip_mbox, handle_percpu_irq);
 	if (r)
@@ -1529,6 +1560,8 @@ static int __init octeon_irq_init_ciu(
 		goto err;
 
 	/* CIU_1 */
+	r = irq_alloc_descs_from(OCTEON_IRQ_WDOG0, 16, 0);
+	WARN_ON(r < 0);
 	for (i = 0; i < 16; i++) {
 		r = octeon_irq_set_ciu_mapping(
 			i + OCTEON_IRQ_WDOG0, 1, i + 0, 0, chip_wd,
@@ -1538,6 +1571,8 @@ static int __init octeon_irq_init_ciu(
 	}
 
 	if (octeon_has_feature(OCTEON_FEATURE_SRIO)) {
+		r = irq_alloc_descs_from(OCTEON_IRQ_SRIO0, 4, 0);
+		WARN_ON(r < 0);
 		r = octeon_irq_set_ciu_mapping(OCTEON_IRQ_SRIO0, 1, 50, 0, chip, handle_level_irq);
 		if (r)
 			goto err;
@@ -1624,6 +1659,7 @@ static int __init octeon_irq_init_gpio(
 
 	return 0;
 }
+
 /*
  * Watchdog interrupts are special.  They are associated with a single
  * core, so we hardwire the affinity to that core.
@@ -2035,6 +2071,14 @@ static int __init octeon_irq_init_ciu2(
 	unsigned int i, r;
 	struct irq_domain *ciu_domain = NULL;
 
+#ifdef CONFIG_SMP
+	/*
+	 * Set the default affinity to the boot cpu.  Currently
+	 * required by Ethernet Driver.
+	 */
+	cpumask_clear(irq_default_affinity);
+	cpumask_set_cpu(smp_processor_id(), irq_default_affinity);
+#endif
 	octeon_irq_init_ciu2_percpu();
 	octeon_irq_setup_secondary = octeon_irq_setup_secondary_ciu2;
 
@@ -2058,6 +2102,8 @@ static int __init octeon_irq_init_ciu2(
 			goto err;
 	}
 
+	r = irq_alloc_descs_from(OCTEON_IRQ_WDOG0, 32, 0);
+	WARN_ON(r < 0);
 	for (i = 0; i < 32; i++) {
 		r = octeon_irq_set_ciu_mapping(i + OCTEON_IRQ_WDOG0, 1, i, 0,
 			&octeon_irq_chip_ciu2_wd, handle_level_irq);
@@ -2086,6 +2132,8 @@ static int __init octeon_irq_init_ciu2(
 			goto err;
 	}
 
+	r = irq_alloc_descs_from(OCTEON_IRQ_MBOX0, 4, 0);
+	WARN_ON(r < 0);
 	irq_set_chip_and_handler(OCTEON_IRQ_MBOX0, &octeon_irq_chip_ciu2_mbox, handle_percpu_irq);
 	irq_set_chip_and_handler(OCTEON_IRQ_MBOX1, &octeon_irq_chip_ciu2_mbox, handle_percpu_irq);
 	irq_set_chip_and_handler(OCTEON_IRQ_MBOX2, &octeon_irq_chip_ciu2_mbox, handle_percpu_irq);
@@ -3084,25 +3132,161 @@ static int __init octeon_irq_init_ciu3(struct device_node *ciu_node,
 	return 0;
 }
 
+static void octeon_irq_ciu3_enable_gpio(struct irq_data *data)
+{
+	octeon_irq_gpio_setup(data);
+	octeon_irq_ciu3_enable(data);
+}
+
+static void octeon_irq_ciu3_disable_gpio(struct irq_data *data)
+{
+	struct octeon_ciu_chip_data *cd;
+	cd = irq_data_get_irq_chip_data(data);
+
+	octeon_irq_ciu3_disable(data);
+}
+
+static void octeon_irq_ciu3_gpio_ack(struct irq_data *data)
+{
+	struct octeon_ciu_chip_data *cd;
+
+	cd = irq_data_get_irq_chip_data(data);
+
+	cvmx_write_csr_node(cd->ciu_node, CVMX_GPIO_INTRX(cd->gpio_line), 1);
+	cvmx_read_csr_node(cd->ciu_node, CVMX_GPIO_INTRX(cd->gpio_line));
+}
+
+void octeon_irq_ciu3_gpio_mask_ack(struct irq_data *data)
+{
+	union cvmx_ciu3_iscx_w1c isc_w1c;
+	u64 isc_w1c_addr;
+	struct octeon_ciu_chip_data *cd;
+	u32 trigger_type = irqd_get_trigger_type(data);
+
+	if (!(trigger_type & IRQ_TYPE_LEVEL_MASK))
+		octeon_irq_ciu3_gpio_ack(data);
+
+	cd = irq_data_get_irq_chip_data(data);
+
+	isc_w1c.u64 = 0;
+	isc_w1c.s.en = 1;
+
+	isc_w1c_addr = cd->ciu3_addr + CIU3_ISC_W1C(cd->intsn);
+	cvmx_write_csr(isc_w1c_addr, isc_w1c.u64);
+	cvmx_read_csr(isc_w1c_addr);
+}
+
+static struct irq_chip octeon_irq_chip_ciu3_gpio = {
+	.name = "CIU3-GPIO",
+	.irq_enable	= octeon_irq_ciu3_enable_gpio,
+	.irq_disable	= octeon_irq_ciu3_disable_gpio,
+	.irq_ack	= octeon_irq_ciu3_gpio_ack,
+	.irq_mask	= octeon_irq_ciu3_mask,
+	.irq_mask_ack	= octeon_irq_ciu3_gpio_mask_ack,
+	.irq_unmask	= octeon_irq_ciu3_enable,
+	.irq_set_type	= octeon_irq_ciu_gpio_set_type,
+#ifdef CONFIG_SMP
+	.irq_set_affinity = octeon_irq_ciu3_set_affinity,
+#endif
+	.flags = IRQCHIP_SET_TYPE_MASKED,
+};
+
+static int octeon_irq_gpio78_map(struct irq_domain *d,
+				 unsigned int virq, irq_hw_number_t hw)
+{
+	struct octeon_irq_gpio_domain_data *gpiod = d->host_data;
+	struct octeon_ciu3_info *ciu3_info;
+	struct octeon_ciu_chip_data *cd;
+
+	ciu3_info = octeon_irq_get_ciu3_info(of_node_to_nid(irq_domain_get_of_node(d)));
+
+	cd = kzalloc_node(sizeof(*cd), GFP_KERNEL, of_node_to_nid(irq_domain_get_of_node(d)));
+	if (!cd)
+		return -ENOMEM;
+
+	cd->intsn = gpiod->base_hwirq + hw;
+	cd->gpio_line = hw;
+	cd->current_cpu = -1;
+	cd->ciu3_addr = ciu3_info->ciu3_addr;
+	cd->ciu_node = ciu3_info->node;
+
+	irq_set_chip_and_handler(virq, &octeon_irq_chip_ciu3_gpio, handle_level_irq);
+	irq_set_chip_data(virq, cd);
+
+	return 0;
+}
+
+static struct irq_domain_ops octeon_irq_domain_gpio78_ops = {
+	.map = octeon_irq_gpio78_map,
+	.unmap = octeon_irq_free_cd,
+	.xlate = octeon_irq_gpio_xlat,
+};
+
+static irq_hw_number_t octeon_irq_ciu3_intsn2hw(struct irq_domain *d,
+						unsigned int intsn)
+{
+	struct octeon_irq_gpio_domain_data *gpiod = d->host_data;
+
+	return intsn - gpiod->base_hwirq;
+}
+
+static int __init octeon_irq_init_gpio78(struct device_node *gpio_node,
+					 struct device_node *parent)
+{
+	struct octeon_irq_gpio_domain_data *gpiod;
+	unsigned int base_hwirq;
+	int r;
+	u32 v;
+
+	r = of_property_read_u32_index(gpio_node, "interrupts", 0, &v);
+	if (r) {
+		pr_warn("No \"interrupts\" property.\n");
+		return r;
+	}
+	base_hwirq = v;
+
+	gpiod = kzalloc(sizeof(*gpiod), GFP_KERNEL);
+	if (gpiod) {
+		struct octeon_ciu3_info *ciu3_info;
+		struct irq_domain *domain;
+		int block = (base_hwirq >> 12) & 0xff;
+		int node = of_node_to_nid(gpio_node);
+
+		/* gpio domain host_data is the base hwirq number. */
+		gpiod->base_hwirq = base_hwirq;
+		domain = irq_domain_add_tree(gpio_node, &octeon_irq_domain_gpio78_ops, gpiod);
+		if (node < 0)
+			node = 0;
+		ciu3_info = octeon_ciu3_info_per_node[node];
+		ciu3_info->domain[block] = domain;
+		ciu3_info->intsn2hw[block] = octeon_irq_ciu3_intsn2hw;
+
+	} else {
+		pr_warn("Cannot allocate memory for GPIO irq_domain.\n");
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
 static struct of_device_id ciu_types[] __initdata = {
 	{.compatible = "cavium,octeon-3860-ciu", .data = octeon_irq_init_ciu},
 	{.compatible = "cavium,octeon-3860-gpio", .data = octeon_irq_init_gpio},
 	{.compatible = "cavium,octeon-6880-ciu2", .data = octeon_irq_init_ciu2},
 	{.compatible = "cavium,octeon-7890-ciu3", .data = octeon_irq_init_ciu3},
+	{.compatible = "cavium,octeon-7890-gpio", .data = octeon_irq_init_gpio78},
 	{.compatible = "cavium,octeon-7130-cib", .data = octeon_irq_init_cib},
 	{}
 };
 
+int octeon_msi_initialize(void);
+
 void __init arch_init_irq(void)
 {
-#ifdef CONFIG_SMP
-	if (!OCTEON_IS_MODEL(OCTEON_CN78XX)) {
-		/* Set the default affinity to the boot cpu. */
-		cpumask_clear(irq_default_affinity);
-		cpumask_set_cpu(smp_processor_id(), irq_default_affinity);
-	}
-#endif
 	of_irq_init(ciu_types);
+#ifdef CONFIG_PCI_MSI
+	octeon_msi_initialize();
+#endif
 }
 
 asmlinkage void plat_irq_dispatch(void)
@@ -3140,6 +3324,8 @@ void octeon_fixup_irqs(void)
 
 void *octeon_irq_get_ciu3_info(int node)
 {
+	if (node < 0)
+		node = 0;
 	return octeon_ciu3_info_per_node[node & CVMX_NODE_MASK];
 }
 EXPORT_SYMBOL(octeon_irq_get_ciu3_info);
diff --git a/arch/mips/cavium-octeon/setup.c b/arch/mips/cavium-octeon/setup.c
index 7324913992b4..6cc5de661c32 100644
--- a/arch/mips/cavium-octeon/setup.c
+++ b/arch/mips/cavium-octeon/setup.c
@@ -532,7 +532,7 @@ void octeon_user_io_init(void)
 	 * kernel/debug mode. */
 #if CONFIG_CAVIUM_OCTEON_CVMSEG_SIZE > 0
 	cvmmemctl.s.cvmsegenak = 1;
-	if (OCTEON_IS_MODEL(OCTEON_CN78XX)) {
+	if (octeon_has_feature(OCTEON_FEATURE_PKO3)) {
 		/* Enable LMTDMA */
 		cvmmemctl.s.lmtena = 1;
 		/* Scratch line to use for LMT operation */
@@ -581,7 +581,7 @@ void octeon_user_io_init(void)
 		/* 4096 cycles */
 		nm_tim.s.nw_tim = 3;
 		cvmx_write_csr(CVMX_SSO_NW_TIM, nm_tim.u64);
-	} else if (!OCTEON_IS_MODEL(OCTEON_CN78XX)){
+	} else {
 		union cvmx_pow_nw_tim nm_tim;
 
 		nm_tim.u64 = 0;
@@ -788,7 +788,7 @@ void __init prom_init(void)
 	if (OCTEON_IS_MODEL(OCTEON_CN38XX_PASS2) ||
 	    OCTEON_IS_MODEL(OCTEON_CN31XX))
 		cvmx_write_csr(CVMX_CIU_SOFT_BIST, 0);
-	else if (!OCTEON_IS_MODEL(OCTEON_CN78XX))
+	else if (!octeon_has_feature(OCTEON_FEATURE_CIU3))
 		cvmx_write_csr(CVMX_CIU_SOFT_BIST, 1);
 
 	/* Default to 64MB in the simulator to speed things up */
diff --git a/arch/mips/pci/msi-octeon.c b/arch/mips/pci/msi-octeon.c
index 0d2a421456f1..47339c57ddf3 100644
--- a/arch/mips/pci/msi-octeon.c
+++ b/arch/mips/pci/msi-octeon.c
@@ -600,4 +600,3 @@ int __init octeon_msi_initialize(void)
 	}
 	return 0;
 }
-subsys_initcall(octeon_msi_initialize);
-- 
2.25.1

