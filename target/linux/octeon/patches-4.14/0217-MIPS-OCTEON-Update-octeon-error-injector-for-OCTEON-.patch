From 0e5e1468dcfc9e0fb3f54fb2921d399275b6eb55 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Sat, 11 May 2019 12:54:37 +0200
Subject: [PATCH 217/345] MIPS: OCTEON: Update octeon-error-injector for OCTEON
 III.

Also add case for injecting ICache errors.
Add gpio_to_irq() test to octeon-error-injector.

Signed-off-by: David Daney <david.daney@cavium.com>
---
 .../cavium-octeon/octeon-error-injector.c     | 68 ++++++++++++++++++-
 1 file changed, 65 insertions(+), 3 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-error-injector.c b/arch/mips/cavium-octeon/octeon-error-injector.c
index 1cf4b7001725..ff498ad2062b 100644
--- a/arch/mips/cavium-octeon/octeon-error-injector.c
+++ b/arch/mips/cavium-octeon/octeon-error-injector.c
@@ -11,6 +11,8 @@
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/slab.h>
+#include <linux/gpio.h>
+#include <linux/interrupt.h>
 
 #include <asm/octeon/octeon.h>
 #include <asm/octeon/cvmx-fpa.h>
@@ -23,14 +25,39 @@ int test_param;
 module_param(test_param, int, 0444);
 MODULE_PARM_DESC(test_param, "Parameter used in the test case.");
 
+volatile int octeon_error_injector_foo;
+
+static void octeon_error_injector_l1_icache_parity(void)
+{
+	unsigned long coreid = cvmx_get_core_num();
+	if (OCTEON_IS_OCTEON3() || OCTEON_IS_OCTEON2()) {
+		u64 icache;
+
+		icache = read_octeon_c0_icacheerr();
+		icache |= (1ull << 31);
+		write_octeon_c0_icacheerr(icache);
+		asm volatile("synci	0($0)" ::: "memory");
+		pr_err("Wrote CacheErr(ICache): %016llx on core %lu\n", (unsigned long long)icache, coreid);
+	}
+}
+
 static void octeon_error_injector_l1_dcache_parity(void)
 {
+	unsigned long coreid = cvmx_get_core_num();
 	if (OCTEON_IS_OCTEON3()) {
-		u64 errctl = read_octeon_c0_errctl();
+		u64 errctl;
+		int i;
+
+		errctl = read_octeon_c0_errctl();
 		errctl |= (1ull << 11);
 		write_octeon_c0_errctl(errctl);
-	} else if (OCTEON_IS_OCTEON2())
+		asm volatile("cache	1, 0($0)" ::: "memory");
+		i = octeon_error_injector_foo;
+		pr_err("Wrote ErrCtl: %016llx on core %lu\n", (unsigned long long)errctl, coreid);
+	} else if (OCTEON_IS_OCTEON2()) {
 		write_octeon_c0_dcacheerr(1ull<<3);
+		pr_err("Wrote DCacheErr: %016llx on core %lu\n", 1ull<<3, coreid);
+	}
 }
 
 static void octeon_error_injector_tlb_parity(void)
@@ -60,7 +87,7 @@ static void octeon_error_injector_fpa1(void)
 	char *mem;
 	u64 old_threshold;
 
-	cvmx_fpa_enable();
+	cvmx_fpa1_enable();
 
 	mem = kmalloc(1024, GFP_KERNEL);
 	if (!mem)
@@ -83,6 +110,32 @@ static void octeon_error_injector_fpa1(void)
 	cvmx_write_csr(CVMX_FPA_POOLX_THRESHOLD(7), old_threshold);
 }
 
+static irqreturn_t octeon_error_injector_gpio_handler(int irq, void *arg)
+{
+	disable_irq_nosync(irq);
+	return IRQ_HANDLED;
+}
+
+static int octeon_error_injector_irq;
+
+static void octeon_error_injector_gpio_irq(void)
+{
+	int rv;
+	int irq = gpio_to_irq(test_param);
+
+	pr_err("gpio_to_irq(%d) -> %d\n", test_param, irq);
+
+	if (irq) {
+		rv = request_irq(irq, octeon_error_injector_gpio_handler, 0,
+				 "octeon_error_injector",
+				 octeon_error_injector_gpio_handler);
+		if (rv)
+			pr_err("request_irq failed: %d\n", rv);
+		else
+			octeon_error_injector_irq = irq;
+	}
+}
+
 static int __init octeon_error_injector_init(void)
 {
 	/* We are injecting errors, so mark the kernel as tainted.*/
@@ -101,6 +154,12 @@ static int __init octeon_error_injector_init(void)
 	case 4:
 		octeon_error_injector_tlb_parity();
 		break;
+	case 5:
+		octeon_error_injector_l1_icache_parity();
+		break;
+	case 6:
+		octeon_error_injector_gpio_irq();
+		break;
 	default:
 		pr_err("Error: Unrecognized test number: %d\n",  test_number);
 		break;
@@ -112,6 +171,9 @@ module_init(octeon_error_injector_init);
 
 static void __exit octeon_error_injector_exit(void)
 {
+	if (octeon_error_injector_irq)
+		free_irq(octeon_error_injector_irq,
+			 octeon_error_injector_gpio_handler);
 }
 module_exit(octeon_error_injector_exit);
 
-- 
2.25.1

