From 9bd70eb1458debf38f59093572c36879670bcf93 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Sun, 5 May 2019 15:03:35 +0200
Subject: [PATCH 209/345] MIPS: OCTEON: Fix IPI mechanism used by KEXEC.

Set the state of the target CPU, not the current CPU.
Register a dump handler mailbox.
Disable watchdog before CPU is stopped.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
Signed-off-by: Carlos Munoz <cmunoz@caviumnetworks.com>
---
 arch/mips/cavium-octeon/smp.c | 19 ++++++++++++++++---
 1 file changed, 16 insertions(+), 3 deletions(-)

diff --git a/arch/mips/cavium-octeon/smp.c b/arch/mips/cavium-octeon/smp.c
index 3f7a2cee95d2..2b8fbc0d6dcf 100644
--- a/arch/mips/cavium-octeon/smp.c
+++ b/arch/mips/cavium-octeon/smp.c
@@ -52,7 +52,7 @@ static void (*octeon_message_functions[8])(void) = {
 	octeon_icache_flush,
 };
 
-static  int octeon_message_free_mask = 0xf8;
+static  int octeon_message_free_mask = IS_ENABLED(CONFIG_KEXEC) ? 0xf0 : 0xf8;
 static DEFINE_SPINLOCK(octeon_message_functions_lock);
 
 int octeon_request_ipi_handler(octeon_message_fn_t fn)
@@ -290,6 +290,14 @@ static void octeon_init_secondary(void)
 	octeon_irq_setup_secondary();
 }
 
+static irqreturn_t octeon_78xx_smp_dump_interrupt(int irq, void *dev_id)
+{
+#ifdef CONFIG_KEXEC
+	octeon_crash_dump();
+#endif
+	return IRQ_HANDLED;
+}
+
 /**
  * Callout to firmware before smp_init
  *
@@ -381,7 +389,7 @@ static int octeon_up_prepare(unsigned int cpu)
 	int coreid = cpu_logical_map(cpu);
 	int node;
 
-	per_cpu(cpu_state, smp_processor_id()) = CPU_UP_PREPARE;
+	per_cpu(cpu_state, cpu) = CPU_UP_PREPARE;
 	octeon_bootvector[coreid].target_ptr = (uint64_t)octeon_hotplug_entry_raw;
 	mb();
 	/* Convert coreid to node,core spair and send NMI to target core */
@@ -390,7 +398,7 @@ static int octeon_up_prepare(unsigned int cpu)
 	if (octeon_has_feature(OCTEON_FEATURE_CIU3))
 		cvmx_write_csr_node(node, CVMX_CIU3_NMI, (1ull << coreid));
 	else
-		cvmx_write_csr(CVMX_CIU_NMI, (1 << coreid));
+		cvmx_write_csr(CVMX_CIU_NMI, (1ull << coreid));
 	return 0;
 }
 
@@ -491,6 +499,11 @@ static void octeon_78xx_prepare_cpus(unsigned int max_cpus)
 			octeon_78xx_icache_flush_interrupt)) {
 		panic("Cannot request_irq for ICache-Flush");
 	}
+	if (request_irq(OCTEON_IRQ_MBOX0 + 3, octeon_78xx_smp_dump_interrupt,
+			IRQF_PERCPU | IRQF_NO_THREAD, "SMP-Dump",
+			octeon_78xx_smp_dump_interrupt)) {
+		panic("Cannot request_irq for SMP-Dump");
+	}
 }
 
 static void octeon_78xx_send_ipi_single(int cpu, unsigned int action)
-- 
2.25.1

