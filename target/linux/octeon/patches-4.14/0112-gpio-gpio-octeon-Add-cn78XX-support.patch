From 6c454b1eb33cce8979a6922a2fe9da52e666fdf8 Mon Sep 17 00:00:00 2001
From: David Daney <david.daney@cavium.com>
Date: Mon, 6 May 2019 13:19:09 +0200
Subject: [PATCH 112/345] gpio: gpio-octeon: Add cn78XX support.

Add support for multiple GPIO controllers and gpio_to_irq() support.

Signed-off-by: David Daney <david.daney@cavium.com>
Signed-off-by: Leonid Rosenboim <lrosenboim@caviumnetworks.com>
Signed-off-by: Chandrakala Chavva <cchavva@caviumnetworks.com>
Signed-off-by: Carlos Munoz <cmunoz@caviumnetworks.com>
Signed-off-by: Corey Minyard <cminyard@mvista.com>
---
 .../include/asm/mach-cavium-octeon/gpio.h     | 21 +++++
 drivers/gpio/gpio-octeon.c                    | 91 +++++++++++++------
 2 files changed, 84 insertions(+), 28 deletions(-)
 create mode 100644 arch/mips/include/asm/mach-cavium-octeon/gpio.h

diff --git a/arch/mips/include/asm/mach-cavium-octeon/gpio.h b/arch/mips/include/asm/mach-cavium-octeon/gpio.h
new file mode 100644
index 000000000000..34e9f7aabab4
--- /dev/null
+++ b/arch/mips/include/asm/mach-cavium-octeon/gpio.h
@@ -0,0 +1,21 @@
+#ifndef __ASM_MACH_CAVIUM_OCTEON_GPIO_H
+#define __ASM_MACH_CAVIUM_OCTEON_GPIO_H
+
+#ifdef CONFIG_GPIOLIB
+#define gpio_get_value	__gpio_get_value
+#define gpio_set_value	__gpio_set_value
+#define gpio_cansleep	__gpio_cansleep
+#else
+int gpio_request(unsigned gpio, const char *label);
+void gpio_free(unsigned gpio);
+int gpio_direction_input(unsigned gpio);
+int gpio_direction_output(unsigned gpio, int value);
+int gpio_get_value(unsigned gpio);
+void gpio_set_value(unsigned gpio, int value);
+#endif
+
+#include <asm-generic/gpio.h>
+
+#define gpio_to_irq	__gpio_to_irq
+
+#endif /* __ASM_MACH_GENERIC_GPIO_H */
diff --git a/drivers/gpio/gpio-octeon.c b/drivers/gpio/gpio-octeon.c
index 96a8a8cb2729..e123bdf98fa3 100644
--- a/drivers/gpio/gpio-octeon.c
+++ b/drivers/gpio/gpio-octeon.c
@@ -6,10 +6,10 @@
  * Copyright (C) 2011, 2012 Cavium Inc.
  */
 
-#include <linux/platform_device.h>
-#include <linux/kernel.h>
+#include <linux/of_device.h>
 #include <linux/module.h>
-#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/of_irq.h>
 #include <linux/io.h>
 
 #include <asm/octeon/octeon.h>
@@ -18,32 +18,35 @@
 #define RX_DAT 0x80
 #define TX_SET 0x88
 #define TX_CLEAR 0x90
+
+struct octeon_gpio {
+	struct gpio_chip chip;
+	u64 register_base;
+	unsigned int (*cfg_reg)(unsigned int);
+};
+
 /*
  * The address offset of the GPIO configuration register for a given
  * line.
  */
-static unsigned int bit_cfg_reg(unsigned int offset)
+static unsigned int bit_cfg_reg38(unsigned int gpio)
 {
-	/*
-	 * The register stride is 8, with a discontinuity after the
-	 * first 16.
-	 */
-	if (offset < 16)
-		return 8 * offset;
+	if (gpio < 16)
+		return 8 * gpio;
 	else
-		return 8 * (offset - 16) + 0x100;
+		return 8 * (gpio - 16) + 0x100;
 }
 
-struct octeon_gpio {
-	struct gpio_chip chip;
-	u64 register_base;
-};
+static unsigned int bit_cfg_reg78(unsigned int gpio)
+{
+	return (8 * gpio) + 0x100;
+}
 
 static int octeon_gpio_dir_in(struct gpio_chip *chip, unsigned offset)
 {
 	struct octeon_gpio *gpio = gpiochip_get_data(chip);
 
-	cvmx_write_csr(gpio->register_base + bit_cfg_reg(offset), 0);
+	cvmx_write_csr(gpio->register_base + gpio->cfg_reg(offset), 0);
 	return 0;
 }
 
@@ -66,7 +69,7 @@ static int octeon_gpio_dir_out(struct gpio_chip *chip, unsigned offset,
 	cfgx.u64 = 0;
 	cfgx.s.tx_oe = 1;
 
-	cvmx_write_csr(gpio->register_base + bit_cfg_reg(offset), cfgx.u64);
+	cvmx_write_csr(gpio->register_base + gpio->cfg_reg(offset), cfgx.u64);
 	return 0;
 }
 
@@ -78,18 +81,50 @@ static int octeon_gpio_get(struct gpio_chip *chip, unsigned offset)
 	return ((1ull << offset) & read_bits) != 0;
 }
 
+static int octeon_gpio_to_irq(struct gpio_chip *chip, unsigned offset)
+{
+	struct of_phandle_args oirq;
+
+	if (offset >= 16)
+		return -ENXIO;
+
+	if (of_irq_parse_one(chip->of_node, offset, &oirq))
+		return -ENXIO;
+
+	return irq_create_of_mapping(&oirq);
+}
+
+static struct of_device_id octeon_gpio_match[] = {
+	{
+		.compatible = "cavium,octeon-3860-gpio",
+		.data = bit_cfg_reg38,
+	},
+	{
+		.compatible = "cavium,octeon-7890-gpio",
+		.data = bit_cfg_reg78,
+	},
+	{},
+};
+MODULE_DEVICE_TABLE(of, octeon_gpio_match);
+
 static int octeon_gpio_probe(struct platform_device *pdev)
 {
 	struct octeon_gpio *gpio;
 	struct gpio_chip *chip;
 	struct resource *res_mem;
 	void __iomem *reg_base;
+	const struct of_device_id *of_id;
 	int err = 0;
 
+	of_id = of_match_device(octeon_gpio_match, &pdev->dev);
+	if (!of_id)
+		return -EINVAL;
+
 	gpio = devm_kzalloc(&pdev->dev, sizeof(*gpio), GFP_KERNEL);
 	if (!gpio)
 		return -ENOMEM;
 	chip = &gpio->chip;
+	gpio->cfg_reg = of_id->data;
 
 	res_mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	reg_base = devm_ioremap_resource(&pdev->dev, res_mem);
@@ -100,30 +135,30 @@ static int octeon_gpio_probe(struct platform_device *pdev)
 	pdev->dev.platform_data = chip;
 	chip->label = "octeon-gpio";
 	chip->parent = &pdev->dev;
+	chip->of_node = pdev->dev.of_node;
 	chip->owner = THIS_MODULE;
-	chip->base = 0;
+	/*
+	 * Node zero is at base of 0, other nodes are automatically
+	 * allocated.
+	 */
+	chip->base = of_node_to_nid(chip->of_node) ? -1 : 0;
 	chip->can_sleep = false;
-	chip->ngpio = 20;
+	chip->ngpio = 32;
 	chip->direction_input = octeon_gpio_dir_in;
 	chip->get = octeon_gpio_get;
 	chip->direction_output = octeon_gpio_dir_out;
 	chip->set = octeon_gpio_set;
+	chip->of_gpio_n_cells = 2;
+	chip->of_xlate = of_gpio_simple_xlate;
+	chip->to_irq = octeon_gpio_to_irq;
 	err = devm_gpiochip_add_data(&pdev->dev, chip, gpio);
 	if (err)
 		return err;
 
-	dev_info(&pdev->dev, "OCTEON GPIO driver probed.\n");
+	dev_info(&pdev->dev, "OCTEON GPIO: base = %d\n", chip->base);
 	return 0;
 }
 
-static const struct of_device_id octeon_gpio_match[] = {
-	{
-		.compatible = "cavium,octeon-3860-gpio",
-	},
-	{},
-};
-MODULE_DEVICE_TABLE(of, octeon_gpio_match);
-
 static struct platform_driver octeon_gpio_driver = {
 	.driver = {
 		.name		= "octeon_gpio",
-- 
2.25.1

